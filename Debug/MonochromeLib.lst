SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE    1

************ OBJECT LISTING ************

FILE NAME: C:\Users\ALEX\Desktop\Jetpack Joyride Casio - LastIndev\MonochromeLib.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome     1    /*************************************************************/
      Monochrome     2    /** MonochromeLib - monochrome graphic library for fx-9860G **/
      Monochrome     3    /** MonochromeLib is free software                          **/
      Monochrome     4    /**                                                         **/
      Monochrome     5    /** @author Pierre "PierrotLL" Le Gall                      **/
      Monochrome     6    /** @contact legallpierre89@gmail.com                       **/
      Monochrome     7    /**                                                         **/
      Monochrome     8    /** @file MonochromeLib.c                                   **/
      Monochrome     9    /** Code file of MonochromeLib                              **/
      Monochrome    10    /**                                                         **/
      Monochrome    11    /** @date 11-22-2011                                        **/
      Monochrome    12    /*************************************************************/
      Monochrome    13    
      Monochrome    14    #include "MonochromeLib.h"
      Monochrome    15    #include <stdlib.h>
      Monochrome    16    
      Monochrome    17    
      Monochrome    18    /******************************/
      Monochrome    19    /** Dependencies management  **/
      Monochrome    20    /******************************/
      Monochrome    21    
      Monochrome    22    #ifdef ML_ALL
      Monochrome    23            #define ML_CLEAR_VRAM
      Monochrome    24            #define ML_CLEAR_SCREEN
      Monochrome    25            #define ML_DISPLAY_VRAM
      Monochrome    26            #define ML_SET_CONTRAST
      Monochrome    27            #define ML_GET_CONTRAST
      Monochrome    28            #define ML_PIXEL
      Monochrome    29            #define ML_POINT
      Monochrome    30            #define ML_PIXEL_TEST
      Monochrome    31            #define ML_LINE
      Monochrome    32            #define ML_HORIZONTAL_LINE
      Monochrome    33            #define ML_VERTICAL_LINE
      Monochrome    34            #define ML_RECTANGLE
      Monochrome    35            #define ML_POLYGON
      Monochrome    36            #define ML_FILLED_POLYGON
      Monochrome    37            #define ML_CIRCLE
      Monochrome    38            #define ML_FILLED_CIRCLE
      Monochrome    39            #define ML_ELLIPSE
      Monochrome    40            #define ML_ELLIPSE_IN_RECT
      Monochrome    41            #define ML_FILLED_ELLIPSE
      Monochrome    42            #define ML_FILLED_ELLIPSE_IN_RECT
      Monochrome    43            #define ML_HORIZONTAL_SCROLL
      Monochrome    44            #define ML_VERTICAL_SCROLL
      Monochrome    45            #define ML_BMP_OR
      Monochrome    46            #define ML_BMP_AND
      Monochrome    47            #define ML_BMP_XOR
      Monochrome    48            #define ML_BMP_OR_CL
      Monochrome    49            #define ML_BMP_AND_CL
      Monochrome    50            #define ML_BMP_XOR_CL
      Monochrome    51            #define ML_BMP_8_OR
      Monochrome    52            #define ML_BMP_8_AND
      Monochrome    53            #define ML_BMP_8_XOR
      Monochrome    54            #define ML_BMP_8_OR_CL




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome    55            #define ML_BMP_8_AND_CL
      Monochrome    56            #define ML_BMP_8_XOR_CL
      Monochrome    57            #define ML_BMP_16_OR
      Monochrome    58            #define ML_BMP_16_AND
      Monochrome    59            #define ML_BMP_16_XOR
      Monochrome    60            #define ML_BMP_16_OR_CL
      Monochrome    61            #define ML_BMP_16_AND_CL
      Monochrome    62            #define ML_BMP_16_XOR_CL
      Monochrome    63    #endif
      Monochrome    64    
      Monochrome    65    #ifdef ML_POLYGON
      Monochrome    66            #define ML_LINE
      Monochrome    67    #endif
      Monochrome    68    
      Monochrome    69    #ifdef ML_LINE
      Monochrome    70            #define ML_PIXEL
      Monochrome    71    #endif
      Monochrome    72    
      Monochrome    73    #ifdef ML_POINT
      Monochrome    74            #define ML_PIXEL
      Monochrome    75            #define ML_RECTANGLE
      Monochrome    76    #endif
      Monochrome    77    
      Monochrome    78    #ifdef ML_RECTANGLE
      Monochrome    79            #define ML_HORIZONTAL_LINE
      Monochrome    80    #endif
      Monochrome    81    
      Monochrome    82    #ifdef ML_FILLED_POLYGON
      Monochrome    83            #define ML_HORIZONTAL_LINE
      Monochrome    84    #endif
      Monochrome    85    
      Monochrome    86    #ifdef ML_CIRCLE
      Monochrome    87            #define ML_PIXEL
      Monochrome    88    #endif
      Monochrome    89    
      Monochrome    90    #ifdef ML_FILLED_CIRCLE
      Monochrome    91            #define ML_HORIZONTAL_LINE
      Monochrome    92    #endif
      Monochrome    93    
      Monochrome    94    #ifdef ML_ELLIPSE_IN_RECT
      Monochrome    95            #define ML_ELLIPSE
      Monochrome    96    #endif
      Monochrome    97    
      Monochrome    98    #ifdef ML_ELLIPSE
      Monochrome    99            #define ML_PIXEL
      Monochrome   100    #endif
      Monochrome   101    
      Monochrome   102    #ifdef ML_FILLED_ELLIPSE_IN_RECT
      Monochrome   103            #define ML_FILLED_ELLIPSE
      Monochrome   104    #endif
      Monochrome   105    
      Monochrome   106    #ifdef ML_FILLED_ELLIPSE
      Monochrome   107            #define ML_HORIZONTAL_LINE
      Monochrome   108    #endif
      Monochrome   109    
      Monochrome   110    
      Monochrome   111    /***************/




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome   112    /** Functions **/
      Monochrome   113    /***************/
      Monochrome   114    
      Monochrome   115    #define sgn(x)  (x<0?-1:1)
      Monochrome   116    #define rnd(x)  ((int)(x+0.5))
      Monochrome   117    
      Monochrome   118    //Thanks to Simon Lothar for this function
      Monochrome   119    static int SysCallCode[] = {0xD201422B,0x60F20000,0x80010070};
      Monochrome   120    static int (*SysCall)( int R4, int R5, int R6, int R7, int FNo ) = (void*)&SysCallCode;
      Monochrome   121    char* ML_vram_adress()
P   00000000              _ML_vram_adress:                 ; function: ML_vram_adress
                                                           ; frame size=8
    00000000 4F22                   STS.L       PR,@-R15
      Monochrome   122    {
      Monochrome   123            return (char*)((*SysCall)(0, 0, 0, 0, 309));
    00000002 E700                   MOV         #0,R7
    00000004 D336                   MOV.L       L895+6,R3  ; __$SysCall
    00000006 6673                   MOV         R7,R6
    00000008 9267                   MOV.W       L895,R2    ; H'0135
    0000000A 6573                   MOV         R7,R5
    0000000C 6032                   MOV.L       @R3,R0
    0000000E 2F26                   MOV.L       R2,@-R15
    00000010 400B                   JSR         @R0
    00000012 6473                   MOV         R7,R4
      Monochrome   124    }
    00000014 7F04                   ADD         #4,R15
    00000016 4F26                   LDS.L       @R15+,PR
    00000018 000B                   RTS
    0000001A 0009                   NOP
      Monochrome   125    
      Monochrome   126    #ifdef ML_CLEAR_VRAM
      Monochrome   127    void ML_clear_vram()
    0000001C              _ML_clear_vram:                  ; function: ML_clear_vram
                                                           ; frame size=8
    0000001C 2FD6                   MOV.L       R13,@-R15
    0000001E 4F22                   STS.L       PR,@-R15
      Monochrome   128    {
      Monochrome   129            int i, end, *pointer_long, vram;
      Monochrome   130            char *pointer_byte;
      Monochrome   131            vram = (int)ML_vram_adress();
    00000020 BFEE                   BSR         _ML_vram_adress
    00000022 0009                   NOP
    00000024 6703                   MOV         R0,R7
      Monochrome   132            end = 4-vram&3;
    00000026 E004                   MOV         #4,R0
    00000028 3078                   SUB         R7,R0
    0000002A E603                   MOV         #3,R6
    0000002C 2609                   AND         R0,R6
      Monochrome   133            pointer_byte = (char*)vram;
    0000002E 6D73                   MOV         R7,R13
      Monochrome   134            for(i=0 ; i<end ; i++) pointer_byte[i] = 0;
    00000030 E400                   MOV         #0,R4
    00000032 6143                   MOV         R4,R1
    00000034 4615                   CMP/PL      R6
    00000036 8F05                   BF/S        L630
    00000038 6573                   MOV         R7,R5
    0000003A              L631:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000003A 7101                   ADD         #1,R1
    0000003C 2540                   MOV.B       R4,@R5
    0000003E 3163                   CMP/GE      R6,R1
    00000040 8FFB                   BF/S        L631
    00000042 7501                   ADD         #1,R5
    00000044              L630:                             
    00000044 904A                   MOV.W       L895+2,R0  ; H'03FC
      Monochrome   135            pointer_long = (int*) (vram+end);
    00000046 6163                   MOV         R6,R1
    00000048 317C                   ADD         R7,R1
    0000004A 6513                   MOV         R1,R5
    0000004C 301C                   ADD         R1,R0
      Monochrome   136            for(i=0 ; i<255 ; i++) pointer_long[i] = 0;
    0000004E              L632:                             
    0000004E 2542                   MOV.L       R4,@R5
    00000050 7504                   ADD         #4,R5
    00000052 3502                   CMP/HS      R0,R5
    00000054 8BFB                   BF          L632
      Monochrome   137            pointer_byte += 1020+end;
    00000056 9241                   MOV.W       L895+2,R2  ; H'03FC
    00000058 362C                   ADD         R2,R6
    0000005A 3D6C                   ADD         R6,R13
      Monochrome   138            end = vram&3;
    0000005C E603                   MOV         #3,R6
    0000005E 2679                   AND         R7,R6
      Monochrome   139            for(i=0 ; i<end ; i++) pointer_byte[i] = 0;
    00000060 6743                   MOV         R4,R7
    00000062 4615                   CMP/PL      R6
    00000064 8F05                   BF/S        L633
    00000066 65D3                   MOV         R13,R5
    00000068              L634:                             
    00000068 2540                   MOV.B       R4,@R5
    0000006A 7701                   ADD         #1,R7
    0000006C 3763                   CMP/GE      R6,R7
    0000006E 8FFB                   BF/S        L634
    00000070 7501                   ADD         #1,R5
    00000072              L633:                             
      Monochrome   140    }
    00000072 4F26                   LDS.L       @R15+,PR
    00000074 000B                   RTS
    00000076 6DF6                   MOV.L       @R15+,R13
      Monochrome   141    #endif
      Monochrome   142    
      Monochrome   143    #ifdef ML_CLEAR_SCREEN
      Monochrome   144    void ML_clear_screen()
      Monochrome   145    {
      Monochrome   146            char *LCD_register_selector = (char*)0xB4000000, *LCD_data_register = (char*)0xB4010000;
      Monochrome   147            int i, j;
      Monochrome   148            for(i=0 ; i<64 ; i++)
      Monochrome   149            {
      Monochrome   150                    *LCD_register_selector = 4;
      Monochrome   151                    *LCD_data_register = i|192;
      Monochrome   152                    *LCD_register_selector = 4;
      Monochrome   153                    *LCD_data_register = 0;
      Monochrome   154                    *LCD_register_selector = 7;
      Monochrome   155                    for(j=0 ; j<16 ; j++) *LCD_data_register = 0;
      Monochrome   156            }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome   157    }
      Monochrome   158    #endif
      Monochrome   159    
      Monochrome   160    #ifdef ML_DISPLAY_VRAM
      Monochrome   161    void ML_display_vram()
    00000078              _ML_display_vram:                ; function: ML_display_vram
                                                           ; frame size=20
    00000078 2FC6                   MOV.L       R12,@-R15
    0000007A 2FB6                   MOV.L       R11,@-R15
    0000007C 2FA6                   MOV.L       R10,@-R15
    0000007E 2F96                   MOV.L       R9,@-R15
    00000080 4F22                   STS.L       PR,@-R15
      Monochrome   162    {
      Monochrome   163            char *LCD_register_selector = (char*)0xB4000000, *LCD_data_register = (char*)0xB4010000, *vram;
      Monochrome   164            int i, j;
      Monochrome   165            vram = ML_vram_adress();
    00000082 BFBD                   BSR         _ML_vram_adress
    00000084 0009                   NOP
    00000086 6C03                   MOV         R0,R12
      Monochrome   166            for(i=0 ; i<64 ; i++)
    00000088 D516                   MOV.L       L895+10,R5 ; H'B4000000
    0000008A E940                   MOV         #64,R9
    0000008C D416                   MOV.L       L895+14,R4 ; H'B4010000
    0000008E EA10                   MOV         #16,R10
    00000090 EB07                   MOV         #7,R11
    00000092 E100                   MOV         #0,R1
    00000094 E704                   MOV         #4,R7
    00000096 6013                   MOV         R1,R0
    00000098              L635:                             
      Monochrome   167            {
      Monochrome   168                    *LCD_register_selector = 4;
    00000098 2570                   MOV.B       R7,@R5
      Monochrome   169                    *LCD_data_register = i|192;
    0000009A E2C0                   MOV         #-64,R2
    0000009C 220B                   OR          R0,R2
      Monochrome   170                    *LCD_register_selector = 4;
      Monochrome   171                    *LCD_data_register = 0;
      Monochrome   172                    *LCD_register_selector = 7;
      Monochrome   173                    for(j=0 ; j<16 ; j++) *LCD_data_register = *vram++;
    0000009E 66A3                   MOV         R10,R6
    000000A0 2420                   MOV.B       R2,@R4
    000000A2 2570                   MOV.B       R7,@R5
    000000A4 2410                   MOV.B       R1,@R4
    000000A6 25B0                   MOV.B       R11,@R5
    000000A8              L636:                             
    000000A8 63C4                   MOV.B       @R12+,R3
    000000AA 4610                   DT          R6
    000000AC 8FFC                   BF/S        L636
    000000AE 2430                   MOV.B       R3,@R4
    000000B0 7001                   ADD         #1,R0
    000000B2 3093                   CMP/GE      R9,R0
    000000B4 8BF0                   BF          L635
      Monochrome   174            }
      Monochrome   175    }
    000000B6 4F26                   LDS.L       @R15+,PR
    000000B8 69F6                   MOV.L       @R15+,R9
    000000BA 6AF6                   MOV.L       @R15+,R10




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000BC 6BF6                   MOV.L       @R15+,R11
    000000BE 000B                   RTS
    000000C0 6CF6                   MOV.L       @R15+,R12
      Monochrome   176    #endif
      Monochrome   177    
      Monochrome   178    #ifdef ML_SET_CONTRAST
      Monochrome   179    void ML_set_contrast(unsigned char contrast)
    000000C2              _ML_set_contrast:                ; function: ML_set_contrast
                                                           ; frame size=0
      Monochrome   180    {
      Monochrome   181            char *LCD_register_selector = (char*)0xB4000000, *LCD_data_register = (char*)0xB4010000;
      Monochrome   182            *LCD_register_selector = 6;
    000000C2 E306                   MOV         #6,R3
    000000C4 D207                   MOV.L       L895+10,R2 ; H'B4000000
    000000C6 2230                   MOV.B       R3,@R2
      Monochrome   183            *LCD_data_register = contrast;
    000000C8 D107                   MOV.L       L895+14,R1 ; H'B4010000
      Monochrome   184    }
    000000CA 000B                   RTS
    000000CC 2140                   MOV.B       R4,@R1
      Monochrome   185    #endif
      Monochrome   186    
      Monochrome   187    #ifdef ML_GET_CONTRAST
      Monochrome   188    unsigned char ML_get_contrast()
    000000CE              _ML_get_contrast:                ; function: ML_get_contrast
                                                           ; frame size=0
      Monochrome   189    {
      Monochrome   190            char *LCD_register_selector = (char*)0xB4000000, *LCD_data_register = (char*)0xB4010000;
      Monochrome   191            *LCD_register_selector = 6;
    000000CE E306                   MOV         #6,R3
    000000D0 D204                   MOV.L       L895+10,R2 ; H'B4000000
    000000D2 2230                   MOV.B       R3,@R2
      Monochrome   192            return *LCD_data_register;
    000000D4 D104                   MOV.L       L895+14,R1 ; H'B4010000
      Monochrome   193    }
    000000D6 000B                   RTS
    000000D8 6010                   MOV.B       @R1,R0
    000000DA              L895:                             
    000000DA 0135                   .DATA.W     H'0135
    000000DC 03FC                   .DATA.W     H'03FC
    000000DE 0000                   .DATA.W     0
    000000E0 <00000000>             .DATA.L     __$SysCall
    000000E4 B4000000               .DATA.L     H'B4000000
    000000E8 B4010000               .DATA.L     H'B4010000
      Monochrome   194    #endif
      Monochrome   195    
      Monochrome   196    #ifdef ML_PIXEL
      Monochrome   197    void ML_pixel(int x, int y, ML_Color color)
    000000EC              _ML_pixel:                       ; function: ML_pixel
                                                           ; frame size=16
    000000EC 2FE6                   MOV.L       R14,@-R15
    000000EE 6E43                   MOV         R4,R14
    000000F0 2FD6                   MOV.L       R13,@-R15
    000000F2 6D53                   MOV         R5,R13
    000000F4 4F22                   STS.L       PR,@-R15
    000000F6 7FFC                   ADD         #-4,R15
      Monochrome   198    {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome   199            char* vram = ML_vram_adress();
    000000F8 BF82                   BSR         _ML_vram_adress
    000000FA 2F62                   MOV.L       R6,@R15
      Monochrome   200            if(x&~127 || y&~63) return;
    000000FC E280                   MOV         #-128,R2
    000000FE 22E8                   TST         R14,R2
    00000100 8F35                   BF/S        L640
    00000102 6603                   MOV         R0,R6
    00000104 E1C0                   MOV         #-64,R1
    00000106 21D8                   TST         R13,R1
    00000108 8B31                   BF          L640
    0000010A 64D3                   MOV         R13,R4
    0000010C 957F                   MOV.W       L896,R5    ; H'0080
    0000010E 63E3                   MOV         R14,R3
    00000110 60F2                   MOV.L       @R15,R0
    00000112 4408                   SHLL2       R4
    00000114 4408                   SHLL2       R4
    00000116 4321                   SHAR        R3
    00000118 4321                   SHAR        R3
    0000011A 4321                   SHAR        R3
    0000011C 343C                   ADD         R3,R4
    0000011E 346C                   ADD         R6,R4
    00000120 E307                   MOV         #7,R3
    00000122 23E9                   AND         R14,R3
    00000124 633B                   NEG         R3,R3
    00000126 8801                   CMP/EQ      #1,R0
    00000128 8D08                   BT/S        L621
    0000012A 453C                   SHAD        R3,R5
    0000012C 8800                   CMP/EQ      #0,R0
    0000012E 8908                   BT          L622
    00000130 8802                   CMP/EQ      #2,R0
    00000132 890A                   BT          L623
    00000134 8803                   CMP/EQ      #3,R0
    00000136 890C                   BT          L624
    00000138 A019                   BRA         L640
    0000013A 0009                   NOP
    0000013C              L621:                            ; case label 
      Monochrome   201            switch(color)
      Monochrome   202            {
      Monochrome   203                    case ML_BLACK:
      Monochrome   204                            vram[(y<<4)+(x>>3)] |= 128>>(x&7);
    0000013C 6340                   MOV.B       @R4,R3
      Monochrome   205                            break;
    0000013E A011                   BRA         L894
    00000140 235B                   OR          R5,R3
    00000142              L622:                            ; case label 
      Monochrome   206                    case ML_WHITE:
      Monochrome   207                            vram[(y<<4)+(x>>3)] &= ~(128>>(x&7));
    00000142 6557                   NOT         R5,R5
    00000144 6340                   MOV.B       @R4,R3
      Monochrome   208                            break;
    00000146 A00D                   BRA         L894
    00000148 2359                   AND         R5,R3
    0000014A              L623:                            ; case label 
      Monochrome   209                    case ML_XOR:
      Monochrome   210                            vram[(y<<4)+(x>>3)] ^= 128>>(x&7);
    0000014A 6140                   MOV.B       @R4,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000014C 215A                   XOR         R5,R1
      Monochrome   211                            break;
    0000014E A00E                   BRA         L640
    00000150 2410                   MOV.B       R1,@R4
    00000152              L624:                            ; case label 
      Monochrome   212                    case ML_CHECKER:
      Monochrome   213                            if(y&1^x&1) vram[(y<<4)+(x>>3)] &= ~(128>>(x&7));
    00000152 E601                   MOV         #1,R6
    00000154 2D69                   AND         R6,R13
    00000156 2E69                   AND         R6,R14
    00000158 2DEA                   XOR         R14,R13
    0000015A 2DD8                   TST         R13,R13
    0000015C 8904                   BT          L642
    0000015E 6557                   NOT         R5,R5
    00000160 6340                   MOV.B       @R4,R3
    00000162 2359                   AND         R5,R3
    00000164              L894:                             
    00000164 A003                   BRA         L640
    00000166 2430                   MOV.B       R3,@R4
    00000168              L642:                             
      Monochrome   214                            else vram[(y<<4)+(x>>3)] |= 128>>(x&7);
    00000168 6140                   MOV.B       @R4,R1
    0000016A 215B                   OR          R5,R1
    0000016C 2410                   MOV.B       R1,@R4
      Monochrome   215                            break;
      Monochrome   216            }
      Monochrome   217    }
    0000016E              L640:                             
    0000016E 7F04                   ADD         #4,R15
    00000170 4F26                   LDS.L       @R15+,PR
    00000172 6DF6                   MOV.L       @R15+,R13
    00000174 000B                   RTS
    00000176 6EF6                   MOV.L       @R15+,R14
      Monochrome   218    #endif
      Monochrome   219    
      Monochrome   220    #ifdef ML_POINT
      Monochrome   221    void ML_point(int x, int y, int width, ML_Color color)
    00000178              _ML_point:                       ; function: ML_point
                                                           ; frame size=36
    00000178 2FE6                   MOV.L       R14,@-R15
      Monochrome   222    {
      Monochrome   223            if(width < 1) return;
    0000017A E301                   MOV         #1,R3
    0000017C 2FD6                   MOV.L       R13,@-R15
    0000017E 3633                   CMP/GE      R3,R6
    00000180 2FC6                   MOV.L       R12,@-R15
    00000182 6D53                   MOV         R5,R13
    00000184 2FB6                   MOV.L       R11,@-R15
    00000186 6C43                   MOV         R4,R12
    00000188 4F22                   STS.L       PR,@-R15
    0000018A 7FFC                   ADD         #-4,R15
    0000018C 8F24                   BF/S        L645
    0000018E 2F72                   MOV.L       R7,@R15
      Monochrome   224            if(width == 1) ML_pixel(x, y, color);
    00000190 6063                   MOV         R6,R0
    00000192 8801                   CMP/EQ      #1,R0
    00000194 8B09                   BF          L646




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000196 65D3                   MOV         R13,R5
    00000198 66F2                   MOV.L       @R15,R6
    0000019A 64C3                   MOV         R12,R4
    0000019C 7F04                   ADD         #4,R15
    0000019E 4F26                   LDS.L       @R15+,PR
    000001A0 6BF6                   MOV.L       @R15+,R11
    000001A2 6CF6                   MOV.L       @R15+,R12
    000001A4 6DF6                   MOV.L       @R15+,R13
    000001A6 AFA1                   BRA         _ML_pixel
    000001A8 6EF6                   MOV.L       @R15+,R14
    000001AA              L646:                             
      Monochrome   225            else
      Monochrome   226            {
      Monochrome   227                    int padding, pair;
      Monochrome   228                    padding = width>>1;
    000001AA 6E63                   MOV         R6,R14
      Monochrome   229                    pair = !(width&1);
      Monochrome   230                    ML_rectangle(x-padding+pair, y-padding+pair, x+padding, y+padding, 0, 0, color);
    000001AC 63F2                   MOV.L       @R15,R3
    000001AE E200                   MOV         #0,R2
    000001B0 2F36                   MOV.L       R3,@-R15
    000001B2 67D3                   MOV         R13,R7
    000001B4 2F26                   MOV.L       R2,@-R15
    000001B6 65D3                   MOV         R13,R5
    000001B8 2F26                   MOV.L       R2,@-R15
    000001BA 64C3                   MOV         R12,R4
    000001BC 4E21                   SHAR        R14
    000001BE EB01                   MOV         #1,R11
    000001C0 2B69                   AND         R6,R11
    000001C2 2BB8                   TST         R11,R11
    000001C4 0B29                   MOVT        R11
    000001C6 37EC                   ADD         R14,R7
    000001C8 66C3                   MOV         R12,R6
    000001CA 36EC                   ADD         R14,R6
    000001CC 35E8                   SUB         R14,R5
    000001CE 35BC                   ADD         R11,R5
    000001D0 34E8                   SUB         R14,R4
    000001D2 B1C7                   BSR         _ML_rectangle
    000001D4 34BC                   ADD         R11,R4
    000001D6 7F0C                   ADD         #12,R15
      Monochrome   231            }
      Monochrome   232    }
    000001D8              L645:                             
    000001D8 7F04                   ADD         #4,R15
    000001DA 4F26                   LDS.L       @R15+,PR
    000001DC 6BF6                   MOV.L       @R15+,R11
    000001DE 6CF6                   MOV.L       @R15+,R12
    000001E0 6DF6                   MOV.L       @R15+,R13
    000001E2 000B                   RTS
    000001E4 6EF6                   MOV.L       @R15+,R14
      Monochrome   233    #endif
      Monochrome   234    
      Monochrome   235    #ifdef ML_PIXEL_TEST
      Monochrome   236    ML_Color ML_pixel_test(int x, int y)
      Monochrome   237    {
      Monochrome   238            char *vram, byte;
      Monochrome   239            if(x&~127 || y&~63) return ML_TRANSPARENT;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome   240            vram = ML_vram_adress();
      Monochrome   241            byte = 1<<(7-(x&7));
      Monochrome   242            return (vram[(y<<4)+(x>>3)] & byte ? ML_BLACK : ML_WHITE);
      Monochrome   243            
      Monochrome   244    }
      Monochrome   245    #endif
      Monochrome   246    
      Monochrome   247    #ifdef ML_LINE
      Monochrome   248    void ML_line(int x1, int y1, int x2, int y2, ML_Color color)
    000001E6              _ML_line:                        ; function: ML_line
                                                           ; frame size=40
    000001E6 2FE6                   MOV.L       R14,@-R15
    000001E8 2FD6                   MOV.L       R13,@-R15
      Monochrome   249    {
      Monochrome   250            int i, x, y, dx, dy, sx, sy, cumul;
      Monochrome   251            x = x1;
      Monochrome   252            y = y1;
      Monochrome   253            dx = x2 - x1;
    000001EA 6E63                   MOV         R6,R14
    000001EC 2FC6                   MOV.L       R12,@-R15
    000001EE 3E48                   SUB         R4,R14
    000001F0 2FB6                   MOV.L       R11,@-R15
    000001F2 6C53                   MOV         R5,R12
    000001F4 2FA6                   MOV.L       R10,@-R15
    000001F6 6B43                   MOV         R4,R11
    000001F8 2F96                   MOV.L       R9,@-R15
      Monochrome   254            dy = y2 - y1;
    000001FA 6A73                   MOV         R7,R10
    000001FC 2F86                   MOV.L       R8,@-R15
      Monochrome   255            sx = sgn(dx);
    000001FE 4E11                   CMP/PZ      R14
    00000200 4F22                   STS.L       PR,@-R15
    00000202 7FF8                   ADD         #-8,R15
    00000204 59FA                   MOV.L       @(40,R15),R9
    00000206 8D03                   BT/S        L649
    00000208 3A58                   SUB         R5,R10
    0000020A A002                   BRA         L650
    0000020C E8FF                   MOV         #-1,R8
    0000020E              L896:                             
    0000020E 0080                   .DATA.W     H'0080
    00000210              L649:                             
    00000210 E801                   MOV         #1,R8
    00000212              L650:                             
      Monochrome   256            sy = sgn(dy);
    00000212 4A11                   CMP/PZ      R10
    00000214 8901                   BT          L651
    00000216 A001                   BRA         L652
    00000218 E2FF                   MOV         #-1,R2
    0000021A              L651:                             
    0000021A E201                   MOV         #1,R2
    0000021C              L652:                             
    0000021C 1F21                   MOV.L       R2,@(4,R15)
      Monochrome   257            dx = abs(dx);
    0000021E D326                   MOV.L       L897,R3    ; _abs
    00000220 430B                   JSR         @R3
    00000222 64E3                   MOV         R14,R4
      Monochrome   258            dy = abs(dy);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000224 D224                   MOV.L       L897,R2    ; _abs
    00000226 6D03                   MOV         R0,R13
    00000228 420B                   JSR         @R2
    0000022A 64A3                   MOV         R10,R4
    0000022C 6E03                   MOV         R0,R14
      Monochrome   259            ML_pixel(x, y, color);
    0000022E 6693                   MOV         R9,R6
    00000230 65C3                   MOV         R12,R5
    00000232 BF5B                   BSR         _ML_pixel
    00000234 64B3                   MOV         R11,R4
      Monochrome   260            if(dx > dy)
    00000236 3DE7                   CMP/GT      R14,R13
    00000238 8F1B                   BF/S        L653
    0000023A E401                   MOV         #1,R4
      Monochrome   261            {
      Monochrome   262                    cumul = dx / 2;
    0000023C 6AD3                   MOV         R13,R10
    0000023E E300                   MOV         #0,R3
    00000240 33A7                   CMP/GT      R10,R3
    00000242 3A3E                   ADDC        R3,R10
    00000244 4A21                   SHAR        R10
      Monochrome   263                    for(i=1 ; i<dx ; i++)
    00000246 6343                   MOV         R4,R3
    00000248 33D3                   CMP/GE      R13,R3
    0000024A 8D2B                   BT/S        L657
    0000024C 2F42                   MOV.L       R4,@R15
    0000024E              L655:                             
      Monochrome   264                    {
      Monochrome   265                            x += sx;
      Monochrome   266                            cumul += dy;
    0000024E 3AEC                   ADD         R14,R10
      Monochrome   267                            if(cumul > dx)
    00000250 3AD7                   CMP/GT      R13,R10
    00000252 8F03                   BF/S        L656
    00000254 3B8C                   ADD         R8,R11
      Monochrome   268                            {
      Monochrome   269                                    cumul -= dx;
    00000256 3AD8                   SUB         R13,R10
      Monochrome   270                                    y += sy;
    00000258 52F1                   MOV.L       @(4,R15),R2
    0000025A 3C2C                   ADD         R2,R12
    0000025C              L656:                             
      Monochrome   271                            }
      Monochrome   272                            ML_pixel(x, y, color);
    0000025C 6693                   MOV         R9,R6
    0000025E 65C3                   MOV         R12,R5
    00000260 BF44                   BSR         _ML_pixel
    00000262 64B3                   MOV         R11,R4
    00000264 62F2                   MOV.L       @R15,R2
    00000266 7201                   ADD         #1,R2
    00000268 32D3                   CMP/GE      R13,R2
    0000026A 8FF0                   BF/S        L655
    0000026C 2F22                   MOV.L       R2,@R15
    0000026E A019                   BRA         L657
    00000270 0009                   NOP
    00000272              L653:                             
      Monochrome   273                    }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome   274            }
      Monochrome   275            else
      Monochrome   276            {
      Monochrome   277                    cumul = dy / 2;
    00000272 6AE3                   MOV         R14,R10
    00000274 E300                   MOV         #0,R3
    00000276 33A7                   CMP/GT      R10,R3
    00000278 3A3E                   ADDC        R3,R10
    0000027A 4A21                   SHAR        R10
      Monochrome   278                    for(i=1 ; i<dy ; i++)
    0000027C 6343                   MOV         R4,R3
    0000027E 33E3                   CMP/GE      R14,R3
    00000280 8D10                   BT/S        L657
    00000282 2F42                   MOV.L       R4,@R15
    00000284              L659:                             
      Monochrome   279                    {
      Monochrome   280                            y += sy;
    00000284 51F1                   MOV.L       @(4,R15),R1
      Monochrome   281                            cumul += dx;
    00000286 3ADC                   ADD         R13,R10
      Monochrome   282                            if(cumul > dy)
    00000288 3AE7                   CMP/GT      R14,R10
    0000028A 8F02                   BF/S        L660
    0000028C 3C1C                   ADD         R1,R12
      Monochrome   283                            {
      Monochrome   284                                    cumul -= dy;
    0000028E 3AE8                   SUB         R14,R10
      Monochrome   285                                    x += sx;
    00000290 3B8C                   ADD         R8,R11
    00000292              L660:                             
      Monochrome   286                            }
      Monochrome   287                            ML_pixel(x, y, color);
    00000292 6693                   MOV         R9,R6
    00000294 65C3                   MOV         R12,R5
    00000296 BF29                   BSR         _ML_pixel
    00000298 64B3                   MOV         R11,R4
    0000029A 63F2                   MOV.L       @R15,R3
    0000029C 7301                   ADD         #1,R3
    0000029E 33E3                   CMP/GE      R14,R3
    000002A0 8FF0                   BF/S        L659
    000002A2 2F32                   MOV.L       R3,@R15
    000002A4              L657:                             
      Monochrome   288                    }
      Monochrome   289            }
      Monochrome   290    }
    000002A4 7F08                   ADD         #8,R15
    000002A6 4F26                   LDS.L       @R15+,PR
    000002A8 68F6                   MOV.L       @R15+,R8
    000002AA 69F6                   MOV.L       @R15+,R9
    000002AC 6AF6                   MOV.L       @R15+,R10
    000002AE 6BF6                   MOV.L       @R15+,R11
    000002B0 6CF6                   MOV.L       @R15+,R12
    000002B2 6DF6                   MOV.L       @R15+,R13
    000002B4 000B                   RTS
    000002B6 6EF6                   MOV.L       @R15+,R14
    000002B8              L897:                             
    000002B8 <00000000>             .DATA.L     _abs




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome   291    #endif
      Monochrome   292    
      Monochrome   293    #ifdef ML_HORIZONTAL_LINE
      Monochrome   294    void ML_horizontal_line(int y, int x1, int x2, ML_Color color)
    000002BC              _ML_horizontal_line:             ; function: ML_horizontal_line
                                                           ; frame size=44
    000002BC 2FE6                   MOV.L       R14,@-R15
    000002BE 2FD6                   MOV.L       R13,@-R15
    000002C0 2FC6                   MOV.L       R12,@-R15
    000002C2 6C53                   MOV         R5,R12
    000002C4 2FB6                   MOV.L       R11,@-R15
    000002C6 6B63                   MOV         R6,R11
    000002C8 2FA6                   MOV.L       R10,@-R15
    000002CA 2F96                   MOV.L       R9,@-R15
    000002CC 2F86                   MOV.L       R8,@-R15
    000002CE 4F22                   STS.L       PR,@-R15
    000002D0 7FF4                   ADD         #-12,R15
    000002D2 2F42                   MOV.L       R4,@R15
      Monochrome   295    {
      Monochrome   296        int i;
      Monochrome   297        char checker;
      Monochrome   298        char* vram = ML_vram_adress();
    000002D4 BE94                   BSR         _ML_vram_adress
    000002D6 1F72                   MOV.L       R7,@(8,R15)
      Monochrome   299        if(y&~63 || (x1<0 && x2<0) || (x1>127 && x2>127)) return;
    000002D8 62F2                   MOV.L       @R15,R2
    000002DA 6603                   MOV         R0,R6
    000002DC E3C0                   MOV         #-64,R3
    000002DE 2238                   TST         R3,R2
    000002E0 8901                   BT          L898
    000002E2 A134                   BRA         L664
    000002E4 0009                   NOP
    000002E6              L898:                             
    000002E6 4C11                   CMP/PZ      R12
    000002E8 8903                   BT          L663
    000002EA 4B11                   CMP/PZ      R11
    000002EC 8901                   BT          L899
    000002EE A12E                   BRA         L664
    000002F0 0009                   NOP
    000002F2              L899:                             
    000002F2              L663:                             
    000002F2 E37F                   MOV         #127,R3
    000002F4 3C37                   CMP/GT      R3,R12
    000002F6 8B03                   BF          L661
    000002F8 3B37                   CMP/GT      R3,R11
    000002FA 8B01                   BF          L900
    000002FC A127                   BRA         L664
    000002FE 0009                   NOP
    00000300              L900:                             
    00000300              L661:                             
      Monochrome   300        if(x1 > x2)
    00000300 3CB7                   CMP/GT      R11,R12
    00000302 8F03                   BF/S        L665
      Monochrome   301        {
      Monochrome   302            i = x1;
      Monochrome   303            x1 = x2;
      Monochrome   304            x2 = i;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome   305        }
      Monochrome   306        if(x1 < 0) x1 = 0;
    00000304 E800                   MOV         #0,R8
    00000306 64C3                   MOV         R12,R4
    00000308 6CB3                   MOV         R11,R12
    0000030A 6B43                   MOV         R4,R11
    0000030C              L665:                             
    0000030C 4C11                   CMP/PZ      R12
    0000030E 8D01                   BT/S        L666
      Monochrome   307        if(x2 > 127) x2 = 127;
    00000310 E47F                   MOV         #127,R4
    00000312 6C83                   MOV         R8,R12
    00000314              L666:                             
    00000314 3B47                   CMP/GT      R4,R11
    00000316 8F01                   BF/S        L667
    00000318 E707                   MOV         #7,R7
    0000031A 6B43                   MOV         R4,R11
    0000031C              L667:                             
    0000031C 9436                   MOV.W       L901,R4    ; H'00FF
    0000031E 65C3                   MOV         R12,R5
    00000320 6DF2                   MOV.L       @R15,R13
    00000322 69C3                   MOV         R12,R9
    00000324 4521                   SHAR        R5
    00000326 4521                   SHAR        R5
    00000328 4521                   SHAR        R5
    0000032A 6EB3                   MOV         R11,R14
    0000032C 4E21                   SHAR        R14
    0000032E 4E21                   SHAR        R14
    00000330 4E21                   SHAR        R14
    00000332 4D08                   SHLL2       R13
    00000334 4D08                   SHLL2       R13
    00000336 2979                   AND         R7,R9
    00000338 6AB3                   MOV         R11,R10
    0000033A 60C3                   MOV         R12,R0
    0000033C 4011                   CMP/PZ      R0
    0000033E 8F02                   BF/S        L668
    00000340 2A79                   AND         R7,R10
    00000342 A005                   BRA         L669
    00000344 C907                   AND         #7,R0
    00000346              L668:                             
    00000346 6007                   NOT         R0,R0
    00000348 7001                   ADD         #1,R0
    0000034A C907                   AND         #7,R0
    0000034C 6007                   NOT         R0,R0
    0000034E 7001                   ADD         #1,R0
    00000350              L669:                             
    00000350 6303                   MOV         R0,R3
    00000352 60B3                   MOV         R11,R0
    00000354 4011                   CMP/PZ      R0
    00000356 8B01                   BF          L670
    00000358 A005                   BRA         L671
    0000035A C907                   AND         #7,R0
    0000035C              L670:                             
    0000035C 6007                   NOT         R0,R0
    0000035E 7001                   ADD         #1,R0
    00000360 C907                   AND         #7,R0
    00000362 6007                   NOT         R0,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000364 7001                   ADD         #1,R0
    00000366              L671:                             
    00000366 3308                   SUB         R0,R3
    00000368 7307                   ADD         #7,R3
    0000036A 633B                   NEG         R3,R3
    0000036C 6043                   MOV         R4,R0
    0000036E 403C                   SHAD        R3,R0
    00000370 1F01                   MOV.L       R0,@(4,R15)
    00000372 50F2                   MOV.L       @(8,R15),R0
    00000374 8801                   CMP/EQ      #1,R0
    00000376 890A                   BT          L625
    00000378 8800                   CMP/EQ      #0,R0
    0000037A 8932                   BT          L626
    0000037C 8802                   CMP/EQ      #2,R0
    0000037E 8963                   BT          L627
    00000380 8803                   CMP/EQ      #3,R0
    00000382 8B01                   BF          L902
    00000384 A08F                   BRA         L628
    00000386 0009                   NOP
    00000388              L902:                             
    00000388 A0E1                   BRA         L664
    0000038A 0009                   NOP
    0000038C              L901:                             
    0000038C 00FF                   .DATA.W     H'00FF
    0000038E              L625:                            ; case label 
      Monochrome   308        switch(color)
      Monochrome   309        {
      Monochrome   310            case ML_BLACK:
      Monochrome   311                            if(x1>>3 != x2>>3)
    0000038E 35E0                   CMP/EQ      R14,R5
    00000390 891E                   BT          L673
      Monochrome   312                            {
      Monochrome   313                                    vram[(y<<4)+(x1>>3)] |= 255 >> (x1&7);
    00000392 60D3                   MOV         R13,R0
    00000394 305C                   ADD         R5,R0
    00000396 639B                   NEG         R9,R3
    00000398 016C                   MOV.B       @(R0,R6),R1
      Monochrome   314                                    vram[(y<<4)+(x2>>3)] |= 255 << 7-(x2&7);
    0000039A 37A8                   SUB         R10,R7
    0000039C 6243                   MOV         R4,R2
    0000039E 423C                   SHAD        R3,R2
    000003A0 212B                   OR          R2,R1
    000003A2 447C                   SHAD        R7,R4
    000003A4 0614                   MOV.B       R1,@(R0,R6)
      Monochrome   315                                    for(i=(x1>>3)+1 ; i<x2>>3 ; i++)
    000003A6 7501                   ADD         #1,R5
    000003A8 60E3                   MOV         R14,R0
    000003AA 30DC                   ADD         R13,R0
    000003AC 036C                   MOV.B       @(R0,R6),R3
    000003AE 35E3                   CMP/GE      R14,R5
    000003B0 234B                   OR          R4,R3
    000003B2 64D3                   MOV         R13,R4
    000003B4 0634                   MOV.B       R3,@(R0,R6)
    000003B6 345C                   ADD         R5,R4
    000003B8 346C                   ADD         R6,R4
    000003BA 8F02                   BF/S        L903
    000003BC E6FF                   MOV         #-1,R6




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000003BE A0C6                   BRA         L664
    000003C0 0009                   NOP
    000003C2              L903:                             
    000003C2              L675:                             
    000003C2 7501                   ADD         #1,R5
      Monochrome   316                                            vram[(y<<4) + i] = 255;
    000003C4 2460                   MOV.B       R6,@R4
    000003C6 35E3                   CMP/GE      R14,R5
    000003C8 8FFB                   BF/S        L675
    000003CA 7401                   ADD         #1,R4
    000003CC A0BF                   BRA         L664
    000003CE 0009                   NOP
    000003D0              L673:                             
      Monochrome   317                            }
      Monochrome   318                            else vram[(y<<4)+(x1>>3)] |= (255>>(x1%8 + 7-x2%8))<<(7-(x2&7));
    000003D0 53F1                   MOV.L       @(4,R15),R3
    000003D2 60D3                   MOV         R13,R0
    000003D4 305C                   ADD         R5,R0
    000003D6 37A8                   SUB         R10,R7
    000003D8 026C                   MOV.B       @(R0,R6),R2
    000003DA 437C                   SHAD        R7,R3
    000003DC 223B                   OR          R3,R2
      Monochrome   319                            break;
    000003DE A0B6                   BRA         L664
    000003E0 0624                   MOV.B       R2,@(R0,R6)
    000003E2              L626:                            ; case label 
      Monochrome   320                    case ML_WHITE:
      Monochrome   321                            if(x1>>3 != x2>>3)
    000003E2 35E0                   CMP/EQ      R14,R5
    000003E4 8920                   BT          L677
      Monochrome   322                            {
      Monochrome   323                                    vram[(y<<4)+(x1>>3)] &= 255 << 8-(x1&7);
    000003E6 60D3                   MOV         R13,R0
    000003E8 305C                   ADD         R5,R0
    000003EA E308                   MOV         #8,R3
    000003EC 3398                   SUB         R9,R3
    000003EE 6243                   MOV         R4,R2
    000003F0 423C                   SHAD        R3,R2
      Monochrome   324                                    vram[(y<<4)+(x2>>3)] &= 255 >> 1+(x2&7);
      Monochrome   325                                    for(i=(x1>>3)+1 ; i<x2>>3 ; i++)
    000003F2 7501                   ADD         #1,R5
    000003F4 036C                   MOV.B       @(R0,R6),R3
    000003F6 35E3                   CMP/GE      R14,R5
    000003F8 2329                   AND         R2,R3
    000003FA 0634                   MOV.B       R3,@(R0,R6)
    000003FC 60E3                   MOV         R14,R0
    000003FE 30DC                   ADD         R13,R0
    00000400 026C                   MOV.B       @(R0,R6),R2
    00000402 63A3                   MOV         R10,R3
    00000404 7301                   ADD         #1,R3
    00000406 633B                   NEG         R3,R3
    00000408 443C                   SHAD        R3,R4
    0000040A 2249                   AND         R4,R2
    0000040C 0624                   MOV.B       R2,@(R0,R6)
    0000040E 64D3                   MOV         R13,R4
    00000410 345C                   ADD         R5,R4
    00000412 8F02                   BF/S        L904




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   17


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000414 346C                   ADD         R6,R4
    00000416 A09A                   BRA         L664
    00000418 0009                   NOP
    0000041A              L904:                             
    0000041A              L679:                             
    0000041A 7501                   ADD         #1,R5
      Monochrome   326                                            vram[(y<<4) + i] = 0;
    0000041C 2480                   MOV.B       R8,@R4
    0000041E 35E3                   CMP/GE      R14,R5
    00000420 8FFB                   BF/S        L679
    00000422 7401                   ADD         #1,R4
    00000424 A093                   BRA         L664
    00000426 0009                   NOP
    00000428              L677:                             
      Monochrome   327                            }
      Monochrome   328                            else vram[(y<<4)+(x1>>3)] &= (255<<8-(x1&7)) | (255>>1+(x2&7));
    00000428 60D3                   MOV         R13,R0
    0000042A 305C                   ADD         R5,R0
    0000042C E308                   MOV         #8,R3
    0000042E 3398                   SUB         R9,R3
    00000430 6243                   MOV         R4,R2
    00000432 423C                   SHAD        R3,R2
    00000434 63A3                   MOV         R10,R3
    00000436 7301                   ADD         #1,R3
    00000438 633B                   NEG         R3,R3
    0000043A 6143                   MOV         R4,R1
    0000043C 413C                   SHAD        R3,R1
    0000043E 221B                   OR          R1,R2
    00000440 036C                   MOV.B       @(R0,R6),R3
    00000442 2329                   AND         R2,R3
      Monochrome   329                            break;
    00000444 A083                   BRA         L664
    00000446 0634                   MOV.B       R3,@(R0,R6)
    00000448              L627:                            ; case label 
      Monochrome   330                    case ML_XOR:
      Monochrome   331                            if(x1>>3 != x2>>3)
    00000448 35E0                   CMP/EQ      R14,R5
    0000044A 891E                   BT          L681
      Monochrome   332                            {
      Monochrome   333                                    vram[(y<<4)+(x1>>3)] ^= 255 >> (x1&7);
    0000044C 60D3                   MOV         R13,R0
    0000044E 305C                   ADD         R5,R0
    00000450 016C                   MOV.B       @(R0,R6),R1
      Monochrome   334                                    vram[(y<<4)+(x2>>3)] ^= 255 << 7-(x2&7);
    00000452 37A8                   SUB         R10,R7
    00000454 639B                   NEG         R9,R3
    00000456 6243                   MOV         R4,R2
    00000458 423C                   SHAD        R3,R2
    0000045A 212A                   XOR         R2,R1
    0000045C 0614                   MOV.B       R1,@(R0,R6)
    0000045E 6343                   MOV         R4,R3
    00000460 60E3                   MOV         R14,R0
    00000462 30DC                   ADD         R13,R0
    00000464 026C                   MOV.B       @(R0,R6),R2
      Monochrome   335                                    for(i=(x1>>3)+1 ; i<(x2>>3) ; i++)
    00000466 7501                   ADD         #1,R5
    00000468 437C                   SHAD        R7,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   18


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000046A 223A                   XOR         R3,R2
    0000046C 0624                   MOV.B       R2,@(R0,R6)
    0000046E 63D3                   MOV         R13,R3
    00000470 335C                   ADD         R5,R3
    00000472 35E3                   CMP/GE      R14,R5
    00000474 8D6B                   BT/S        L664
    00000476 363C                   ADD         R3,R6
    00000478              L683:                             
      Monochrome   336                                            vram[(y<<4) + i] ^= 255;
    00000478 6360                   MOV.B       @R6,R3
    0000047A 7501                   ADD         #1,R5
    0000047C 234A                   XOR         R4,R3
    0000047E 35E3                   CMP/GE      R14,R5
    00000480 2630                   MOV.B       R3,@R6
    00000482 8FF9                   BF/S        L683
    00000484 7601                   ADD         #1,R6
    00000486 A062                   BRA         L664
    00000488 0009                   NOP
    0000048A              L681:                             
      Monochrome   337                            }
      Monochrome   338                            else vram[(y<<4)+(x1>>3)] ^= (255>>((x1&7) + 7-(x2&7)))<<(7-(x2&7));
    0000048A 60D3                   MOV         R13,R0
    0000048C 305C                   ADD         R5,R0
    0000048E 6393                   MOV         R9,R3
    00000490 33A8                   SUB         R10,R3
    00000492 7307                   ADD         #7,R3
    00000494 633B                   NEG         R3,R3
    00000496 443C                   SHAD        R3,R4
    00000498 036C                   MOV.B       @(R0,R6),R3
    0000049A E207                   MOV         #7,R2
    0000049C 32A8                   SUB         R10,R2
    0000049E 442C                   SHAD        R2,R4
    000004A0 234A                   XOR         R4,R3
      Monochrome   339                            break;
    000004A2 A054                   BRA         L664
    000004A4 0634                   MOV.B       R3,@(R0,R6)
    000004A6              L628:                            ; case label 
      Monochrome   340                    case ML_CHECKER:
      Monochrome   341                            checker = (y&1 ? 85 : 170);
    000004A6 60F2                   MOV.L       @R15,R0
    000004A8 C801                   TST         #1,R0
    000004AA 8901                   BT          L685
    000004AC A001                   BRA         L686
    000004AE EC55                   MOV         #85,R12
    000004B0              L685:                             
    000004B0 9C57                   MOV.W       L905,R12   ; H'00AA
    000004B2              L686:                             
      Monochrome   342                            if(x1>>3 != x2>>3)
    000004B2 35E0                   CMP/EQ      R14,R5
    000004B4 8932                   BT          L687
      Monochrome   343                            {
      Monochrome   344                                    vram[(y<<4)+(x1>>3)] &= 255 << 8-(x1&7);
    000004B6 63D3                   MOV         R13,R3
    000004B8 335C                   ADD         R5,R3
    000004BA 336C                   ADD         R6,R3
    000004BC 1F31                   MOV.L       R3,@(4,R15)
    000004BE 629B                   NEG         R9,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   19


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000004C0 7208                   ADD         #8,R2
    000004C2 6143                   MOV         R4,R1
    000004C4 412C                   SHAD        R2,R1
    000004C6 6230                   MOV.B       @R3,R2
    000004C8 2219                   AND         R1,R2
      Monochrome   345                                    vram[(y<<4)+(x2>>3)] &= 255 >> 1+(x2&7);
    000004CA 6143                   MOV         R4,R1
    000004CC 2320                   MOV.B       R2,@R3
    000004CE 63E3                   MOV         R14,R3
    000004D0 33DC                   ADD         R13,R3
    000004D2 336C                   ADD         R6,R3
    000004D4 2F32                   MOV.L       R3,@R15
    000004D6 62A3                   MOV         R10,R2
    000004D8 6030                   MOV.B       @R3,R0
    000004DA 7201                   ADD         #1,R2
    000004DC 622B                   NEG         R2,R2
    000004DE 412C                   SHAD        R2,R1
    000004E0 2019                   AND         R1,R0
      Monochrome   346                                    vram[(y<<4)+(x1>>3)] |= checker & 255>>(x1&7);
    000004E2 629B                   NEG         R9,R2
    000004E4 2300                   MOV.B       R0,@R3
    000004E6 6143                   MOV         R4,R1
    000004E8 53F1                   MOV.L       @(4,R15),R3
    000004EA 412C                   SHAD        R2,R1
    000004EC 6230                   MOV.B       @R3,R2
    000004EE 21C9                   AND         R12,R1
    000004F0 221B                   OR          R1,R2
    000004F2 2320                   MOV.B       R2,@R3
      Monochrome   347                                    vram[(y<<4)+(x2>>3)] |= checker & 255<<7-(x2&7);
    000004F4 63F2                   MOV.L       @R15,R3
    000004F6 37A8                   SUB         R10,R7
    000004F8 6230                   MOV.B       @R3,R2
      Monochrome   348                                    for(i=(x1>>3)+1 ; i<x2>>3 ; i++)
    000004FA 7501                   ADD         #1,R5
    000004FC 447C                   SHAD        R7,R4
    000004FE 24C9                   AND         R12,R4
    00000500 224B                   OR          R4,R2
    00000502 64D3                   MOV         R13,R4
    00000504 2320                   MOV.B       R2,@R3
    00000506 35E3                   CMP/GE      R14,R5
    00000508 345C                   ADD         R5,R4
    0000050A 8D20                   BT/S        L664
    0000050C 346C                   ADD         R6,R4
    0000050E              L689:                             
    0000050E 7501                   ADD         #1,R5
      Monochrome   349                                            vram[(y<<4) + i] = checker;
    00000510 24C0                   MOV.B       R12,@R4
    00000512 35E3                   CMP/GE      R14,R5
    00000514 8FFB                   BF/S        L689
    00000516 7401                   ADD         #1,R4
    00000518 A019                   BRA         L664
    0000051A 0009                   NOP
    0000051C              L687:                             
      Monochrome   350                            }
      Monochrome   351                            else
      Monochrome   352                            {
      Monochrome   353                                    vram[(y<<4)+(x1>>3)] &= (255<<8-(x1&7)) | (255>>1+(x2&7));




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   20


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000051C 63D3                   MOV         R13,R3
    0000051E 335C                   ADD         R5,R3
    00000520 336C                   ADD         R6,R3
    00000522 E208                   MOV         #8,R2
    00000524 2F32                   MOV.L       R3,@R15
    00000526 6143                   MOV         R4,R1
    00000528 3298                   SUB         R9,R2
    0000052A 412C                   SHAD        R2,R1
    0000052C 62A3                   MOV         R10,R2
    0000052E 7201                   ADD         #1,R2
    00000530 622B                   NEG         R2,R2
    00000532 6043                   MOV         R4,R0
    00000534 402C                   SHAD        R2,R0
    00000536 210B                   OR          R0,R1
    00000538 6230                   MOV.B       @R3,R2
      Monochrome   354                                    vram[(y<<4)+(x1>>3)] |= checker & (255>>(x1%8 + 7-x2%8))<<(7-(x2&7));
    0000053A 37A8                   SUB         R10,R7
    0000053C 2219                   AND         R1,R2
    0000053E 2320                   MOV.B       R2,@R3
    00000540 63F2                   MOV.L       @R15,R3
    00000542 52F1                   MOV.L       @(4,R15),R2
    00000544 6130                   MOV.B       @R3,R1
    00000546 427C                   SHAD        R7,R2
    00000548 22C9                   AND         R12,R2
    0000054A 212B                   OR          R2,R1
    0000054C 2310                   MOV.B       R1,@R3
      Monochrome   355                            }
      Monochrome   356                            break;
      Monochrome   357        }
      Monochrome   358    }
    0000054E              L664:                             
    0000054E 7F0C                   ADD         #12,R15
    00000550 4F26                   LDS.L       @R15+,PR
    00000552 68F6                   MOV.L       @R15+,R8
    00000554 69F6                   MOV.L       @R15+,R9
    00000556 6AF6                   MOV.L       @R15+,R10
    00000558 6BF6                   MOV.L       @R15+,R11
    0000055A 6CF6                   MOV.L       @R15+,R12
    0000055C 6DF6                   MOV.L       @R15+,R13
    0000055E 000B                   RTS
    00000560 6EF6                   MOV.L       @R15+,R14
    00000562              L905:                             
    00000562 00AA                   .DATA.W     H'00AA
      Monochrome   359    
      Monochrome   360    #endif
      Monochrome   361    
      Monochrome   362    #ifdef ML_VERTICAL_LINE
      Monochrome   363    void ML_vertical_line(int x, int y1, int y2, ML_Color color)
      Monochrome   364    {
      Monochrome   365        int i, j;
      Monochrome   366        char checker, byte, *vram = ML_vram_adress();
      Monochrome   367            if(x&~127 || (y1<0 && y2<0) || (y1>63 && y2>63)) return;
      Monochrome   368            if(y1 > y2)
      Monochrome   369            {
      Monochrome   370                    int tmp = y1;
      Monochrome   371                    y1 = y2;
      Monochrome   372                    y2 = tmp;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   21


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome   373            }
      Monochrome   374            if(y1 < 0) y1 = 0;
      Monochrome   375            if(y2 > 63) y2 = 63;
      Monochrome   376    
      Monochrome   377            i = (y1<<4)+(x>>3);
      Monochrome   378            j = (y2<<4)+(x>>3);
      Monochrome   379            switch(color)
      Monochrome   380            {
      Monochrome   381                    case ML_BLACK:
      Monochrome   382                            byte = 128>>(x&7);
      Monochrome   383                            for( ; i<=j ; i+=16)
      Monochrome   384                                    vram[i] |= byte;
      Monochrome   385                            break;
      Monochrome   386                    case ML_WHITE:
      Monochrome   387                            byte = ~(128>>(x&7));
      Monochrome   388                            for( ; i<=j ; i+=16)
      Monochrome   389                                    vram[i] &= byte;
      Monochrome   390                            break;
      Monochrome   391                    case ML_XOR:
      Monochrome   392                            byte = 128>>(x&7);
      Monochrome   393                            for( ; i<=j ; i+=16)
      Monochrome   394                                    vram[i] ^= byte;
      Monochrome   395                            break;
      Monochrome   396                    case ML_CHECKER:
      Monochrome   397                            byte = 128>>(x&7);
      Monochrome   398                            checker = y1&1^x&1;
      Monochrome   399                            for( ; i<=j ; i+=16)
      Monochrome   400                            {
      Monochrome   401                                    if(checker) vram[i] &= ~byte;
      Monochrome   402                                    else vram[i] |= byte;
      Monochrome   403                                    checker = !checker;
      Monochrome   404                            }
      Monochrome   405                            break;
      Monochrome   406            }
      Monochrome   407    }
      Monochrome   408    #endif
      Monochrome   409    
      Monochrome   410    #ifdef ML_RECTANGLE
      Monochrome   411    void ML_rectangle(int x1, int y1, int x2, int y2, int border_width, ML_Color border_color, ML_Color fill_c
                         +olor)
    00000564              _ML_rectangle:                   ; function: ML_rectangle
                                                           ; frame size=48
    00000564 2FE6                   MOV.L       R14,@-R15
    00000566 2FD6                   MOV.L       R13,@-R15
    00000568 2FC6                   MOV.L       R12,@-R15
    0000056A 6D43                   MOV         R4,R13
    0000056C 2FB6                   MOV.L       R11,@-R15
    0000056E 6C63                   MOV         R6,R12
    00000570 2FA6                   MOV.L       R10,@-R15
      Monochrome   412    {
      Monochrome   413            int i;
      Monochrome   414            if(x1 > x2)
    00000572 3DC7                   CMP/GT      R12,R13
    00000574 2F96                   MOV.L       R9,@-R15
    00000576 2F86                   MOV.L       R8,@-R15
    00000578 4F22                   STS.L       PR,@-R15
    0000057A 7FF0                   ADD         #-16,R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   22


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000057C 5EFC                   MOV.L       @(48,R15),R14
    0000057E 8F03                   BF/S        L691
    00000580 5BFD                   MOV.L       @(52,R15),R11
      Monochrome   415            {
      Monochrome   416                    i = x1;
    00000582 64D3                   MOV         R13,R4
      Monochrome   417                    x1 = x2;
    00000584 6DC3                   MOV         R12,R13
      Monochrome   418                    x2 = i;
    00000586 6C43                   MOV         R4,R12
    00000588              L691:                             
      Monochrome   419            }
      Monochrome   420            if(y1 > y2)
    00000588 3577                   CMP/GT      R7,R5
    0000058A 8B02                   BF          L692
      Monochrome   421            {
      Monochrome   422                    i = y1;
    0000058C 6453                   MOV         R5,R4
      Monochrome   423                    y1 = y2;
    0000058E 6573                   MOV         R7,R5
      Monochrome   424                    y2 = i;
    00000590 6743                   MOV         R4,R7
    00000592              L692:                             
    00000592 64C3                   MOV         R12,R4
    00000594 34D8                   SUB         R13,R4
    00000596 E300                   MOV         #0,R3
    00000598 3347                   CMP/GT      R4,R3
    0000059A 343E                   ADDC        R3,R4
    0000059C 4421                   SHAR        R4
    0000059E 7401                   ADD         #1,R4
    000005A0 3E47                   CMP/GT      R4,R14
    000005A2 8B00                   BF          L693
      Monochrome   425            }
      Monochrome   426            if(border_width > (x2-x1)/2+1) border_width = (x2-x1)/2+1;
    000005A4 6E43                   MOV         R4,R14
    000005A6              L693:                             
    000005A6 6473                   MOV         R7,R4
    000005A8 3458                   SUB         R5,R4
    000005AA E300                   MOV         #0,R3
    000005AC 3347                   CMP/GT      R4,R3
    000005AE 343E                   ADDC        R3,R4
    000005B0 4421                   SHAR        R4
    000005B2 7401                   ADD         #1,R4
    000005B4 3E47                   CMP/GT      R4,R14
    000005B6 8F01                   BF/S        L694
    000005B8 6353                   MOV         R5,R3
      Monochrome   427            if(border_width > (y2-y1)/2+1) border_width = (y2-y1)/2+1;
    000005BA 6E43                   MOV         R4,R14
    000005BC              L694:                             
    000005BC 33EC                   ADD         R14,R3
    000005BE 6873                   MOV         R7,R8
    000005C0 1F33                   MOV.L       R3,@(12,R15)
    000005C2 62D3                   MOV         R13,R2
    000005C4 32EC                   ADD         R14,R2
    000005C6 61C3                   MOV         R12,R1
    000005C8 1F22                   MOV.L       R2,@(8,R15)
    000005CA 60B3                   MOV         R11,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   23


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000005CC 31E8                   SUB         R14,R1
    000005CE 88FF                   CMP/EQ      #-1,R0
    000005D0 2F12                   MOV.L       R1,@R15
    000005D2 8D2D                   BT/S        L695
    000005D4 38E8                   SUB         R14,R8
    000005D6 4E15                   CMP/PL      R14
    000005D8 8B2A                   BF          L695
      Monochrome   428            if(border_color != ML_TRANSPARENT && border_width > 0)
      Monochrome   429            {
      Monochrome   430                    for(i=0 ; i<border_width ; i++)
    000005DA E300                   MOV         #0,R3
    000005DC 1F31                   MOV.L       R3,@(4,R15)
    000005DE 6973                   MOV         R7,R9
    000005E0 4E15                   CMP/PL      R14
    000005E2 8F11                   BF/S        L696
    000005E4 6A53                   MOV         R5,R10
    000005E6              L697:                             
      Monochrome   431                    {
      Monochrome   432                            ML_horizontal_line(y1+i, x1, x2, border_color);
    000005E6 67B3                   MOV         R11,R7
    000005E8 66C3                   MOV         R12,R6
    000005EA 65D3                   MOV         R13,R5
    000005EC BE66                   BSR         _ML_horizontal_line
    000005EE 64A3                   MOV         R10,R4
      Monochrome   433                            ML_horizontal_line(y2-i, x1, x2, border_color);
    000005F0 67B3                   MOV         R11,R7
    000005F2 66C3                   MOV         R12,R6
    000005F4 65D3                   MOV         R13,R5
    000005F6 BE61                   BSR         _ML_horizontal_line
    000005F8 6493                   MOV         R9,R4
    000005FA 79FF                   ADD         #-1,R9
    000005FC 52F1                   MOV.L       @(4,R15),R2
    000005FE 7201                   ADD         #1,R2
    00000600 1F21                   MOV.L       R2,@(4,R15)
    00000602 32E3                   CMP/GE      R14,R2
    00000604 8FEF                   BF/S        L697
    00000606 7A01                   ADD         #1,R10
    00000608              L696:                             
      Monochrome   434                    }
      Monochrome   435                    for(i=y1+border_width ; i<=y2-border_width ; i++)
    00000608 5EF3                   MOV.L       @(12,R15),R14
    0000060A 5AF2                   MOV.L       @(8,R15),R10
    0000060C 69F2                   MOV.L       @R15,R9
    0000060E 3E87                   CMP/GT      R8,R14
    00000610 7AFF                   ADD         #-1,R10
    00000612 8D0D                   BT/S        L695
    00000614 7901                   ADD         #1,R9
    00000616              L699:                             
      Monochrome   436                    {
      Monochrome   437                            ML_horizontal_line(i, x1, x1+border_width-1, border_color);
    00000616 67B3                   MOV         R11,R7
    00000618 66A3                   MOV         R10,R6
    0000061A 65D3                   MOV         R13,R5
    0000061C BE4E                   BSR         _ML_horizontal_line
    0000061E 64E3                   MOV         R14,R4
      Monochrome   438                            ML_horizontal_line(i, x2-border_width+1, x2, border_color);
    00000620 67B3                   MOV         R11,R7




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   24


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000622 66C3                   MOV         R12,R6
    00000624 6593                   MOV         R9,R5
    00000626 BE49                   BSR         _ML_horizontal_line
    00000628 64E3                   MOV         R14,R4
    0000062A 7E01                   ADD         #1,R14
    0000062C 3E87                   CMP/GT      R8,R14
    0000062E 8BF2                   BF          L699
    00000630              L695:                             
      Monochrome   439                    }
      Monochrome   440            }
      Monochrome   441            if(fill_color != ML_TRANSPARENT)
    00000630 50FE                   MOV.L       @(56,R15),R0
    00000632 88FF                   CMP/EQ      #-1,R0
    00000634 890A                   BT          L700
      Monochrome   442            {
      Monochrome   443                    for(i=y1+border_width ; i<=y2-border_width ; i++)
    00000636 5EF3                   MOV.L       @(12,R15),R14
    00000638 3E87                   CMP/GT      R8,R14
    0000063A 8907                   BT          L700
    0000063C              L702:                             
      Monochrome   444                            ML_horizontal_line(i, x1+border_width, x2-border_width, fill_color);
    0000063C 57FE                   MOV.L       @(56,R15),R7
    0000063E 66F2                   MOV.L       @R15,R6
    00000640 55F2                   MOV.L       @(8,R15),R5
    00000642 BE3B                   BSR         _ML_horizontal_line
    00000644 64E3                   MOV         R14,R4
    00000646 7E01                   ADD         #1,R14
    00000648 3E87                   CMP/GT      R8,R14
    0000064A 8BF7                   BF          L702
    0000064C              L700:                             
      Monochrome   445            }
      Monochrome   446    }
    0000064C 7F10                   ADD         #16,R15
    0000064E 4F26                   LDS.L       @R15+,PR
    00000650 68F6                   MOV.L       @R15+,R8
    00000652 69F6                   MOV.L       @R15+,R9
    00000654 6AF6                   MOV.L       @R15+,R10
    00000656 6BF6                   MOV.L       @R15+,R11
    00000658 6CF6                   MOV.L       @R15+,R12
    0000065A 6DF6                   MOV.L       @R15+,R13
    0000065C 000B                   RTS
    0000065E 6EF6                   MOV.L       @R15+,R14
      Monochrome   447    #endif
      Monochrome   448    
      Monochrome   449    #ifdef ML_POLYGON
      Monochrome   450    void ML_polygon(const int *x, const int *y, int nb_vertices, ML_Color color)
      Monochrome   451    {
      Monochrome   452            int i;
      Monochrome   453            if(nb_vertices < 1) return;
      Monochrome   454            for(i=0 ; i<nb_vertices-1 ; i++)
      Monochrome   455                    ML_line(x[i], y[i], x[i+1], y[i+1], color);
      Monochrome   456            ML_line(x[i], y[i], x[0], y[0], color);
      Monochrome   457    }
      Monochrome   458    #endif
      Monochrome   459    
      Monochrome   460    #ifdef ML_FILLED_POLYGON
      Monochrome   461    static int ML_filled_polygon_quicksord_partition(int *t, int p, int r)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   25


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome   462    {
      Monochrome   463            int i, j, x, tmp;
      Monochrome   464            j = p - 1;
      Monochrome   465            x = t[r];
      Monochrome   466            for(i=p ; i<r ; i++)
      Monochrome   467            {
      Monochrome   468                    if(x > t[i])
      Monochrome   469                    {
      Monochrome   470                            j++;
      Monochrome   471                            tmp = t[j];
      Monochrome   472                            t[j] = t[i];
      Monochrome   473                            t[i] = tmp;
      Monochrome   474                    }
      Monochrome   475            }
      Monochrome   476            t[r] = t[j+1];
      Monochrome   477            t[j+1] = x;
      Monochrome   478            return j + 1;
      Monochrome   479    }
      Monochrome   480    
      Monochrome   481    static void ML_filled_polygon_quicksord(int* t, int p, int r)
      Monochrome   482    {
      Monochrome   483            int q;
      Monochrome   484            if(p < r)
      Monochrome   485            {
      Monochrome   486                    q = ML_filled_polygon_quicksord_partition(t, p, r);
      Monochrome   487                    ML_filled_polygon_quicksord(t, p, q-1);
      Monochrome   488                    ML_filled_polygon_quicksord(t, q+1, r);
      Monochrome   489            }
      Monochrome   490    }
      Monochrome   491    
      Monochrome   492    
      Monochrome   493    void ML_filled_polygon(const int *x, const int *y, int nb_vertices, ML_Color color)
      Monochrome   494    {
      Monochrome   495            int i, j, dx, dy, ymin, ymax;
      Monochrome   496            int *cut_in_line, nb_cut;
      Monochrome   497            if(nb_vertices < 3) return;
      Monochrome   498            cut_in_line = malloc(nb_vertices*sizeof(int));
      Monochrome   499            if(!cut_in_line) return;
      Monochrome   500            ymin = ymax = y[0];
      Monochrome   501            for(i=1 ; i<nb_vertices ; i++)
      Monochrome   502            {
      Monochrome   503                    if(y[i] < ymin) ymin = y[i];
      Monochrome   504                    if(y[i] > ymax) ymax = y[i];
      Monochrome   505            }
      Monochrome   506            for(i=ymin ; i<=ymax ; i++)
      Monochrome   507            {
      Monochrome   508                    nb_cut = 0;
      Monochrome   509                    for(j=0 ; j<nb_vertices ; j++)
      Monochrome   510                    {
      Monochrome   511                            if((y[j]<=i && y[(j+1)%nb_vertices]>=i) || (y[j]>=i && y[(j+1)%nb_vertices]<=i))
      Monochrome   512                            {
      Monochrome   513                                    dy = abs(y[j]-y[(j+1)%nb_vertices]);
      Monochrome   514                                    if(dy)
      Monochrome   515                                    {
      Monochrome   516                                            dx = x[(j+1)%nb_vertices]-x[j];
      Monochrome   517                                            cut_in_line[nb_cut] = x[j] + rnd(abs(i-y[j]+sgn(i-y[j])/2)*dx/dy);
      Monochrome   518                                            nb_cut++;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   26


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome   519                                    }
      Monochrome   520                            }
      Monochrome   521                    }
      Monochrome   522                    ML_filled_polygon_quicksord(cut_in_line, 0, nb_cut-1);
      Monochrome   523                    j = 0;
      Monochrome   524                    while(j<nb_cut-2 && cut_in_line[j]==cut_in_line[j+1]) j++;
      Monochrome   525                    while(j < nb_cut)
      Monochrome   526                    {
      Monochrome   527                            if(j == nb_cut-1) ML_horizontal_line(i, cut_in_line[j-1]+1, cut_in_line[j], color)
                         +;
      Monochrome   528                            else
      Monochrome   529                            {
      Monochrome   530                                    dx = 1;
      Monochrome   531                                    while(j+dx<nb_cut-1 && cut_in_line[j+dx]==cut_in_line[j+dx+1]) dx++;
      Monochrome   532                                    ML_horizontal_line(i, cut_in_line[j], cut_in_line[j+dx], color);
      Monochrome   533                                    j += dx;
      Monochrome   534                            }
      Monochrome   535                            j++;
      Monochrome   536                    }
      Monochrome   537            }
      Monochrome   538            free(cut_in_line);
      Monochrome   539    }
      Monochrome   540    #endif
      Monochrome   541    
      Monochrome   542    #ifdef ML_CIRCLE
      Monochrome   543    void ML_circle(int x, int y, int radius, ML_Color color)
    00000660              _ML_circle:                      ; function: ML_circle
                                                           ; frame size=40
    00000660 2FE6                   MOV.L       R14,@-R15
    00000662 2FD6                   MOV.L       R13,@-R15
    00000664 2FC6                   MOV.L       R12,@-R15
    00000666 2FB6                   MOV.L       R11,@-R15
    00000668 2FA6                   MOV.L       R10,@-R15
    0000066A 6B53                   MOV         R5,R11
    0000066C 2F96                   MOV.L       R9,@-R15
    0000066E 6A43                   MOV         R4,R10
    00000670 2F86                   MOV.L       R8,@-R15
    00000672 6863                   MOV         R6,R8
    00000674 4F22                   STS.L       PR,@-R15
      Monochrome   544    {
      Monochrome   545            int plot_x, plot_y, d;
      Monochrome   546    
      Monochrome   547            if(radius < 0) return;
    00000676 4811                   CMP/PZ      R8
    00000678 7FF8                   ADD         #-8,R15
    0000067A 8F60                   BF/S        L704
    0000067C 6C73                   MOV         R7,R12
      Monochrome   548            plot_x = 0;
    0000067E ED00                   MOV         #0,R13
      Monochrome   549            plot_y = radius;
    00000680 6E83                   MOV         R8,R14
      Monochrome   550            d = 1 - radius;
    00000682 E901                   MOV         #1,R9
    00000684 3988                   SUB         R8,R9
      Monochrome   551    
      Monochrome   552            ML_pixel(x, y+plot_y, color);
    00000686 66C3                   MOV         R12,R6




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   27


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000688 65B3                   MOV         R11,R5
    0000068A 35EC                   ADD         R14,R5
    0000068C BD2E                   BSR         _ML_pixel
    0000068E 64A3                   MOV         R10,R4
      Monochrome   553            if(radius)
    00000690 2888                   TST         R8,R8
    00000692 890E                   BT          L705
      Monochrome   554            {
      Monochrome   555                    ML_pixel(x, y-plot_y, color);
    00000694 66C3                   MOV         R12,R6
    00000696 65B3                   MOV         R11,R5
    00000698 35E8                   SUB         R14,R5
    0000069A BD27                   BSR         _ML_pixel
    0000069C 64A3                   MOV         R10,R4
      Monochrome   556                    ML_pixel(x+plot_y, y, color);
    0000069E 66C3                   MOV         R12,R6
    000006A0 65B3                   MOV         R11,R5
    000006A2 64A3                   MOV         R10,R4
    000006A4 BD22                   BSR         _ML_pixel
    000006A6 34EC                   ADD         R14,R4
      Monochrome   557                    ML_pixel(x-plot_y, y, color);
    000006A8 66C3                   MOV         R12,R6
    000006AA 65B3                   MOV         R11,R5
    000006AC 64A3                   MOV         R10,R4
    000006AE BD1D                   BSR         _ML_pixel
    000006B0 34E8                   SUB         R14,R4
    000006B2              L705:                             
      Monochrome   558            }
      Monochrome   559            while(plot_y > plot_x)
    000006B2 4E15                   CMP/PL      R14
    000006B4 8B43                   BF          L704
    000006B6              L707:                             
      Monochrome   560            {
      Monochrome   561                    if(d < 0)
    000006B6 4911                   CMP/PZ      R9
    000006B8 8904                   BT          L708
      Monochrome   562                            d += 2*plot_x+3;
    000006BA 63D3                   MOV         R13,R3
    000006BC 4300                   SHLL        R3
    000006BE 7303                   ADD         #3,R3
    000006C0 A006                   BRA         L709
    000006C2 393C                   ADD         R3,R9
    000006C4              L708:                             
      Monochrome   563                    else
      Monochrome   564                    {
      Monochrome   565                            d += 2*(plot_x-plot_y)+5;
    000006C4 63D3                   MOV         R13,R3
    000006C6 33E8                   SUB         R14,R3
    000006C8 4300                   SHLL        R3
    000006CA 7305                   ADD         #5,R3
    000006CC 393C                   ADD         R3,R9
      Monochrome   566                            plot_y--;
    000006CE 7EFF                   ADD         #-1,R14
    000006D0              L709:                             
      Monochrome   567                    }
      Monochrome   568                    plot_x++;
    000006D0 7D01                   ADD         #1,R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   28


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome   569                    if(plot_y >= plot_x)
    000006D2 3ED3                   CMP/GE      R13,R14
    000006D4 8B17                   BF          L710
      Monochrome   570                    {
      Monochrome   571                            ML_pixel(x+plot_x, y+plot_y, color);
    000006D6 66C3                   MOV         R12,R6
    000006D8 65B3                   MOV         R11,R5
    000006DA 35EC                   ADD         R14,R5
    000006DC 2F52                   MOV.L       R5,@R15
    000006DE 64A3                   MOV         R10,R4
    000006E0 34DC                   ADD         R13,R4
    000006E2 BD03                   BSR         _ML_pixel
    000006E4 1F41                   MOV.L       R4,@(4,R15)
      Monochrome   572                            ML_pixel(x-plot_x, y+plot_y, color);
    000006E6 66C3                   MOV         R12,R6
    000006E8 65F2                   MOV.L       @R15,R5
    000006EA 68A3                   MOV         R10,R8
    000006EC 38D8                   SUB         R13,R8
    000006EE BCFD                   BSR         _ML_pixel
    000006F0 6483                   MOV         R8,R4
      Monochrome   573                            ML_pixel(x+plot_x, y-plot_y, color);
    000006F2 66C3                   MOV         R12,R6
    000006F4 65B3                   MOV         R11,R5
    000006F6 35E8                   SUB         R14,R5
    000006F8 2F52                   MOV.L       R5,@R15
    000006FA BCF7                   BSR         _ML_pixel
    000006FC 54F1                   MOV.L       @(4,R15),R4
      Monochrome   574                            ML_pixel(x-plot_x, y-plot_y, color);
    000006FE 66C3                   MOV         R12,R6
    00000700 65F2                   MOV.L       @R15,R5
    00000702 BCF3                   BSR         _ML_pixel
    00000704 6483                   MOV         R8,R4
    00000706              L710:                             
      Monochrome   575                    }
      Monochrome   576                    if(plot_y > plot_x)
    00000706 3ED7                   CMP/GT      R13,R14
    00000708 8B17                   BF          L711
      Monochrome   577                    {
      Monochrome   578                            ML_pixel(x+plot_y, y+plot_x, color);
    0000070A 66C3                   MOV         R12,R6
    0000070C 65B3                   MOV         R11,R5
    0000070E 35DC                   ADD         R13,R5
    00000710 2F52                   MOV.L       R5,@R15
    00000712 64A3                   MOV         R10,R4
    00000714 34EC                   ADD         R14,R4
    00000716 BCE9                   BSR         _ML_pixel
    00000718 1F41                   MOV.L       R4,@(4,R15)
      Monochrome   579                            ML_pixel(x-plot_y, y+plot_x, color);
    0000071A 66C3                   MOV         R12,R6
    0000071C 65F2                   MOV.L       @R15,R5
    0000071E 68A3                   MOV         R10,R8
    00000720 38E8                   SUB         R14,R8
    00000722 BCE3                   BSR         _ML_pixel
    00000724 6483                   MOV         R8,R4
      Monochrome   580                            ML_pixel(x+plot_y, y-plot_x, color);
    00000726 66C3                   MOV         R12,R6
    00000728 65B3                   MOV         R11,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   29


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000072A 35D8                   SUB         R13,R5
    0000072C 2F52                   MOV.L       R5,@R15
    0000072E BCDD                   BSR         _ML_pixel
    00000730 54F1                   MOV.L       @(4,R15),R4
      Monochrome   581                            ML_pixel(x-plot_y, y-plot_x, color);
    00000732 66C3                   MOV         R12,R6
    00000734 65F2                   MOV.L       @R15,R5
    00000736 BCD9                   BSR         _ML_pixel
    00000738 6483                   MOV         R8,R4
    0000073A              L711:                             
    0000073A 3ED7                   CMP/GT      R13,R14
    0000073C 89BB                   BT          L707
    0000073E              L704:                             
      Monochrome   582                    }
      Monochrome   583            }
      Monochrome   584    }
    0000073E 7F08                   ADD         #8,R15
    00000740 4F26                   LDS.L       @R15+,PR
    00000742 68F6                   MOV.L       @R15+,R8
    00000744 69F6                   MOV.L       @R15+,R9
    00000746 6AF6                   MOV.L       @R15+,R10
    00000748 6BF6                   MOV.L       @R15+,R11
    0000074A 6CF6                   MOV.L       @R15+,R12
    0000074C 6DF6                   MOV.L       @R15+,R13
    0000074E 000B                   RTS
    00000750 6EF6                   MOV.L       @R15+,R14
      Monochrome   585    #endif
      Monochrome   586    
      Monochrome   587    #ifdef ML_FILLED_CIRCLE
      Monochrome   588    void ML_filled_circle(int x, int y, int radius, ML_Color color)
    00000752              _ML_filled_circle:               ; function: ML_filled_circle
                                                           ; frame size=36
      Monochrome   589    {
      Monochrome   590            int plot_x, plot_y, d;
      Monochrome   591    
      Monochrome   592            if(radius < 0) return;
    00000752 4611                   CMP/PZ      R6
    00000754 2FE6                   MOV.L       R14,@-R15
    00000756 2FD6                   MOV.L       R13,@-R15
    00000758 2FC6                   MOV.L       R12,@-R15
    0000075A 6C43                   MOV         R4,R12
    0000075C 2FB6                   MOV.L       R11,@-R15
    0000075E 2FA6                   MOV.L       R10,@-R15
    00000760 2F96                   MOV.L       R9,@-R15
    00000762 6A53                   MOV         R5,R10
    00000764 2F86                   MOV.L       R8,@-R15
    00000766 4F22                   STS.L       PR,@-R15
    00000768 7FFC                   ADD         #-4,R15
    0000076A 8F41                   BF/S        L713
    0000076C 6B73                   MOV         R7,R11
      Monochrome   593            plot_x = 0;
    0000076E ED00                   MOV         #0,R13
      Monochrome   594            plot_y = radius;
    00000770 6E63                   MOV         R6,R14
      Monochrome   595            d = 1 - radius;
    00000772 E901                   MOV         #1,R9
    00000774 3968                   SUB         R6,R9




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   30


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome   596    
      Monochrome   597            ML_horizontal_line(y, x-plot_y, x+plot_y, color);
    00000776 67B3                   MOV         R11,R7
    00000778 66C3                   MOV         R12,R6
    0000077A 36EC                   ADD         R14,R6
    0000077C 65C3                   MOV         R12,R5
    0000077E 35E8                   SUB         R14,R5
    00000780 BD9C                   BSR         _ML_horizontal_line
    00000782 64A3                   MOV         R10,R4
      Monochrome   598            while(plot_y > plot_x)
    00000784 4E15                   CMP/PL      R14
    00000786 8B33                   BF          L713
    00000788              L715:                             
      Monochrome   599            {
      Monochrome   600                    if(d < 0)
    00000788 4911                   CMP/PZ      R9
    0000078A 8904                   BT          L716
      Monochrome   601                            d += 2*plot_x+3;
    0000078C 63D3                   MOV         R13,R3
    0000078E 4300                   SHLL        R3
    00000790 7303                   ADD         #3,R3
    00000792 A018                   BRA         L717
    00000794 393C                   ADD         R3,R9
    00000796              L716:                             
      Monochrome   602                    else {
      Monochrome   603                            d += 2*(plot_x-plot_y)+5;
    00000796 63D3                   MOV         R13,R3
    00000798 33E8                   SUB         R14,R3
    0000079A 4300                   SHLL        R3
    0000079C 7305                   ADD         #5,R3
    0000079E 393C                   ADD         R3,R9
      Monochrome   604                            plot_y--;
    000007A0 7EFF                   ADD         #-1,R14
      Monochrome   605                            ML_horizontal_line(y+plot_y+1, x-plot_x, x+plot_x, color);
    000007A2 67B3                   MOV         R11,R7
    000007A4 68C3                   MOV         R12,R8
    000007A6 38DC                   ADD         R13,R8
    000007A8 6683                   MOV         R8,R6
    000007AA 65C3                   MOV         R12,R5
    000007AC 35D8                   SUB         R13,R5
    000007AE 64A3                   MOV         R10,R4
    000007B0 2F52                   MOV.L       R5,@R15
    000007B2 34EC                   ADD         R14,R4
    000007B4 BD82                   BSR         _ML_horizontal_line
    000007B6 7401                   ADD         #1,R4
      Monochrome   606                            ML_horizontal_line(y-plot_y-1, x-plot_x, x+plot_x, color);
    000007B8 65F2                   MOV.L       @R15,R5
    000007BA 64A3                   MOV         R10,R4
    000007BC 67B3                   MOV         R11,R7
    000007BE 6683                   MOV         R8,R6
    000007C0 34E8                   SUB         R14,R4
    000007C2 BD7B                   BSR         _ML_horizontal_line
    000007C4 74FF                   ADD         #-1,R4
    000007C6              L717:                             
      Monochrome   607                    }
      Monochrome   608                    plot_x++;
    000007C6 7D01                   ADD         #1,R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   31


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome   609                    if(plot_y >= plot_x)
    000007C8 3ED3                   CMP/GE      R13,R14
    000007CA 8B0F                   BF          L718
      Monochrome   610                    {
      Monochrome   611                            ML_horizontal_line(y+plot_x, x-plot_y, x+plot_y, color);
    000007CC 67B3                   MOV         R11,R7
    000007CE 66C3                   MOV         R12,R6
    000007D0 36EC                   ADD         R14,R6
    000007D2 68C3                   MOV         R12,R8
    000007D4 2F62                   MOV.L       R6,@R15
    000007D6 64A3                   MOV         R10,R4
    000007D8 38E8                   SUB         R14,R8
    000007DA 6583                   MOV         R8,R5
    000007DC BD6E                   BSR         _ML_horizontal_line
    000007DE 34DC                   ADD         R13,R4
      Monochrome   612                            ML_horizontal_line(y-plot_x, x-plot_y, x+plot_y, color);
    000007E0 66F2                   MOV.L       @R15,R6
    000007E2 6583                   MOV         R8,R5
    000007E4 67B3                   MOV         R11,R7
    000007E6 64A3                   MOV         R10,R4
    000007E8 BD68                   BSR         _ML_horizontal_line
    000007EA 34D8                   SUB         R13,R4
    000007EC              L718:                             
    000007EC 3ED7                   CMP/GT      R13,R14
    000007EE 89CB                   BT          L715
    000007F0              L713:                             
      Monochrome   613                    }
      Monochrome   614            }
      Monochrome   615    }
    000007F0 7F04                   ADD         #4,R15
    000007F2 4F26                   LDS.L       @R15+,PR
    000007F4 68F6                   MOV.L       @R15+,R8
    000007F6 69F6                   MOV.L       @R15+,R9
    000007F8 6AF6                   MOV.L       @R15+,R10
    000007FA 6BF6                   MOV.L       @R15+,R11
    000007FC 6CF6                   MOV.L       @R15+,R12
    000007FE 6DF6                   MOV.L       @R15+,R13
    00000800 000B                   RTS
    00000802 6EF6                   MOV.L       @R15+,R14
      Monochrome   616    #endif
      Monochrome   617    
      Monochrome   618    #ifdef ML_ELLIPSE
      Monochrome   619    void ML_ellipse(int x, int y, int radius1, int radius2, ML_Color color)
      Monochrome   620    {
      Monochrome   621            int plot_x, plot_y;
      Monochrome   622            float d1, d2;
      Monochrome   623            if(radius1 < 1 || radius2 < 1) return;
      Monochrome   624            plot_x = 0;
      Monochrome   625            plot_y = radius2;
      Monochrome   626            d1 = radius2*radius2 - radius1*radius1*radius2 + radius1*radius1/4;
      Monochrome   627            ML_pixel(x, y+plot_y, color);
      Monochrome   628            ML_pixel(x, y-plot_y, color);
      Monochrome   629            while(radius1*radius1*(plot_y-.5) > radius2*radius2*(plot_x+1))
      Monochrome   630            {
      Monochrome   631                    if(d1 < 0)
      Monochrome   632                    {
      Monochrome   633                            d1 += radius2*radius2*(2*plot_x+3);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   32


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome   634                            plot_x++;
      Monochrome   635                    } else {
      Monochrome   636                            d1 += radius2*radius2*(2*plot_x+3) + radius1*radius1*(-2*plot_y+2);
      Monochrome   637                            plot_x++;
      Monochrome   638                            plot_y--;
      Monochrome   639                    }
      Monochrome   640                    ML_pixel(x+plot_x, y+plot_y, color);
      Monochrome   641                    ML_pixel(x-plot_x, y+plot_y, color);
      Monochrome   642                    ML_pixel(x+plot_x, y-plot_y, color);
      Monochrome   643                    ML_pixel(x-plot_x, y-plot_y, color);
      Monochrome   644            }
      Monochrome   645            d2 = radius2*radius2*(plot_x+.5)*(plot_x+.5) + radius1*radius1*(plot_y-1)*(plot_y-1) - radius1*rad
                         +ius1*radius2*radius2;
      Monochrome   646            while(plot_y > 0)
      Monochrome   647            {
      Monochrome   648                    if(d2 < 0)
      Monochrome   649                    {
      Monochrome   650                            d2 += radius2*radius2*(2*plot_x+2) + radius1*radius1*(-2*plot_y+3);
      Monochrome   651                            plot_y--;
      Monochrome   652                            plot_x++;
      Monochrome   653                    } else {
      Monochrome   654                            d2 += radius1*radius1*(-2*plot_y+3);
      Monochrome   655                            plot_y--;
      Monochrome   656                    }
      Monochrome   657                    ML_pixel(x+plot_x, y+plot_y, color);
      Monochrome   658                    ML_pixel(x-plot_x, y+plot_y, color);
      Monochrome   659                    if(plot_y > 0)
      Monochrome   660                    {
      Monochrome   661                            ML_pixel(x+plot_x, y-plot_y, color);
      Monochrome   662                            ML_pixel(x-plot_x, y-plot_y, color);
      Monochrome   663                    }
      Monochrome   664            }
      Monochrome   665    }
      Monochrome   666    #endif
      Monochrome   667    
      Monochrome   668    #ifdef ML_ELLIPSE_IN_RECT
      Monochrome   669    void ML_ellipse_in_rect(int x1, int y1, int x2, int y2, ML_Color color)
      Monochrome   670    {
      Monochrome   671            int radius1, radius2;
      Monochrome   672            if(x1 > x2)
      Monochrome   673            {
      Monochrome   674                    int tmp = x1;
      Monochrome   675                    x1 = x2;
      Monochrome   676                    x2 = tmp;
      Monochrome   677            }
      Monochrome   678            if(y1 > y2)
      Monochrome   679            {
      Monochrome   680                    int tmp = y1;
      Monochrome   681                    y1 = y2;
      Monochrome   682                    y2 = tmp;
      Monochrome   683            }
      Monochrome   684            radius1 = (x2-x1)/2;
      Monochrome   685            radius2 = (y2-y1)/2;
      Monochrome   686            ML_ellipse(x1+radius1, y1+radius2, radius1, radius2, color);
      Monochrome   687    }
      Monochrome   688    #endif
      Monochrome   689    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   33


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome   690    #ifdef ML_FILLED_ELLIPSE
      Monochrome   691    void ML_filled_ellipse(int x, int y, int radius1, int radius2, ML_Color color)
    00000804              _ML_filled_ellipse:              ; function: ML_filled_ellipse
                                                           ; frame size=124
                                                           ; used runtime library name:
                                                           ; __adds, __addd, __subdr, __muld, __dtos, __itos, __itod, __gtd, __lts
    00000804 2FE6                   MOV.L       R14,@-R15
    00000806 2FD6                   MOV.L       R13,@-R15
    00000808 2FC6                   MOV.L       R12,@-R15
    0000080A 6C73                   MOV         R7,R12
    0000080C 2FB6                   MOV.L       R11,@-R15
    0000080E 6B63                   MOV         R6,R11
    00000810 2FA6                   MOV.L       R10,@-R15
    00000812 2F96                   MOV.L       R9,@-R15
    00000814 2F86                   MOV.L       R8,@-R15
    00000816 6953                   MOV         R5,R9
    00000818 4F22                   STS.L       PR,@-R15
    0000081A 6843                   MOV         R4,R8
    0000081C 4F12                   STS.L       MACL,@-R15
      Monochrome   692    {
      Monochrome   693            int plot_x, plot_y;
      Monochrome   694            float d1, d2;
      Monochrome   695            if(radius1 < 1 || radius2 < 1) return;
    0000081E E401                   MOV         #1,R4
    00000820 7FEC                   ADD         #-20,R15
    00000822 3B43                   CMP/GE      R4,R11
    00000824 8D02                   BT/S        L906
    00000826 5AFE                   MOV.L       @(56,R15),R10
    00000828 A13E                   BRA         L721
    0000082A 0009                   NOP
    0000082C              L906:                             
    0000082C 3C43                   CMP/GE      R4,R12
    0000082E 8901                   BT          L907
    00000830 A13A                   BRA         L721
    00000832 0009                   NOP
    00000834              L907:                             
      Monochrome   696            plot_x = 0;
      Monochrome   697            plot_y = radius2;
      Monochrome   698            d1 = radius2*radius2 - radius1*radius1*radius2 + radius1*radius1/4;
    00000834 0BB7                   MUL.L       R11,R11
    00000836 ED00                   MOV         #0,R13
    00000838 6EC3                   MOV         R12,R14
    0000083A 001A                   STS         MACL,R0
    0000083C 4011                   CMP/PZ      R0
    0000083E 8D01                   BT/S        L722
    00000840 1F02                   MOV.L       R0,@(8,R15)
    00000842 7003                   ADD         #3,R0
    00000844              L722:                             
    00000844 52F2                   MOV.L       @(8,R15),R2
    00000846 4021                   SHAR        R0
    00000848 02C7                   MUL.L       R12,R2
    0000084A 4021                   SHAR        R0
    0000084C 021A                   STS         MACL,R2
    0000084E 3028                   SUB         R2,R0
    00000850 0CC7                   MUL.L       R12,R12
    00000852 031A                   STS         MACL,R3
    00000854 1F34                   MOV.L       R3,@(16,R15)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   34


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000856 D279                   MOV.L       L908,R2    ; __itos
    00000858 420B                   JSR         @R2
    0000085A 303C                   ADD         R3,R0
      Monochrome   699            while(radius1*radius1*(plot_y-.5) > radius2*radius2*(plot_x+1))
    0000085C A037                   BRA         L723
    0000085E 2F02                   MOV.L       R0,@R15
    00000860              L724:                             
    00000860 61F2                   MOV.L       @R15,R1
    00000862 64D3                   MOV         R13,R4
    00000864 D376                   MOV.L       L908+4,R3  ; __lts
    00000866 4400                   SHLL        R4
    00000868 7403                   ADD         #3,R4
    0000086A 04C7                   MUL.L       R12,R4
    0000086C 041A                   STS         MACL,R4
    0000086E 04C7                   MUL.L       R12,R4
    00000870 041A                   STS         MACL,R4
    00000872 430B                   JSR         @R3
    00000874 E000                   MOV         #0,R0
    00000876 8800                   CMP/EQ      #0,R0
    00000878 8908                   BT          L725
      Monochrome   700            {
      Monochrome   701                    if(d1 < 0)
      Monochrome   702                    {
      Monochrome   703                            d1 += radius2*radius2*(2*plot_x+3);
    0000087A D270                   MOV.L       L908,R2    ; __itos
    0000087C 420B                   JSR         @R2
    0000087E 6043                   MOV         R4,R0
    00000880 D370                   MOV.L       L908+8,R3  ; __adds
    00000882 430B                   JSR         @R3
    00000884 61F2                   MOV.L       @R15,R1
    00000886 2F02                   MOV.L       R0,@R15
      Monochrome   704                            plot_x++;
    00000888 A021                   BRA         L723
    0000088A 7D01                   ADD         #1,R13
    0000088C              L725:                             
      Monochrome   705                    } else {
      Monochrome   706                            d1 += radius2*radius2*(2*plot_x+3) + radius1*radius1*(-2*plot_y+2);
    0000088C D36B                   MOV.L       L908,R3    ; __itos
    0000088E 62E3                   MOV         R14,R2
    00000890 4200                   SHLL        R2
    00000892 E002                   MOV         #2,R0
    00000894 3028                   SUB         R2,R0
    00000896 00B7                   MUL.L       R11,R0
    00000898 001A                   STS         MACL,R0
    0000089A 00B7                   MUL.L       R11,R0
    0000089C 001A                   STS         MACL,R0
    0000089E 430B                   JSR         @R3
    000008A0 304C                   ADD         R4,R0
    000008A2 D268                   MOV.L       L908+8,R2  ; __adds
    000008A4 420B                   JSR         @R2
    000008A6 61F2                   MOV.L       @R15,R1
    000008A8 2F02                   MOV.L       R0,@R15
      Monochrome   707                            ML_horizontal_line(y+plot_y, x-plot_x, x+plot_x, color);
    000008AA 67A3                   MOV         R10,R7
    000008AC 6683                   MOV         R8,R6
    000008AE 36DC                   ADD         R13,R6
    000008B0 1F61                   MOV.L       R6,@(4,R15)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   35


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000008B2 6583                   MOV         R8,R5
    000008B4 35D8                   SUB         R13,R5
    000008B6 6493                   MOV         R9,R4
    000008B8 1F53                   MOV.L       R5,@(12,R15)
    000008BA BCFF                   BSR         _ML_horizontal_line
    000008BC 34EC                   ADD         R14,R4
      Monochrome   708                            ML_horizontal_line(y-plot_y, x-plot_x, x+plot_x, color);
    000008BE 67A3                   MOV         R10,R7
    000008C0 56F1                   MOV.L       @(4,R15),R6
    000008C2 6493                   MOV         R9,R4
    000008C4 55F3                   MOV.L       @(12,R15),R5
    000008C6 BCF9                   BSR         _ML_horizontal_line
    000008C8 34E8                   SUB         R14,R4
      Monochrome   709                            plot_x++;
    000008CA 7D01                   ADD         #1,R13
      Monochrome   710                            plot_y--;
    000008CC 7EFF                   ADD         #-1,R14
    000008CE              L723:                             
    000008CE 7FF8                   ADD         #-8,R15
    000008D0 D25D                   MOV.L       L908+12,R2 ; __itod
    000008D2 50F4                   MOV.L       @(16,R15),R0
    000008D4 7FF8                   ADD         #-8,R15
    000008D6 420B                   JSR         @R2
    000008D8 2FF6                   MOV.L       R15,@-R15
    000008DA 60E3                   MOV         R14,R0
    000008DC D35A                   MOV.L       L908+12,R3 ; __itod
    000008DE 7FF0                   ADD         #-16,R15
    000008E0 430B                   JSR         @R3
    000008E2 2FF6                   MOV.L       R15,@-R15
    000008E4 D15A                   MOV.L       L908+20,R1 ; __addd
    000008E6 E200                   MOV         #0,R2
    000008E8 2F26                   MOV.L       R2,@-R15
    000008EA D258                   MOV.L       L908+16,R2 ; H'BFE00000
    000008EC 2F26                   MOV.L       R2,@-R15
    000008EE 63F3                   MOV         R15,R3
    000008F0 7310                   ADD         #16,R3
    000008F2 410B                   JSR         @R1
    000008F4 2F36                   MOV.L       R3,@-R15
    000008F6 62F3                   MOV         R15,R2
    000008F8 D056                   MOV.L       L908+24,R0 ; __muld
    000008FA 7210                   ADD         #16,R2
    000008FC 400B                   JSR         @R0
    000008FE 2F26                   MOV.L       R2,@-R15
    00000900 D351                   MOV.L       L908+12,R3 ; __itod
    00000902 60D3                   MOV         R13,R0
    00000904 7001                   ADD         #1,R0
    00000906 7FF8                   ADD         #-8,R15
    00000908 00C7                   MUL.L       R12,R0
    0000090A 001A                   STS         MACL,R0
    0000090C 00C7                   MUL.L       R12,R0
    0000090E 001A                   STS         MACL,R0
    00000910 430B                   JSR         @R3
    00000912 2FF6                   MOV.L       R15,@-R15
    00000914 D250                   MOV.L       L908+28,R2 ; __gtd
    00000916 420B                   JSR         @R2
    00000918 0009                   NOP
    0000091A 8800                   CMP/EQ      #0,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   36


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000091C 8BA0                   BF          L724
      Monochrome   711                    }
      Monochrome   712            }
      Monochrome   713            ML_horizontal_line(y+plot_y, x-plot_x, x+plot_x, color);
    0000091E 67A3                   MOV         R10,R7
    00000920 6683                   MOV         R8,R6
    00000922 36DC                   ADD         R13,R6
    00000924 1F61                   MOV.L       R6,@(4,R15)
    00000926 6583                   MOV         R8,R5
    00000928 35D8                   SUB         R13,R5
    0000092A 6493                   MOV         R9,R4
    0000092C 1F53                   MOV.L       R5,@(12,R15)
    0000092E BCC5                   BSR         _ML_horizontal_line
    00000930 34EC                   ADD         R14,R4
      Monochrome   714            ML_horizontal_line(y-plot_y, x-plot_x, x+plot_x, color);
    00000932 67A3                   MOV         R10,R7
    00000934 56F1                   MOV.L       @(4,R15),R6
    00000936 6493                   MOV         R9,R4
    00000938 55F3                   MOV.L       @(12,R15),R5
    0000093A BCBF                   BSR         _ML_horizontal_line
    0000093C 34E8                   SUB         R14,R4
      Monochrome   715            d2 = radius2*radius2*(plot_x+.5)*(plot_x+.5) + radius1*radius1*(plot_y-1)*(plot_y-1) - radius1*rad
                         +ius1*radius2*radius2;
    0000093E 7FE0                   ADD         #-32,R15
    00000940 D241                   MOV.L       L908+12,R2 ; __itod
    00000942 50FC                   MOV.L       @(48,R15),R0
    00000944 7FF8                   ADD         #-8,R15
    00000946 420B                   JSR         @R2
    00000948 2FF6                   MOV.L       R15,@-R15
    0000094A 60D3                   MOV         R13,R0
    0000094C D33E                   MOV.L       L908+12,R3 ; __itod
    0000094E 7FF0                   ADD         #-16,R15
    00000950 430B                   JSR         @R3
    00000952 2FF6                   MOV.L       R15,@-R15
    00000954 D13E                   MOV.L       L908+20,R1 ; __addd
    00000956 E200                   MOV         #0,R2
    00000958 2F26                   MOV.L       R2,@-R15
    0000095A D240                   MOV.L       L908+32,R2 ; H'3FE00000
    0000095C 2F26                   MOV.L       R2,@-R15
    0000095E 63F3                   MOV         R15,R3
    00000960 7310                   ADD         #16,R3
    00000962 410B                   JSR         @R1
    00000964 2F36                   MOV.L       R3,@-R15
    00000966 62F3                   MOV         R15,R2
    00000968 D03A                   MOV.L       L908+24,R0 ; __muld
    0000096A 7210                   ADD         #16,R2
    0000096C 400B                   JSR         @R0
    0000096E 2F26                   MOV.L       R2,@-R15
    00000970 D335                   MOV.L       L908+12,R3 ; __itod
    00000972 60D3                   MOV         R13,R0
    00000974 7FF0                   ADD         #-16,R15
    00000976 430B                   JSR         @R3
    00000978 2FF6                   MOV.L       R15,@-R15
    0000097A E200                   MOV         #0,R2
    0000097C D134                   MOV.L       L908+20,R1 ; __addd
    0000097E 2F26                   MOV.L       R2,@-R15
    00000980 D236                   MOV.L       L908+32,R2 ; H'3FE00000




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   37


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000982 2F26                   MOV.L       R2,@-R15
    00000984 63F3                   MOV         R15,R3
    00000986 7310                   ADD         #16,R3
    00000988 410B                   JSR         @R1
    0000098A 2F36                   MOV.L       R3,@-R15
    0000098C D031                   MOV.L       L908+24,R0 ; __muld
    0000098E 62F3                   MOV         R15,R2
    00000990 7210                   ADD         #16,R2
    00000992 400B                   JSR         @R0
    00000994 2F26                   MOV.L       R2,@-R15
    00000996 64E3                   MOV         R14,R4
    00000998 D32B                   MOV.L       L908+12,R3 ; __itod
    0000099A 7FF8                   ADD         #-8,R15
    0000099C 74FF                   ADD         #-1,R4
    0000099E 0447                   MUL.L       R4,R4
    000009A0 001A                   STS         MACL,R0
    000009A2 00B7                   MUL.L       R11,R0
    000009A4 001A                   STS         MACL,R0
    000009A6 00B7                   MUL.L       R11,R0
    000009A8 001A                   STS         MACL,R0
    000009AA 430B                   JSR         @R3
    000009AC 2FF6                   MOV.L       R15,@-R15
    000009AE 62F3                   MOV         R15,R2
    000009B0 D127                   MOV.L       L908+20,R1 ; __addd
    000009B2 7210                   ADD         #16,R2
    000009B4 410B                   JSR         @R1
    000009B6 2F26                   MOV.L       R2,@-R15
    000009B8 50F6                   MOV.L       @(24,R15),R0
    000009BA 7FF8                   ADD         #-8,R15
    000009BC D322                   MOV.L       L908+12,R3 ; __itod
    000009BE 00C7                   MUL.L       R12,R0
    000009C0 001A                   STS         MACL,R0
    000009C2 00C7                   MUL.L       R12,R0
    000009C4 001A                   STS         MACL,R0
    000009C6 430B                   JSR         @R3
    000009C8 2FF6                   MOV.L       R15,@-R15
    000009CA 62F3                   MOV         R15,R2
    000009CC D124                   MOV.L       L908+36,R1 ; __subdr
    000009CE 7210                   ADD         #16,R2
    000009D0 410B                   JSR         @R1
    000009D2 2F26                   MOV.L       R2,@-R15
    000009D4 D323                   MOV.L       L908+40,R3 ; __dtos
    000009D6 430B                   JSR         @R3
    000009D8 0009                   NOP
      Monochrome   716            while(plot_y > 0)
    000009DA 4E15                   CMP/PL      R14
    000009DC 2F02                   MOV.L       R0,@R15
    000009DE 53F3                   MOV.L       @(12,R15),R3
    000009E0 1F32                   MOV.L       R3,@(8,R15)
    000009E2 52F1                   MOV.L       @(4,R15),R2
    000009E4 1F24                   MOV.L       R2,@(16,R15)
    000009E6 53F3                   MOV.L       @(12,R15),R3
    000009E8 1F31                   MOV.L       R3,@(4,R15)
    000009EA 8B5D                   BF          L721
    000009EC              L728:                             
      Monochrome   717            {
      Monochrome   718                    if(d2 < 0)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   38


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000009EC 61F2                   MOV.L       @R15,R1
    000009EE D214                   MOV.L       L908+4,R2  ; __lts
    000009F0 420B                   JSR         @R2
    000009F2 E000                   MOV         #0,R0
    000009F4 8800                   CMP/EQ      #0,R0
    000009F6 8937                   BT          L729
      Monochrome   719                    {
      Monochrome   720                            d2 += radius2*radius2*(2*plot_x+2) + radius1*radius1*(-2*plot_y+3);
    000009F8 60D3                   MOV         R13,R0
    000009FA 4000                   SHLL        R0
    000009FC 7002                   ADD         #2,R0
    000009FE 63E3                   MOV         R14,R3
    00000A00 00C7                   MUL.L       R12,R0
    00000A02 E203                   MOV         #3,R2
    00000A04 001A                   STS         MACL,R0
    00000A06 4300                   SHLL        R3
    00000A08 00C7                   MUL.L       R12,R0
    00000A0A 3238                   SUB         R3,R2
    00000A0C D30B                   MOV.L       L908,R3    ; __itos
    00000A0E 001A                   STS         MACL,R0
    00000A10 02B7                   MUL.L       R11,R2
    00000A12 021A                   STS         MACL,R2
    00000A14 02B7                   MUL.L       R11,R2
    00000A16 021A                   STS         MACL,R2
    00000A18 430B                   JSR         @R3
    00000A1A 302C                   ADD         R2,R0
    00000A1C D209                   MOV.L       L908+8,R2  ; __adds
    00000A1E 420B                   JSR         @R2
    00000A20 61F2                   MOV.L       @R15,R1
      Monochrome   721                            plot_y--;
    00000A22 7EFF                   ADD         #-1,R14
    00000A24 2F02                   MOV.L       R0,@R15
      Monochrome   722                            plot_x++;
    00000A26 7D01                   ADD         #1,R13
    00000A28 53F2                   MOV.L       @(8,R15),R3
    00000A2A 73FF                   ADD         #-1,R3
    00000A2C 1F32                   MOV.L       R3,@(8,R15)
    00000A2E 52F4                   MOV.L       @(16,R15),R2
    00000A30 7201                   ADD         #1,R2
    00000A32 1F24                   MOV.L       R2,@(16,R15)
    00000A34 51F1                   MOV.L       @(4,R15),R1
    00000A36 71FF                   ADD         #-1,R1
    00000A38 A025                   BRA         L730
    00000A3A 1F11                   MOV.L       R1,@(4,R15)
    00000A3C              L908:                             
    00000A3C <00000000>             .DATA.L     __itos
    00000A40 <00000000>             .DATA.L     __lts
    00000A44 <00000000>             .DATA.L     __adds
    00000A48 <00000000>             .DATA.L     __itod
    00000A4C BFE00000               .DATA.L     H'BFE00000
    00000A50 <00000000>             .DATA.L     __addd
    00000A54 <00000000>             .DATA.L     __muld
    00000A58 <00000000>             .DATA.L     __gtd
    00000A5C 3FE00000               .DATA.L     H'3FE00000
    00000A60 <00000000>             .DATA.L     __subdr
    00000A64 <00000000>             .DATA.L     __dtos
    00000A68              L729:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   39


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome   723                    } else {
      Monochrome   724                            d2 += radius1*radius1*(-2*plot_y+3);
    00000A68 D356                   MOV.L       L909+2,R3  ; __itos
    00000A6A 62E3                   MOV         R14,R2
    00000A6C 4200                   SHLL        R2
    00000A6E E003                   MOV         #3,R0
    00000A70 3028                   SUB         R2,R0
    00000A72 00B7                   MUL.L       R11,R0
    00000A74 001A                   STS         MACL,R0
    00000A76 00B7                   MUL.L       R11,R0
    00000A78 430B                   JSR         @R3
    00000A7A 001A                   STS         MACL,R0
    00000A7C D252                   MOV.L       L909+6,R2  ; __adds
    00000A7E 420B                   JSR         @R2
    00000A80 61F2                   MOV.L       @R15,R1
      Monochrome   725                            plot_y--;
    00000A82 7EFF                   ADD         #-1,R14
    00000A84 2F02                   MOV.L       R0,@R15
    00000A86              L730:                             
      Monochrome   726                    }
      Monochrome   727                    ML_horizontal_line(y+plot_y, x-plot_x, x+plot_x, color);
    00000A86 67A3                   MOV         R10,R7
    00000A88 55F1                   MOV.L       @(4,R15),R5
    00000A8A 6493                   MOV         R9,R4
    00000A8C 6683                   MOV         R8,R6
    00000A8E 36DC                   ADD         R13,R6
    00000A90 BC14                   BSR         _ML_horizontal_line
    00000A92 34EC                   ADD         R14,R4
      Monochrome   728                    if(plot_y > 0)
    00000A94 4E15                   CMP/PL      R14
    00000A96 8B05                   BF          L731
      Monochrome   729                            ML_horizontal_line(y-plot_y, x-plot_x, x+plot_x, color);
    00000A98 56F4                   MOV.L       @(16,R15),R6
    00000A9A 6493                   MOV         R9,R4
    00000A9C 55F2                   MOV.L       @(8,R15),R5
    00000A9E 67A3                   MOV         R10,R7
    00000AA0 BC0C                   BSR         _ML_horizontal_line
    00000AA2 34E8                   SUB         R14,R4
    00000AA4              L731:                             
    00000AA4 4E15                   CMP/PL      R14
    00000AA6 89A1                   BT          L728
    00000AA8              L721:                             
      Monochrome   730            }
      Monochrome   731    }
    00000AA8 7F14                   ADD         #20,R15
    00000AAA 4F16                   LDS.L       @R15+,MACL
    00000AAC 4F26                   LDS.L       @R15+,PR
    00000AAE 68F6                   MOV.L       @R15+,R8
    00000AB0 69F6                   MOV.L       @R15+,R9
    00000AB2 6AF6                   MOV.L       @R15+,R10
    00000AB4 6BF6                   MOV.L       @R15+,R11
    00000AB6 6CF6                   MOV.L       @R15+,R12
    00000AB8 6DF6                   MOV.L       @R15+,R13
    00000ABA 000B                   RTS
    00000ABC 6EF6                   MOV.L       @R15+,R14
      Monochrome   732    #endif
      Monochrome   733    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   40


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome   734    #ifdef ML_FILLED_ELLIPSE_IN_RECT
      Monochrome   735    void ML_filled_ellipse_in_rect(int x1, int y1, int x2, int y2, ML_Color color)
      Monochrome   736    {
      Monochrome   737            int radius1, radius2;
      Monochrome   738            if(x1 > x2)
      Monochrome   739            {
      Monochrome   740                    int tmp = x1;
      Monochrome   741                    x1 = x2;
      Monochrome   742                    x2 = tmp;
      Monochrome   743            }
      Monochrome   744            if(y1 > y2)
      Monochrome   745            {
      Monochrome   746                    int tmp = y1;
      Monochrome   747                    y1 = y2;
      Monochrome   748                    y2 = tmp;
      Monochrome   749            }
      Monochrome   750            radius1 = (x2-x1)/2;
      Monochrome   751            radius2 = (y2-y1)/2;
      Monochrome   752            ML_filled_ellipse(x1+radius1, y1+radius2, radius1, radius2, color);
      Monochrome   753    }
      Monochrome   754    #endif
      Monochrome   755    
      Monochrome   756    #ifdef ML_HORIZONTAL_SCROLL
      Monochrome   757    void ML_horizontal_scroll(int scroll)
    00000ABE              _ML_horizontal_scroll:           ; function: ML_horizontal_scroll
                                                           ; frame size=80
    00000ABE 2FE6                   MOV.L       R14,@-R15
    00000AC0 2FD6                   MOV.L       R13,@-R15
    00000AC2 2FC6                   MOV.L       R12,@-R15
    00000AC4 2FB6                   MOV.L       R11,@-R15
    00000AC6 2FA6                   MOV.L       R10,@-R15
    00000AC8 2F96                   MOV.L       R9,@-R15
    00000ACA 2F86                   MOV.L       R8,@-R15
    00000ACC 4F22                   STS.L       PR,@-R15
    00000ACE 7FD0                   ADD         #-48,R15
      Monochrome   758    {
      Monochrome   759            int i, j;
      Monochrome   760            char line[16], shift, *vram;
      Monochrome   761            unsigned char next;
      Monochrome   762            unsigned short word;
      Monochrome   763            vram = ML_vram_adress();
    00000AD0 BA96                   BSR         _ML_vram_adress
    00000AD2 6C43                   MOV         R4,R12
    00000AD4 6E03                   MOV         R0,R14
      Monochrome   764            scroll %= 128;
    00000AD6 4C11                   CMP/PZ      R12
    00000AD8 8F02                   BF/S        L732
    00000ADA E37F                   MOV         #127,R3
    00000ADC A005                   BRA         L733
    00000ADE 2C39                   AND         R3,R12
    00000AE0              L732:                             
    00000AE0 6CC7                   NOT         R12,R12
    00000AE2 7C01                   ADD         #1,R12
    00000AE4 2C39                   AND         R3,R12
    00000AE6 6CC7                   NOT         R12,R12
    00000AE8 7C01                   ADD         #1,R12
    00000AEA              L733:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   41


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome   765            shift = 8-(scroll&7);
    00000AEA E107                   MOV         #7,R1
    00000AEC 21C9                   AND         R12,R1
    00000AEE E008                   MOV         #8,R0
    00000AF0 3018                   SUB         R1,R0
      Monochrome   766            for(i=0 ; i<64 ; i++)
    00000AF2 E700                   MOV         #0,R7
    00000AF4 80F4                   MOV.B       R0,@(4,R15)
    00000AF6 6DE3                   MOV         R14,R13
    00000AF8 6A73                   MOV         R7,R10
    00000AFA 6873                   MOV         R7,R8
    00000AFC 69E3                   MOV         R14,R9
    00000AFE 790F                   ADD         #15,R9
    00000B00 64F3                   MOV         R15,R4
    00000B02 7420                   ADD         #32,R4
    00000B04 6343                   MOV         R4,R3
    00000B06 7310                   ADD         #16,R3
    00000B08 1F32                   MOV.L       R3,@(8,R15)
    00000B0A 4C21                   SHAR        R12
    00000B0C 4C21                   SHAR        R12
    00000B0E 4C21                   SHAR        R12
    00000B10 1FC4                   MOV.L       R12,@(16,R15)
    00000B12 6243                   MOV         R4,R2
    00000B14 1F25                   MOV.L       R2,@(20,R15)
    00000B16 6123                   MOV         R2,R1
    00000B18 710F                   ADD         #15,R1
    00000B1A EC0F                   MOV         #15,R12
    00000B1C 1F16                   MOV.L       R1,@(24,R15)
    00000B1E 740E                   ADD         #14,R4
    00000B20 1F47                   MOV.L       R4,@(28,R15)
    00000B22              L734:                             
      Monochrome   767            {
      Monochrome   768                    for(j=0 ; j<16 ; j++) line[j] = vram[(i<<4)+((j-(scroll>>3)+15)&15)];
    00000B22 6473                   MOV         R7,R4
    00000B24 53F4                   MOV.L       @(16,R15),R3
    00000B26 66A3                   MOV         R10,R6
    00000B28 3438                   SUB         R3,R4
    00000B2A 6543                   MOV         R4,R5
    00000B2C 54F5                   MOV.L       @(20,R15),R4
    00000B2E 4608                   SHLL2       R6
    00000B30 750F                   ADD         #15,R5
    00000B32 4608                   SHLL2       R6
    00000B34              L735:                             
    00000B34 6053                   MOV         R5,R0
    00000B36 20C9                   AND         R12,R0
    00000B38 306C                   ADD         R6,R0
    00000B3A 03EC                   MOV.B       @(R0,R14),R3
    00000B3C 2430                   MOV.B       R3,@R4
    00000B3E 7401                   ADD         #1,R4
    00000B40 52F2                   MOV.L       @(8,R15),R2
    00000B42 3422                   CMP/HS      R2,R4
    00000B44 8FF6                   BF/S        L735
    00000B46 7501                   ADD         #1,R5
      Monochrome   769                    next = line[15];
    00000B48 56F6                   MOV.L       @(24,R15),R6
      Monochrome   770                    vram[(i<<4)+15] = 0;
      Monochrome   771                    for(j=15 ; j>0 ; j--)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   42


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000B4A 6BC3                   MOV         R12,R11
    00000B4C 6660                   MOV.B       @R6,R6
    00000B4E 6483                   MOV         R8,R4
    00000B50 2970                   MOV.B       R7,@R9
    00000B52 740F                   ADD         #15,R4
    00000B54 55F7                   MOV.L       @(28,R15),R5
    00000B56              L736:                             
      Monochrome   772                    {
      Monochrome   773                            word = next << shift;
    00000B56 666C                   EXTU.B      R6,R6
    00000B58 84F4                   MOV.B       @(4,R15),R0
      Monochrome   774                            next = line[j-1];
      Monochrome   775                            vram[(i<<4)+j] |= *((char*)&word+1);
    00000B5A 63F3                   MOV         R15,R3
    00000B5C 460D                   SHLD        R0,R6
    00000B5E 6043                   MOV         R4,R0
    00000B60 2F61                   MOV.W       R6,@R15
    00000B62 E201                   MOV         #1,R2
    00000B64 6650                   MOV.B       @R5,R6
    00000B66 7BFF                   ADD         #-1,R11
    00000B68 323C                   ADD         R3,R2
    00000B6A 4B15                   CMP/PL      R11
    00000B6C 6320                   MOV.B       @R2,R3
    00000B6E 02EC                   MOV.B       @(R0,R14),R2
    00000B70 223B                   OR          R3,R2
      Monochrome   776                            vram[(i<<4)+j-1] = *((char*)&word);
    00000B72 63F3                   MOV         R15,R3
    00000B74 0E24                   MOV.B       R2,@(R0,R14)
    00000B76 70FF                   ADD         #-1,R0
    00000B78 1F03                   MOV.L       R0,@(12,R15)
    00000B7A 6230                   MOV.B       @R3,R2
    00000B7C 0E24                   MOV.B       R2,@(R0,R14)
    00000B7E 54F3                   MOV.L       @(12,R15),R4
    00000B80 8DE9                   BT/S        L736
    00000B82 75FF                   ADD         #-1,R5
      Monochrome   777                    }
      Monochrome   778                    word = next << shift;
    00000B84 84F4                   MOV.B       @(4,R15),R0
      Monochrome   779                    vram[(i<<4)] |= *((char*)&word+1);
    00000B86 63F3                   MOV         R15,R3
    00000B88 666C                   EXTU.B      R6,R6
    00000B8A 460D                   SHLD        R0,R6
    00000B8C 2F61                   MOV.W       R6,@R15
    00000B8E 7A01                   ADD         #1,R10
    00000B90 8431                   MOV.B       @(1,R3),R0
    00000B92 7810                   ADD         #16,R8
    00000B94 62D0                   MOV.B       @R13,R2
      Monochrome   780                    vram[(i<<4)+15] |= *((char*)&word);
    00000B96 63F3                   MOV         R15,R3
    00000B98 220B                   OR          R0,R2
    00000B9A 2D20                   MOV.B       R2,@R13
    00000B9C 6330                   MOV.B       @R3,R3
    00000B9E 84DF                   MOV.B       @(15,R13),R0
    00000BA0 203B                   OR          R3,R0
    00000BA2 E340                   MOV         #64,R3
    00000BA4 80DF                   MOV.B       R0,@(15,R13)
    00000BA6 3A33                   CMP/GE      R3,R10




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   43


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000BA8 7D10                   ADD         #16,R13
    00000BAA 8FBA                   BF/S        L734
    00000BAC 7910                   ADD         #16,R9
      Monochrome   781            }
      Monochrome   782    }
    00000BAE 7F30                   ADD         #48,R15
    00000BB0 4F26                   LDS.L       @R15+,PR
    00000BB2 68F6                   MOV.L       @R15+,R8
    00000BB4 69F6                   MOV.L       @R15+,R9
    00000BB6 6AF6                   MOV.L       @R15+,R10
    00000BB8 6BF6                   MOV.L       @R15+,R11
    00000BBA 6CF6                   MOV.L       @R15+,R12
    00000BBC 6DF6                   MOV.L       @R15+,R13
    00000BBE 000B                   RTS
    00000BC0 6EF6                   MOV.L       @R15+,R14
    00000BC2              L909:                             
    00000BC2 0000                   .DATA.W     0
    00000BC4 <00000000>             .DATA.L     __itos
    00000BC8 <00000000>             .DATA.L     __adds
      Monochrome   783    #endif
      Monochrome   784    
      Monochrome   785    #ifdef ML_VERTICAL_SCROLL
      Monochrome   786    void ML_vertical_scroll(int scroll)
      Monochrome   787    {
      Monochrome   788            int i, j;
      Monochrome   789            char column[64], *vram = ML_vram_adress();
      Monochrome   790            scroll %= 64;
      Monochrome   791            for(i=0 ; i<16 ; i++)
      Monochrome   792            {
      Monochrome   793                    for(j=0 ; j<64 ; j++) column[j] = vram[(j<<4)+i];
      Monochrome   794                    for(j=0 ; j<64 ; j++) vram[(j<<4)+i] = column[(j-scroll+64)&63];
      Monochrome   795            }
      Monochrome   796    }
      Monochrome   797    #endif
      Monochrome   798    
      Monochrome   799    #ifdef ML_BMP_OR
      Monochrome   800    void ML_bmp_or(const unsigned char *bmp, int x, int y, int width, int height)
    00000BCC              _ML_bmp_or:                      ; function: ML_bmp_or
                                                           ; frame size=60
    00000BCC 2FE6                   MOV.L       R14,@-R15
    00000BCE 6E63                   MOV         R6,R14
    00000BD0 2FD6                   MOV.L       R13,@-R15
    00000BD2 2FC6                   MOV.L       R12,@-R15
    00000BD4 2FB6                   MOV.L       R11,@-R15
    00000BD6 6B43                   MOV         R4,R11
    00000BD8 2FA6                   MOV.L       R10,@-R15
    00000BDA 6A53                   MOV         R5,R10
    00000BDC 2F96                   MOV.L       R9,@-R15
    00000BDE 6973                   MOV         R7,R9
    00000BE0 2F86                   MOV.L       R8,@-R15
      Monochrome   801    {
      Monochrome   802            unsigned short line;
      Monochrome   803            char shift, *screen, *p=(char*)&line;
      Monochrome   804            int i, j, begin=0, end=height, real_width=(width-1>>3<<3)+8;
    00000BE2 6C93                   MOV         R9,R12
    00000BE4 4F22                   STS.L       PR,@-R15
    00000BE6 E800                   MOV         #0,R8




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   44


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000BE8 4F12                   STS.L       MACL,@-R15
    00000BEA 7CFF                   ADD         #-1,R12
    00000BEC 7FE8                   ADD         #-24,R15
    00000BEE 6DF3                   MOV         R15,R13
    00000BF0 54FF                   MOV.L       @(60,R15),R4
    00000BF2 4C21                   SHAR        R12
    00000BF4 2F82                   MOV.L       R8,@R15
    00000BF6 7D04                   ADD         #4,R13
    00000BF8 1F45                   MOV.L       R4,@(20,R15)
    00000BFA 4C21                   SHAR        R12
    00000BFC 4C21                   SHAR        R12
    00000BFE 62C3                   MOV         R12,R2
    00000C00 4208                   SHLL2       R2
    00000C02 4200                   SHLL        R2
    00000C04 7208                   ADD         #8,R2
      Monochrome   805            if(!bmp || x<0 || x>128-width || y<1-height || y>63 || width<1 || height<1) return;
    00000C06 2BB8                   TST         R11,R11
    00000C08 8F02                   BF/S        L910
    00000C0A 1F23                   MOV.L       R2,@(12,R15)
    00000C0C A082                   BRA         L739
    00000C0E 0009                   NOP
    00000C10              L910:                             
    00000C10 4A11                   CMP/PZ      R10
    00000C12 8901                   BT          L911
    00000C14 A07E                   BRA         L739
    00000C16 0009                   NOP
    00000C18              L911:                             
    00000C18 933C                   MOV.W       L912,R3    ; H'0080
    00000C1A 3398                   SUB         R9,R3
    00000C1C 3A37                   CMP/GT      R3,R10
    00000C1E 8B01                   BF          L913
    00000C20 A078                   BRA         L739
    00000C22 0009                   NOP
    00000C24              L913:                             
    00000C24 E301                   MOV         #1,R3
    00000C26 3348                   SUB         R4,R3
    00000C28 3E33                   CMP/GE      R3,R14
    00000C2A 8B73                   BF          L739
    00000C2C E33F                   MOV         #63,R3
    00000C2E 3E37                   CMP/GT      R3,R14
    00000C30 8970                   BT          L739
    00000C32 E001                   MOV         #1,R0
    00000C34 3903                   CMP/GE      R0,R9
    00000C36 8B6D                   BF          L739
    00000C38 3403                   CMP/GE      R0,R4
    00000C3A 8B6B                   BF          L739
      Monochrome   806            if(y < 0) begin = -y;
    00000C3C 4E11                   CMP/PZ      R14
    00000C3E 8D02                   BT/S        L740
      Monochrome   807            if(y+height > 64) end = 64-y;
    00000C40 E540                   MOV         #64,R5
    00000C42 62EB                   NEG         R14,R2
    00000C44 2F22                   MOV.L       R2,@R15
    00000C46              L740:                             
    00000C46 34EC                   ADD         R14,R4
    00000C48 3457                   CMP/GT      R5,R4
    00000C4A 8B01                   BF          L741




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   45


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000C4C 35E8                   SUB         R14,R5
    00000C4E 1F55                   MOV.L       R5,@(20,R15)
    00000C50              L741:                             
      Monochrome   808            shift = 8-(x&7);
    00000C50 E307                   MOV         #7,R3
    00000C52 23A9                   AND         R10,R3
    00000C54 E208                   MOV         #8,R2
    00000C56 3238                   SUB         R3,R2
    00000C58 E010                   MOV         #16,R0
      Monochrome   809            screen = ML_vram_adress()+(y+begin<<4)+(x>>3);
    00000C5A B9D1                   BSR         _ML_vram_adress
    00000C5C 0F24                   MOV.B       R2,@(R0,R15)
    00000C5E 63A3                   MOV         R10,R3
    00000C60 61F2                   MOV.L       @R15,R1
    00000C62 4321                   SHAR        R3
    00000C64 3E1C                   ADD         R1,R14
    00000C66 4E08                   SHLL2       R14
    00000C68 4E08                   SHLL2       R14
    00000C6A 30EC                   ADD         R14,R0
    00000C6C 4321                   SHAR        R3
    00000C6E 4321                   SHAR        R3
    00000C70 6503                   MOV         R0,R5
    00000C72 353C                   ADD         R3,R5
      Monochrome   810            for(i=begin ; i<end ; i++)
    00000C74 6613                   MOV         R1,R6
    00000C76 63D3                   MOV         R13,R3
    00000C78 7301                   ADD         #1,R3
    00000C7A 2F32                   MOV.L       R3,@R15
    00000C7C 54F3                   MOV.L       @(12,R15),R4
    00000C7E 6243                   MOV         R4,R2
    00000C80 4221                   SHAR        R2
    00000C82 4221                   SHAR        R2
    00000C84 4221                   SHAR        R2
    00000C86 6143                   MOV         R4,R1
    00000C88 1F22                   MOV.L       R2,@(8,R15)
    00000C8A 3198                   SUB         R9,R1
    00000C8C E9FF                   MOV         #-1,R9
    00000C8E 491C                   SHAD        R1,R9
    00000C90 A03D                   BRA         L742
    00000C92 3A4C                   ADD         R4,R10
    00000C94              L912:                             
    00000C94 0080                   .DATA.W     H'0080
    00000C96              L743:                             
      Monochrome   811            {
      Monochrome   812                    for(j=0 ; j<width-1>>3 ; j++)
    00000C96 6483                   MOV         R8,R4
    00000C98 57F2                   MOV.L       @(8,R15),R7
    00000C9A E010                   MOV         #16,R0
    00000C9C 0767                   MUL.L       R6,R7
    00000C9E 4C15                   CMP/PL      R12
    00000CA0 071A                   STS         MACL,R7
    00000CA2 8F18                   BF/S        L744
    00000CA4 0EFC                   MOV.B       @(R0,R15),R14
    00000CA6              L745:                             
      Monochrome   813                    {
      Monochrome   814                            line = bmp[i*(real_width>>3)+j]<<shift;
    00000CA6 6073                   MOV         R7,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   46


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000CA8 304C                   ADD         R4,R0
    00000CAA 00BC                   MOV.B       @(R0,R11),R0
    00000CAC 600C                   EXTU.B      R0,R0
    00000CAE 40ED                   SHLD        R14,R0
    00000CB0 81F2                   MOV.W       R0,@(4,R15)
      Monochrome   815                            screen[j] |= *p;
    00000CB2 6043                   MOV         R4,R0
    00000CB4 63D0                   MOV.B       @R13,R3
    00000CB6 025C                   MOV.B       @(R0,R5),R2
    00000CB8 223B                   OR          R3,R2
    00000CBA 0524                   MOV.B       R2,@(R0,R5)
      Monochrome   816                            if(shift!=8) screen[j+1] |= *(p+1);
    00000CBC 60E3                   MOV         R14,R0
    00000CBE 8808                   CMP/EQ      #8,R0
    00000CC0 8906                   BT          L746
    00000CC2 6343                   MOV         R4,R3
    00000CC4 62F2                   MOV.L       @R15,R2
    00000CC6 335C                   ADD         R5,R3
    00000CC8 6220                   MOV.B       @R2,R2
    00000CCA 8431                   MOV.B       @(1,R3),R0
    00000CCC 202B                   OR          R2,R0
    00000CCE 8031                   MOV.B       R0,@(1,R3)
    00000CD0              L746:                             
    00000CD0 7401                   ADD         #1,R4
    00000CD2 34C3                   CMP/GE      R12,R4
    00000CD4 8BE7                   BF          L745
    00000CD6              L744:                             
      Monochrome   817                    }
      Monochrome   818                    line = (bmp[i*(real_width>>3)+j] & -1<<(real_width-width))<<shift;
      Monochrome   819                    screen[j] |= *p;
    00000CD6 6743                   MOV         R4,R7
    00000CD8 50F2                   MOV.L       @(8,R15),R0
    00000CDA 375C                   ADD         R5,R7
    00000CDC 0067                   MUL.L       R6,R0
    00000CDE 001A                   STS         MACL,R0
    00000CE0 304C                   ADD         R4,R0
    00000CE2 00BC                   MOV.B       @(R0,R11),R0
    00000CE4 600C                   EXTU.B      R0,R0
    00000CE6 2099                   AND         R9,R0
    00000CE8 40EC                   SHAD        R14,R0
    00000CEA 81F2                   MOV.W       R0,@(4,R15)
    00000CEC 63D0                   MOV.B       @R13,R3
      Monochrome   820                    if(shift!=8 && x+real_width<129) screen[j+1] |= *(p+1);
    00000CEE 60E3                   MOV         R14,R0
    00000CF0 6270                   MOV.B       @R7,R2
    00000CF2 8808                   CMP/EQ      #8,R0
    00000CF4 223B                   OR          R3,R2
    00000CF6 8D08                   BT/S        L747
    00000CF8 2720                   MOV.B       R2,@R7
    00000CFA 9216                   MOV.W       L914,R2    ; H'0081
    00000CFC 3A23                   CMP/GE      R2,R10
    00000CFE 8904                   BT          L747
    00000D00 61F2                   MOV.L       @R15,R1
    00000D02 6310                   MOV.B       @R1,R3
    00000D04 8471                   MOV.B       @(1,R7),R0
    00000D06 203B                   OR          R3,R0
    00000D08 8071                   MOV.B       R0,@(1,R7)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   47


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000D0A              L747:                             
      Monochrome   821                    screen += 16;
    00000D0A 7510                   ADD         #16,R5
    00000D0C 7601                   ADD         #1,R6
    00000D0E              L742:                             
    00000D0E 53F5                   MOV.L       @(20,R15),R3
    00000D10 3633                   CMP/GE      R3,R6
    00000D12 8BC0                   BF          L743
    00000D14              L739:                             
      Monochrome   822            }
      Monochrome   823    }
    00000D14 7F18                   ADD         #24,R15
    00000D16 4F16                   LDS.L       @R15+,MACL
    00000D18 4F26                   LDS.L       @R15+,PR
    00000D1A 68F6                   MOV.L       @R15+,R8
    00000D1C 69F6                   MOV.L       @R15+,R9
    00000D1E 6AF6                   MOV.L       @R15+,R10
    00000D20 6BF6                   MOV.L       @R15+,R11
    00000D22 6CF6                   MOV.L       @R15+,R12
    00000D24 6DF6                   MOV.L       @R15+,R13
    00000D26 000B                   RTS
    00000D28 6EF6                   MOV.L       @R15+,R14
    00000D2A              L914:                             
    00000D2A 0081                   .DATA.W     H'0081
      Monochrome   824    #endif
      Monochrome   825    
      Monochrome   826    #ifdef ML_BMP_AND
      Monochrome   827    void ML_bmp_and(const unsigned char *bmp, int x, int y, int width, int height)
    00000D2C              _ML_bmp_and:                     ; function: ML_bmp_and
                                                           ; frame size=60
    00000D2C 2FE6                   MOV.L       R14,@-R15
    00000D2E 6E63                   MOV         R6,R14
    00000D30 2FD6                   MOV.L       R13,@-R15
    00000D32 2FC6                   MOV.L       R12,@-R15
    00000D34 2FB6                   MOV.L       R11,@-R15
    00000D36 6B53                   MOV         R5,R11
    00000D38 2FA6                   MOV.L       R10,@-R15
    00000D3A 6A43                   MOV         R4,R10
    00000D3C 2F96                   MOV.L       R9,@-R15
    00000D3E 2F86                   MOV.L       R8,@-R15
    00000D40 4F22                   STS.L       PR,@-R15
      Monochrome   828    {
      Monochrome   829            unsigned short line;
      Monochrome   830            char shift, *screen, *p=(char*)&line;
      Monochrome   831            int i, j, begin=0, end=height, real_width=(width-1>>3<<3)+8;
    00000D42 E800                   MOV         #0,R8
    00000D44 4F12                   STS.L       MACL,@-R15
    00000D46 6983                   MOV         R8,R9
    00000D48 7FE8                   ADD         #-24,R15
    00000D4A 6DF3                   MOV         R15,R13
    00000D4C 1F71                   MOV.L       R7,@(4,R15)
    00000D4E 54FF                   MOV.L       @(60,R15),R4
    00000D50 1F45                   MOV.L       R4,@(20,R15)
    00000D52 5CF1                   MOV.L       @(4,R15),R12
    00000D54 7CFF                   ADD         #-1,R12
    00000D56 4C21                   SHAR        R12
    00000D58 4C21                   SHAR        R12




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   48


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000D5A 4C21                   SHAR        R12
    00000D5C 62C3                   MOV         R12,R2
    00000D5E 4208                   SHLL2       R2
    00000D60 4200                   SHLL        R2
    00000D62 7208                   ADD         #8,R2
      Monochrome   832            if(!bmp || x<0 || x>128-width || y<1-height || y>63 || width<1 || height<1) return;
    00000D64 2AA8                   TST         R10,R10
    00000D66 8F02                   BF/S        L915
    00000D68 1F24                   MOV.L       R2,@(16,R15)
    00000D6A A08A                   BRA         L750
    00000D6C 0009                   NOP
    00000D6E              L915:                             
    00000D6E 4B11                   CMP/PZ      R11
    00000D70 8901                   BT          L916
    00000D72 A086                   BRA         L750
    00000D74 0009                   NOP
    00000D76              L916:                             
    00000D76 53F1                   MOV.L       @(4,R15),R3
    00000D78 913F                   MOV.W       L917,R1    ; H'0080
    00000D7A 3138                   SUB         R3,R1
    00000D7C 3B17                   CMP/GT      R1,R11
    00000D7E 8B01                   BF          L918
    00000D80 A07F                   BRA         L750
    00000D82 0009                   NOP
    00000D84              L918:                             
    00000D84 E001                   MOV         #1,R0
    00000D86 3048                   SUB         R4,R0
    00000D88 3E03                   CMP/GE      R0,R14
    00000D8A 8901                   BT          L919
    00000D8C A079                   BRA         L750
    00000D8E 0009                   NOP
    00000D90              L919:                             
    00000D90 E13F                   MOV         #63,R1
    00000D92 3E17                   CMP/GT      R1,R14
    00000D94 8975                   BT          L750
    00000D96 E001                   MOV         #1,R0
    00000D98 3303                   CMP/GE      R0,R3
    00000D9A 8B72                   BF          L750
    00000D9C E201                   MOV         #1,R2
    00000D9E 3423                   CMP/GE      R2,R4
    00000DA0 8B6F                   BF          L750
      Monochrome   833            if(y < 0) begin = -y;
    00000DA2 4E11                   CMP/PZ      R14
    00000DA4 8D01                   BT/S        L751
      Monochrome   834            if(y+height > 64) end = 64-y;
    00000DA6 E540                   MOV         #64,R5
    00000DA8 69EB                   NEG         R14,R9
    00000DAA              L751:                             
    00000DAA 34EC                   ADD         R14,R4
    00000DAC 3457                   CMP/GT      R5,R4
    00000DAE 8F02                   BF/S        L752
      Monochrome   835            shift = 8-(x&7);
    00000DB0 E307                   MOV         #7,R3
    00000DB2 35E8                   SUB         R14,R5
    00000DB4 1F55                   MOV.L       R5,@(20,R15)
    00000DB6              L752:                             
    00000DB6 23B9                   AND         R11,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   49


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000DB8 E008                   MOV         #8,R0
    00000DBA 3038                   SUB         R3,R0
      Monochrome   836            screen = ML_vram_adress()+(y+begin<<4)+(x>>3);
    00000DBC B920                   BSR         _ML_vram_adress
    00000DBE 80FC                   MOV.B       R0,@(12,R15)
    00000DC0 3E9C                   ADD         R9,R14
    00000DC2 4E08                   SHLL2       R14
    00000DC4 4E08                   SHLL2       R14
    00000DC6 30EC                   ADD         R14,R0
    00000DC8 62B3                   MOV         R11,R2
    00000DCA 4221                   SHAR        R2
    00000DCC 4221                   SHAR        R2
    00000DCE 4221                   SHAR        R2
    00000DD0 6503                   MOV         R0,R5
    00000DD2 352C                   ADD         R2,R5
    00000DD4 52F4                   MOV.L       @(16,R15),R2
    00000DD6 E308                   MOV         #8,R3
      Monochrome   837            for(i=begin ; i<end ; i++)
    00000DD8 6693                   MOV         R9,R6
    00000DDA 69D3                   MOV         R13,R9
    00000DDC 7901                   ADD         #1,R9
    00000DDE 4221                   SHAR        R2
    00000DE0 4221                   SHAR        R2
    00000DE2 4221                   SHAR        R2
    00000DE4 1F22                   MOV.L       R2,@(8,R15)
    00000DE6 50F1                   MOV.L       @(4,R15),R0
    00000DE8 C907                   AND         #7,R0
    00000DEA 3308                   SUB         R0,R3
    00000DEC 9006                   MOV.W       L917+2,R0  ; H'00FF
    00000DEE 633B                   NEG         R3,R3
    00000DF0 403C                   SHAD        R3,R0
    00000DF2 80F4                   MOV.B       R0,@(4,R15)
    00000DF4 53F4                   MOV.L       @(16,R15),R3
    00000DF6 A041                   BRA         L753
    00000DF8 3B3C                   ADD         R3,R11
    00000DFA              L917:                             
    00000DFA 0080                   .DATA.W     H'0080
    00000DFC 00FF                   .DATA.W     H'00FF
    00000DFE              L754:                             
      Monochrome   838            {
      Monochrome   839                    for(j=0 ; j<width-1>>3 ; j++)
    00000DFE 6483                   MOV         R8,R4
    00000E00 57F2                   MOV.L       @(8,R15),R7
    00000E02 4C15                   CMP/PL      R12
    00000E04 84FC                   MOV.B       @(12,R15),R0
    00000E06 0767                   MUL.L       R6,R7
    00000E08 071A                   STS         MACL,R7
    00000E0A 8F19                   BF/S        L755
    00000E0C 6E03                   MOV         R0,R14
    00000E0E              L756:                             
      Monochrome   840                    {
      Monochrome   841                            line = ~((unsigned char)~bmp[i*(real_width>>3)+j]<<shift);
    00000E0E 6073                   MOV         R7,R0
    00000E10 304C                   ADD         R4,R0
    00000E12 03AC                   MOV.B       @(R0,R10),R3
    00000E14 6337                   NOT         R3,R3
    00000E16 633C                   EXTU.B      R3,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   50


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000E18 43ED                   SHLD        R14,R3
    00000E1A 6337                   NOT         R3,R3
    00000E1C 2F31                   MOV.W       R3,@R15
      Monochrome   842                            screen[j] &= *p;
    00000E1E 6043                   MOV         R4,R0
    00000E20 62D0                   MOV.B       @R13,R2
    00000E22 015C                   MOV.B       @(R0,R5),R1
    00000E24 2129                   AND         R2,R1
    00000E26 0514                   MOV.B       R1,@(R0,R5)
      Monochrome   843                            if(shift!=8) screen[j+1] &= *(p+1);
    00000E28 60E3                   MOV         R14,R0
    00000E2A 8808                   CMP/EQ      #8,R0
    00000E2C 8905                   BT          L757
    00000E2E 6343                   MOV         R4,R3
    00000E30 6290                   MOV.B       @R9,R2
    00000E32 335C                   ADD         R5,R3
    00000E34 8431                   MOV.B       @(1,R3),R0
    00000E36 2029                   AND         R2,R0
    00000E38 8031                   MOV.B       R0,@(1,R3)
    00000E3A              L757:                             
    00000E3A 7401                   ADD         #1,R4
    00000E3C 34C3                   CMP/GE      R12,R4
    00000E3E 8BE6                   BF          L756
    00000E40              L755:                             
      Monochrome   844                    }
      Monochrome   845                    line = ~((unsigned char)~(bmp[i*(real_width>>3)+j] | (unsigned char)-1>>8-(width&7))<<shif
                         +t);
    00000E40 50F2                   MOV.L       @(8,R15),R0
      Monochrome   846                    screen[j] &= *p;
    00000E42 6743                   MOV         R4,R7
    00000E44 0067                   MUL.L       R6,R0
    00000E46 375C                   ADD         R5,R7
    00000E48 001A                   STS         MACL,R0
    00000E4A 304C                   ADD         R4,R0
    00000E4C 03AC                   MOV.B       @(R0,R10),R3
    00000E4E 84F4                   MOV.B       @(4,R15),R0
    00000E50 203B                   OR          R3,R0
    00000E52 6007                   NOT         R0,R0
    00000E54 600C                   EXTU.B      R0,R0
    00000E56 40ED                   SHLD        R14,R0
    00000E58 6007                   NOT         R0,R0
    00000E5A 2F01                   MOV.W       R0,@R15
    00000E5C 63D0                   MOV.B       @R13,R3
      Monochrome   847                    if(shift!=8 && x+real_width<129) screen[j+1] &= *(p+1);
    00000E5E 60E3                   MOV         R14,R0
    00000E60 6270                   MOV.B       @R7,R2
    00000E62 8808                   CMP/EQ      #8,R0
    00000E64 2239                   AND         R3,R2
    00000E66 8D07                   BT/S        L758
    00000E68 2720                   MOV.B       R2,@R7
    00000E6A 9267                   MOV.W       L920,R2    ; H'0081
    00000E6C 3B23                   CMP/GE      R2,R11
    00000E6E 8903                   BT          L758
    00000E70 6390                   MOV.B       @R9,R3
    00000E72 8471                   MOV.B       @(1,R7),R0
    00000E74 2039                   AND         R3,R0
    00000E76 8071                   MOV.B       R0,@(1,R7)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   51


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000E78              L758:                             
      Monochrome   848                    screen += 16;
    00000E78 7510                   ADD         #16,R5
    00000E7A 7601                   ADD         #1,R6
    00000E7C              L753:                             
    00000E7C 53F5                   MOV.L       @(20,R15),R3
    00000E7E 3633                   CMP/GE      R3,R6
    00000E80 8BBD                   BF          L754
    00000E82              L750:                             
      Monochrome   849            }
      Monochrome   850    }
    00000E82 7F18                   ADD         #24,R15
    00000E84 4F16                   LDS.L       @R15+,MACL
    00000E86 4F26                   LDS.L       @R15+,PR
    00000E88 68F6                   MOV.L       @R15+,R8
    00000E8A 69F6                   MOV.L       @R15+,R9
    00000E8C 6AF6                   MOV.L       @R15+,R10
    00000E8E 6BF6                   MOV.L       @R15+,R11
    00000E90 6CF6                   MOV.L       @R15+,R12
    00000E92 6DF6                   MOV.L       @R15+,R13
    00000E94 000B                   RTS
    00000E96 6EF6                   MOV.L       @R15+,R14
      Monochrome   851    #endif
      Monochrome   852    
      Monochrome   853    #ifdef ML_BMP_XOR
      Monochrome   854    void ML_bmp_xor(const unsigned char *bmp, int x, int y, int width, int height)
      Monochrome   855    {
      Monochrome   856            unsigned short line;
      Monochrome   857            char shift, *screen, *p=(char*)&line;
      Monochrome   858            int i, j, begin=0, end=height, real_width=(width-1>>3<<3)+8;
      Monochrome   859            if(!bmp || x<0 || x>128-width || y<1-height || y>63 || width<1 || height<1) return;
      Monochrome   860            if(y < 0) begin = -y;
      Monochrome   861            if(y+height > 64) end = 64-y;
      Monochrome   862            shift = 8-(x&7);
      Monochrome   863            screen = ML_vram_adress()+(y+begin<<4)+(x>>3);
      Monochrome   864            for(i=begin ; i<end ; i++)
      Monochrome   865            {
      Monochrome   866                    for(j=0 ; j<width-1>>3 ; j++)
      Monochrome   867                    {
      Monochrome   868                            line = bmp[i*(real_width>>3)+j]<<shift;
      Monochrome   869                            screen[j] ^= *p;
      Monochrome   870                            if(shift!=8) screen[j+1] ^= *(p+1);
      Monochrome   871                    }
      Monochrome   872                    line = (bmp[i*(real_width>>3)+j] & -1<<(real_width-width))<<shift;
      Monochrome   873                    screen[j] ^= *p;
      Monochrome   874                    if(shift!=8 && x+real_width<129) screen[j+1] ^= *(p+1);
      Monochrome   875                    screen += 16;
      Monochrome   876            }
      Monochrome   877    }
      Monochrome   878    #endif
      Monochrome   879    
      Monochrome   880    #ifdef ML_BMP_OR_CL
      Monochrome   881    void ML_bmp_or_cl(const unsigned char *bmp, int x, int y, int width, int height)
    00000E98              _ML_bmp_or_cl:                   ; function: ML_bmp_or_cl
                                                           ; frame size=92
    00000E98 2FE6                   MOV.L       R14,@-R15
    00000E9A E05C                   MOV         #92,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   52


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000E9C 2FD6                   MOV.L       R13,@-R15
    00000E9E 2FC6                   MOV.L       R12,@-R15
    00000EA0 2FB6                   MOV.L       R11,@-R15
    00000EA2 2FA6                   MOV.L       R10,@-R15
    00000EA4 2F96                   MOV.L       R9,@-R15
    00000EA6 6963                   MOV         R6,R9
    00000EA8 2F86                   MOV.L       R8,@-R15
      Monochrome   882    {
      Monochrome   883            unsigned short line;
      Monochrome   884            char shift, *screen, *p;
      Monochrome   885            int i, j, real_width, begin_x, end_x, begin_y, end_y;
      Monochrome   886            char bool1=1, bool2=1, bool3;
    00000EAA E601                   MOV         #1,R6
    00000EAC 4F22                   STS.L       PR,@-R15
    00000EAE 4F12                   STS.L       MACL,@-R15
    00000EB0 7FC8                   ADD         #-56,R15
    00000EB2 1F45                   MOV.L       R4,@(20,R15)
    00000EB4 1F72                   MOV.L       R7,@(8,R15)
    00000EB6 04FE                   MOV.L       @(R0,R15),R4
    00000EB8 E01C                   MOV         #28,R0
    00000EBA 0F64                   MOV.B       R6,@(R0,R15)
    00000EBC E034                   MOV         #52,R0
    00000EBE 0F64                   MOV.B       R6,@(R0,R15)
      Monochrome   887            if(!bmp || x<1-width || x>127 || y<1-height || y>63 || height<1 || width<1) return;
    00000EC0 53F5                   MOV.L       @(20,R15),R3
    00000EC2 2338                   TST         R3,R3
    00000EC4 8B01                   BF          L921
    00000EC6 A100                   BRA         L761
    00000EC8 0009                   NOP
    00000ECA              L921:                             
    00000ECA E201                   MOV         #1,R2
    00000ECC 53F2                   MOV.L       @(8,R15),R3
    00000ECE 3238                   SUB         R3,R2
    00000ED0 3523                   CMP/GE      R2,R5
    00000ED2 8901                   BT          L922
    00000ED4 A0F9                   BRA         L761
    00000ED6 0009                   NOP
    00000ED8              L922:                             
    00000ED8 E17F                   MOV         #127,R1
    00000EDA 3517                   CMP/GT      R1,R5
    00000EDC 8B01                   BF          L923
    00000EDE A0F4                   BRA         L761
    00000EE0 0009                   NOP
    00000EE2              L923:                             
    00000EE2 E001                   MOV         #1,R0
    00000EE4 3048                   SUB         R4,R0
    00000EE6 3903                   CMP/GE      R0,R9
    00000EE8 8901                   BT          L924
    00000EEA A0EE                   BRA         L761
    00000EEC 0009                   NOP
    00000EEE              L924:                             
    00000EEE E23F                   MOV         #63,R2
    00000EF0 3927                   CMP/GT      R2,R9
    00000EF2 8B01                   BF          L925
    00000EF4 A0E9                   BRA         L761
    00000EF6 0009                   NOP
    00000EF8              L925:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   53


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000EF8 E001                   MOV         #1,R0
    00000EFA 3403                   CMP/GE      R0,R4
    00000EFC 8901                   BT          L926
    00000EFE A0E4                   BRA         L761
    00000F00 0009                   NOP
    00000F02              L926:                             
    00000F02 52F2                   MOV.L       @(8,R15),R2
    00000F04 3203                   CMP/GE      R0,R2
    00000F06 8901                   BT          L927
    00000F08 A0DF                   BRA         L761
    00000F0A 0009                   NOP
    00000F0C              L927:                             
      Monochrome   888            p = (char*)&line;
      Monochrome   889            real_width = (width-1>>3<<3)+8;
    00000F0C 52F2                   MOV.L       @(8,R15),R2
    00000F0E 6BF3                   MOV         R15,R11
    00000F10 72FF                   ADD         #-1,R2
    00000F12 4221                   SHAR        R2
    00000F14 4221                   SHAR        R2
    00000F16 4221                   SHAR        R2
    00000F18 4208                   SHLL2       R2
    00000F1A 4200                   SHLL        R2
    00000F1C 7208                   ADD         #8,R2
      Monochrome   890            if(y < 0) begin_y = -y;
    00000F1E 4911                   CMP/PZ      R9
    00000F20 1F23                   MOV.L       R2,@(12,R15)
    00000F22 8D02                   BT/S        L762
    00000F24 E600                   MOV         #0,R6
    00000F26 A001                   BRA         L763
    00000F28 689B                   NEG         R9,R8
    00000F2A              L762:                             
      Monochrome   891            else begin_y = 0;
    00000F2A 6863                   MOV         R6,R8
    00000F2C              L763:                             
      Monochrome   892            if(y+height > 64) end_y = 64-y;
    00000F2C E740                   MOV         #64,R7
    00000F2E 6393                   MOV         R9,R3
    00000F30 334C                   ADD         R4,R3
    00000F32 3377                   CMP/GT      R7,R3
    00000F34 8B03                   BF          L764
    00000F36 3798                   SUB         R9,R7
    00000F38 A002                   BRA         L765
    00000F3A 1F7C                   MOV.L       R7,@(48,R15)
    00000F3C              L920:                             
    00000F3C 0081                   .DATA.W     H'0081
    00000F3E              L764:                             
      Monochrome   893            else end_y = height;
    00000F3E 1F4C                   MOV.L       R4,@(48,R15)
    00000F40              L765:                             
      Monochrome   894            shift = 8-(x&7);
    00000F40 E307                   MOV         #7,R3
    00000F42 2359                   AND         R5,R3
    00000F44 E408                   MOV         #8,R4
    00000F46 3438                   SUB         R3,R4
    00000F48 4511                   CMP/PZ      R5
    00000F4A 8D0A                   BT/S        L766
    00000F4C 6E4E                   EXTS.B      R4,R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   54


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome   895            if(x<0)
      Monochrome   896            {
      Monochrome   897                    begin_x = -x>>3;
    00000F4E 6C5B                   NEG         R5,R12
    00000F50 4C21                   SHAR        R12
    00000F52 4C21                   SHAR        R12
    00000F54 4C21                   SHAR        R12
      Monochrome   898                    if(shift != 8) bool1 = 0;
    00000F56 60E3                   MOV         R14,R0
    00000F58 8808                   CMP/EQ      #8,R0
    00000F5A 8903                   BT          L768
    00000F5C E01C                   MOV         #28,R0
    00000F5E A001                   BRA         L768
    00000F60 0F64                   MOV.B       R6,@(R0,R15)
    00000F62              L766:                             
      Monochrome   899            } else begin_x = 0;
    00000F62 6C63                   MOV         R6,R12
    00000F64              L768:                             
    00000F64 9342                   MOV.W       L928,R3    ; H'0080
    00000F66 6253                   MOV         R5,R2
    00000F68 4221                   SHAR        R2
    00000F6A 4221                   SHAR        R2
    00000F6C 4221                   SHAR        R2
    00000F6E 1F21                   MOV.L       R2,@(4,R15)
    00000F70 54F3                   MOV.L       @(12,R15),R4
    00000F72 74FF                   ADD         #-1,R4
    00000F74 51F3                   MOV.L       @(12,R15),R1
    00000F76 4421                   SHAR        R4
    00000F78 4421                   SHAR        R4
    00000F7A 4421                   SHAR        R4
    00000F7C 315C                   ADD         R5,R1
    00000F7E 3137                   CMP/GT      R3,R1
    00000F80 8B04                   BF          L769
      Monochrome   900            if(x+real_width > 128) end_x = 15-(x>>3), bool2 = 0;
    00000F82 ED0F                   MOV         #15,R13
    00000F84 3D28                   SUB         R2,R13
    00000F86 E034                   MOV         #52,R0
    00000F88 A001                   BRA         L770
    00000F8A 0F64                   MOV.B       R6,@(R0,R15)
    00000F8C              L769:                             
      Monochrome   901            else end_x = real_width-1>>3;
    00000F8C 6D43                   MOV         R4,R13
    00000F8E              L770:                             
      Monochrome   902            bool3 = (end_x == real_width-1>>3);
    00000F8E 3D40                   CMP/EQ      R4,R13
    00000F90 0029                   MOVT        R0
    00000F92 61F3                   MOV         R15,R1
    00000F94 712C                   ADD         #44,R1
      Monochrome   903            screen = ML_vram_adress()+(y+begin_y<<4)+(x>>3);
    00000F96 B833                   BSR         _ML_vram_adress
    00000F98 2100                   MOV.B       R0,@R1
    00000F9A 6A93                   MOV         R9,R10
    00000F9C 53F1                   MOV.L       @(4,R15),R3
    00000F9E 61B3                   MOV         R11,R1
      Monochrome   904    
      Monochrome   905            for(i=begin_y ; i<end_y ; i++)
    00000FA0 1F86                   MOV.L       R8,@(24,R15)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   55


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000FA2 3A8C                   ADD         R8,R10
    00000FA4 54F3                   MOV.L       @(12,R15),R4
    00000FA6 7101                   ADD         #1,R1
    00000FA8 4A08                   SHLL2       R10
    00000FAA 4A08                   SHLL2       R10
    00000FAC 3A0C                   ADD         R0,R10
    00000FAE 3A3C                   ADD         R3,R10
    00000FB0 4421                   SHAR        R4
    00000FB2 4421                   SHAR        R4
    00000FB4 4421                   SHAR        R4
    00000FB6 1F44                   MOV.L       R4,@(16,R15)
    00000FB8 53F6                   MOV.L       @(24,R15),R3
    00000FBA 0437                   MUL.L       R3,R4
    00000FBC 52F5                   MOV.L       @(20,R15),R2
    00000FBE 63C3                   MOV         R12,R3
    00000FC0 041A                   STS         MACL,R4
    00000FC2 6843                   MOV         R4,R8
    00000FC4 38DC                   ADD         R13,R8
    00000FC6 382C                   ADD         R2,R8
    00000FC8 6943                   MOV         R4,R9
    00000FCA 34CC                   ADD         R12,R4
    00000FCC 342C                   ADD         R2,R4
    00000FCE 7301                   ADD         #1,R3
    00000FD0 1F48                   MOV.L       R4,@(32,R15)
    00000FD2 1F11                   MOV.L       R1,@(4,R15)
    00000FD4 1F3A                   MOV.L       R3,@(40,R15)
    00000FD6 52F2                   MOV.L       @(8,R15),R2
    00000FD8 50F3                   MOV.L       @(12,R15),R0
    00000FDA 3028                   SUB         R2,R0
    00000FDC E1FF                   MOV         #-1,R1
    00000FDE 410C                   SHAD        R0,R1
    00000FE0 1F13                   MOV.L       R1,@(12,R15)
    00000FE2 55F4                   MOV.L       @(16,R15),R5
    00000FE4 1F59                   MOV.L       R5,@(36,R15)
    00000FE6 1F54                   MOV.L       R5,@(16,R15)
    00000FE8 A06B                   BRA         L771
    00000FEA 1F52                   MOV.L       R5,@(8,R15)
    00000FEC              L928:                             
    00000FEC 0080                   .DATA.W     H'0080
    00000FEE              L772:                             
      Monochrome   906            {
      Monochrome   907                    if(begin_x < end_x)
    00000FEE 3CD3                   CMP/GE      R13,R12
    00000FF0 8938                   BT          L773
    00000FF2 64C3                   MOV         R12,R4
      Monochrome   908                    {
      Monochrome   909                            line = bmp[i*(real_width>>3)+begin_x] << shift;
    00000FF4 53F8                   MOV.L       @(32,R15),R3
    00000FF6 E01C                   MOV         #28,R0
    00000FF8 6230                   MOV.B       @R3,R2
    00000FFA 622C                   EXTU.B      R2,R2
    00000FFC 42ED                   SHLD        R14,R2
    00000FFE 2F21                   MOV.W       R2,@R15
    00001000 03FC                   MOV.B       @(R0,R15),R3
    00001002 2338                   TST         R3,R3
    00001004 8D04                   BT/S        L774
    00001006 34AC                   ADD         R10,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   56


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome   910                            if(bool1) screen[begin_x] |= *p;
    00001008 63B0                   MOV.B       @R11,R3
    0000100A 6140                   MOV.B       @R4,R1
    0000100C 213B                   OR          R3,R1
    0000100E 2410                   MOV.B       R1,@R4
    00001010              L774:                             
      Monochrome   911                            if(shift!=8) screen[begin_x+1] |= *(p+1);
    00001010 60E3                   MOV         R14,R0
    00001012 8808                   CMP/EQ      #8,R0
    00001014 8904                   BT          L775
    00001016 52F1                   MOV.L       @(4,R15),R2
    00001018 8441                   MOV.B       @(1,R4),R0
    0000101A 6320                   MOV.B       @R2,R3
    0000101C 203B                   OR          R3,R0
    0000101E 8041                   MOV.B       R0,@(1,R4)
    00001020              L775:                             
      Monochrome   912                            for(j=begin_x+1 ; j<end_x ; j++)
    00001020 54FA                   MOV.L       @(40,R15),R4
    00001022 6643                   MOV         R4,R6
    00001024 53F5                   MOV.L       @(20,R15),R3
    00001026 34D3                   CMP/GE      R13,R4
    00001028 36AC                   ADD         R10,R6
    0000102A 6563                   MOV         R6,R5
    0000102C 7501                   ADD         #1,R5
    0000102E 6763                   MOV         R6,R7
    00001030 6693                   MOV         R9,R6
    00001032 364C                   ADD         R4,R6
    00001034 8D16                   BT/S        L773
    00001036 363C                   ADD         R3,R6
    00001038              L777:                             
      Monochrome   913                            {
      Monochrome   914                                    line = bmp[i*(real_width>>3)+j] << shift;
    00001038 6360                   MOV.B       @R6,R3
      Monochrome   915                                    screen[j] |= *p;
      Monochrome   916                                    if(shift!=8) screen[j+1] |= *(p+1);
    0000103A 60E3                   MOV         R14,R0
    0000103C 633C                   EXTU.B      R3,R3
    0000103E 43ED                   SHLD        R14,R3
    00001040 2F31                   MOV.W       R3,@R15
    00001042 8808                   CMP/EQ      #8,R0
    00001044 62B0                   MOV.B       @R11,R2
    00001046 6170                   MOV.B       @R7,R1
    00001048 212B                   OR          R2,R1
    0000104A 8D05                   BT/S        L778
    0000104C 2710                   MOV.B       R1,@R7
    0000104E 52F1                   MOV.L       @(4,R15),R2
    00001050 6150                   MOV.B       @R5,R1
    00001052 6320                   MOV.B       @R2,R3
    00001054 213B                   OR          R3,R1
    00001056 2510                   MOV.B       R1,@R5
    00001058              L778:                             
    00001058 7401                   ADD         #1,R4
    0000105A 7501                   ADD         #1,R5
    0000105C 7701                   ADD         #1,R7
    0000105E 34D3                   CMP/GE      R13,R4
    00001060 8FEA                   BF/S        L777
    00001062 7601                   ADD         #1,R6




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   57


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001064              L773:                             
      Monochrome   917                            }
      Monochrome   918                    }
      Monochrome   919                    line = bmp[i*(real_width>>3)+end_x];
    00001064 6280                   MOV.B       @R8,R2
      Monochrome   920                    if(bool3) line &= -1<<real_width-width;
    00001066 E02C                   MOV         #44,R0
    00001068 622C                   EXTU.B      R2,R2
    0000106A 2F21                   MOV.W       R2,@R15
    0000106C 03FC                   MOV.B       @(R0,R15),R3
    0000106E 2338                   TST         R3,R3
    00001070 8903                   BT          L779
    00001072 53F3                   MOV.L       @(12,R15),R3
    00001074 61F1                   MOV.W       @R15,R1
    00001076 2139                   AND         R3,R1
    00001078 2F11                   MOV.W       R1,@R15
    0000107A              L779:                             
    0000107A 64D3                   MOV         R13,R4
      Monochrome   921                    line <<= shift;
    0000107C 62F1                   MOV.W       @R15,R2
    0000107E 3CD3                   CMP/GE      R13,R12
    00001080 42ED                   SHLD        R14,R2
    00001082 2F21                   MOV.W       R2,@R15
    00001084 8F04                   BF/S        L781
    00001086 34AC                   ADD         R10,R4
    00001088 E01C                   MOV         #28,R0
    0000108A 01FC                   MOV.B       @(R0,R15),R1
    0000108C 2118                   TST         R1,R1
    0000108E 8903                   BT          L780
    00001090              L781:                             
      Monochrome   922                    if(begin_x < end_x || bool1) screen[end_x] |= *p;
    00001090 63B0                   MOV.B       @R11,R3
    00001092 6240                   MOV.B       @R4,R2
    00001094 223B                   OR          R3,R2
    00001096 2420                   MOV.B       R2,@R4
    00001098              L780:                             
      Monochrome   923                    if(bool2) screen[end_x+1] |= *(p+1);
    00001098 E034                   MOV         #52,R0
    0000109A 01FC                   MOV.B       @(R0,R15),R1
    0000109C 2118                   TST         R1,R1
    0000109E 8D05                   BT/S        L782
      Monochrome   924                    screen += 16;
    000010A0 7A10                   ADD         #16,R10
    000010A2 51F1                   MOV.L       @(4,R15),R1
    000010A4 8441                   MOV.B       @(1,R4),R0
    000010A6 6310                   MOV.B       @R1,R3
    000010A8 203B                   OR          R3,R0
    000010AA 8041                   MOV.B       R0,@(1,R4)
    000010AC              L782:                             
    000010AC 53F6                   MOV.L       @(24,R15),R3
    000010AE 7301                   ADD         #1,R3
    000010B0 1F36                   MOV.L       R3,@(24,R15)
    000010B2 52F9                   MOV.L       @(36,R15),R2
    000010B4 51F4                   MOV.L       @(16,R15),R1
    000010B6 382C                   ADD         R2,R8
    000010B8 53F8                   MOV.L       @(32,R15),R3
    000010BA 391C                   ADD         R1,R9




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   58


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000010BC 50F2                   MOV.L       @(8,R15),R0
    000010BE 303C                   ADD         R3,R0
    000010C0 1F08                   MOV.L       R0,@(32,R15)
    000010C2              L771:                             
    000010C2 53FC                   MOV.L       @(48,R15),R3
    000010C4 51F6                   MOV.L       @(24,R15),R1
    000010C6 3133                   CMP/GE      R3,R1
    000010C8 8B91                   BF          L772
    000010CA              L761:                             
      Monochrome   925            }
      Monochrome   926    }
    000010CA 7F38                   ADD         #56,R15
    000010CC 4F16                   LDS.L       @R15+,MACL
    000010CE 4F26                   LDS.L       @R15+,PR
    000010D0 68F6                   MOV.L       @R15+,R8
    000010D2 69F6                   MOV.L       @R15+,R9
    000010D4 6AF6                   MOV.L       @R15+,R10
    000010D6 6BF6                   MOV.L       @R15+,R11
    000010D8 6CF6                   MOV.L       @R15+,R12
    000010DA 6DF6                   MOV.L       @R15+,R13
    000010DC 000B                   RTS
    000010DE 6EF6                   MOV.L       @R15+,R14
      Monochrome   927    #endif
      Monochrome   928    
      Monochrome   929    #ifdef ML_BMP_AND_CL
      Monochrome   930    void ML_bmp_and_cl(const unsigned char *bmp, int x, int y, int width, int height)
    000010E0              _ML_bmp_and_cl:                  ; function: ML_bmp_and_cl
                                                           ; frame size=92
    000010E0 2FE6                   MOV.L       R14,@-R15
    000010E2 E05C                   MOV         #92,R0
    000010E4 2FD6                   MOV.L       R13,@-R15
    000010E6 2FC6                   MOV.L       R12,@-R15
    000010E8 2FB6                   MOV.L       R11,@-R15
    000010EA 2FA6                   MOV.L       R10,@-R15
    000010EC 2F96                   MOV.L       R9,@-R15
    000010EE 6963                   MOV         R6,R9
    000010F0 2F86                   MOV.L       R8,@-R15
      Monochrome   931    {
      Monochrome   932            unsigned short line;
      Monochrome   933            char shift, *screen, *p;
      Monochrome   934            int i, j, real_width, begin_x, end_x, begin_y, end_y;
      Monochrome   935            char bool1=1, bool2=1, bool3;
    000010F2 E601                   MOV         #1,R6
    000010F4 4F22                   STS.L       PR,@-R15
    000010F6 4F12                   STS.L       MACL,@-R15
    000010F8 7FC8                   ADD         #-56,R15
    000010FA 1F45                   MOV.L       R4,@(20,R15)
    000010FC 1F72                   MOV.L       R7,@(8,R15)
    000010FE 04FE                   MOV.L       @(R0,R15),R4
    00001100 E01C                   MOV         #28,R0
    00001102 0F64                   MOV.B       R6,@(R0,R15)
    00001104 E034                   MOV         #52,R0
    00001106 0F64                   MOV.B       R6,@(R0,R15)
      Monochrome   936            if(!bmp || x<1-width || x>127 || y<1-height || y>63 || height<1 || width<1) return;
    00001108 53F5                   MOV.L       @(20,R15),R3
    0000110A 2338                   TST         R3,R3
    0000110C 8B01                   BF          L929




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   59


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000110E A10A                   BRA         L785
    00001110 0009                   NOP
    00001112              L929:                             
    00001112 E201                   MOV         #1,R2
    00001114 53F2                   MOV.L       @(8,R15),R3
    00001116 3238                   SUB         R3,R2
    00001118 3523                   CMP/GE      R2,R5
    0000111A 8901                   BT          L930
    0000111C A103                   BRA         L785
    0000111E 0009                   NOP
    00001120              L930:                             
    00001120 E17F                   MOV         #127,R1
    00001122 3517                   CMP/GT      R1,R5
    00001124 8B01                   BF          L931
    00001126 A0FE                   BRA         L785
    00001128 0009                   NOP
    0000112A              L931:                             
    0000112A E001                   MOV         #1,R0
    0000112C 3048                   SUB         R4,R0
    0000112E 3903                   CMP/GE      R0,R9
    00001130 8901                   BT          L932
    00001132 A0F8                   BRA         L785
    00001134 0009                   NOP
    00001136              L932:                             
    00001136 E23F                   MOV         #63,R2
    00001138 3927                   CMP/GT      R2,R9
    0000113A 8B01                   BF          L933
    0000113C A0F3                   BRA         L785
    0000113E 0009                   NOP
    00001140              L933:                             
    00001140 E001                   MOV         #1,R0
    00001142 3403                   CMP/GE      R0,R4
    00001144 8901                   BT          L934
    00001146 A0EE                   BRA         L785
    00001148 0009                   NOP
    0000114A              L934:                             
    0000114A 52F2                   MOV.L       @(8,R15),R2
    0000114C 3203                   CMP/GE      R0,R2
    0000114E 8901                   BT          L935
    00001150 A0E9                   BRA         L785
    00001152 0009                   NOP
    00001154              L935:                             
      Monochrome   937            p = (char*)&line;
      Monochrome   938            real_width = (width-1>>3<<3)+8;
    00001154 52F2                   MOV.L       @(8,R15),R2
    00001156 6BF3                   MOV         R15,R11
    00001158 72FF                   ADD         #-1,R2
    0000115A 4221                   SHAR        R2
    0000115C 4221                   SHAR        R2
    0000115E 4221                   SHAR        R2
    00001160 4208                   SHLL2       R2
    00001162 4200                   SHLL        R2
    00001164 7208                   ADD         #8,R2
      Monochrome   939            if(y < 0) begin_y = -y;
    00001166 4911                   CMP/PZ      R9
    00001168 1F23                   MOV.L       R2,@(12,R15)
    0000116A 8D02                   BT/S        L786




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   60


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000116C E600                   MOV         #0,R6
    0000116E A001                   BRA         L787
    00001170 689B                   NEG         R9,R8
    00001172              L786:                             
      Monochrome   940            else begin_y = 0;
    00001172 6863                   MOV         R6,R8
    00001174              L787:                             
      Monochrome   941            if(y+height > 64) end_y = 64-y;
    00001174 E740                   MOV         #64,R7
    00001176 6393                   MOV         R9,R3
    00001178 334C                   ADD         R4,R3
    0000117A 3377                   CMP/GT      R7,R3
    0000117C 8B02                   BF          L788
    0000117E 3798                   SUB         R9,R7
    00001180 A001                   BRA         L789
    00001182 1F7C                   MOV.L       R7,@(48,R15)
    00001184              L788:                             
      Monochrome   942            else end_y = height;
    00001184 1F4C                   MOV.L       R4,@(48,R15)
    00001186              L789:                             
      Monochrome   943            shift = 8-(x&7);
    00001186 E307                   MOV         #7,R3
    00001188 2359                   AND         R5,R3
    0000118A E408                   MOV         #8,R4
    0000118C 3438                   SUB         R3,R4
    0000118E 4511                   CMP/PZ      R5
    00001190 8D0A                   BT/S        L790
    00001192 6E4E                   EXTS.B      R4,R14
      Monochrome   944            if(x<0)
      Monochrome   945            {
      Monochrome   946                    begin_x = -x>>3;
    00001194 6C5B                   NEG         R5,R12
    00001196 4C21                   SHAR        R12
    00001198 4C21                   SHAR        R12
    0000119A 4C21                   SHAR        R12
      Monochrome   947                    if(shift != 8) bool1 = 0;
    0000119C 60E3                   MOV         R14,R0
    0000119E 8808                   CMP/EQ      #8,R0
    000011A0 8903                   BT          L792
    000011A2 E01C                   MOV         #28,R0
    000011A4 A001                   BRA         L792
    000011A6 0F64                   MOV.B       R6,@(R0,R15)
    000011A8              L790:                             
      Monochrome   948            } else begin_x = 0;
    000011A8 6C63                   MOV         R6,R12
    000011AA              L792:                             
    000011AA 6253                   MOV         R5,R2
    000011AC 9342                   MOV.W       L936,R3    ; H'0080
    000011AE 4221                   SHAR        R2
    000011B0 4221                   SHAR        R2
    000011B2 4221                   SHAR        R2
    000011B4 1F21                   MOV.L       R2,@(4,R15)
    000011B6 54F3                   MOV.L       @(12,R15),R4
    000011B8 51F3                   MOV.L       @(12,R15),R1
    000011BA 74FF                   ADD         #-1,R4
    000011BC 4421                   SHAR        R4
    000011BE 4421                   SHAR        R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   61


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000011C0 4421                   SHAR        R4
    000011C2 315C                   ADD         R5,R1
    000011C4 3137                   CMP/GT      R3,R1
    000011C6 8B04                   BF          L793
      Monochrome   949            if(x+real_width > 128) end_x = 15-(x>>3), bool2 = 0;
    000011C8 ED0F                   MOV         #15,R13
    000011CA 3D28                   SUB         R2,R13
    000011CC E034                   MOV         #52,R0
    000011CE A001                   BRA         L794
    000011D0 0F64                   MOV.B       R6,@(R0,R15)
    000011D2              L793:                             
      Monochrome   950            else end_x = real_width-1>>3;
    000011D2 6D43                   MOV         R4,R13
    000011D4              L794:                             
      Monochrome   951            bool3 = (end_x == real_width-1>>3);
      Monochrome   952            screen = ML_vram_adress()+(y+begin_y<<4)+(x>>3);
    000011D4 D318                   MOV.L       L936+4,R3  ; _ML_vram_adress
    000011D6 3D40                   CMP/EQ      R4,R13
    000011D8 0029                   MOVT        R0
    000011DA 61F3                   MOV         R15,R1
    000011DC 712C                   ADD         #44,R1
    000011DE 430B                   JSR         @R3
    000011E0 2100                   MOV.B       R0,@R1
    000011E2 6A93                   MOV         R9,R10
    000011E4 53F1                   MOV.L       @(4,R15),R3
    000011E6 61B3                   MOV         R11,R1
      Monochrome   953    
      Monochrome   954            for(i=begin_y ; i<end_y ; i++)
    000011E8 1F86                   MOV.L       R8,@(24,R15)
    000011EA 3A8C                   ADD         R8,R10
    000011EC 54F3                   MOV.L       @(12,R15),R4
    000011EE 7101                   ADD         #1,R1
    000011F0 4A08                   SHLL2       R10
    000011F2 4A08                   SHLL2       R10
    000011F4 3A0C                   ADD         R0,R10
    000011F6 3A3C                   ADD         R3,R10
    000011F8 4421                   SHAR        R4
    000011FA 4421                   SHAR        R4
    000011FC 4421                   SHAR        R4
    000011FE 1F44                   MOV.L       R4,@(16,R15)
    00001200 53F6                   MOV.L       @(24,R15),R3
    00001202 0437                   MUL.L       R3,R4
    00001204 52F5                   MOV.L       @(20,R15),R2
    00001206 63C3                   MOV         R12,R3
    00001208 041A                   STS         MACL,R4
    0000120A 6843                   MOV         R4,R8
    0000120C 38DC                   ADD         R13,R8
    0000120E 382C                   ADD         R2,R8
    00001210 6943                   MOV         R4,R9
    00001212 34CC                   ADD         R12,R4
    00001214 342C                   ADD         R2,R4
    00001216 7301                   ADD         #1,R3
    00001218 1F48                   MOV.L       R4,@(32,R15)
    0000121A 1F11                   MOV.L       R1,@(4,R15)
    0000121C 1F3A                   MOV.L       R3,@(40,R15)
    0000121E 52F2                   MOV.L       @(8,R15),R2
    00001220 50F3                   MOV.L       @(12,R15),R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   62


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001222 3028                   SUB         R2,R0
    00001224 E1FF                   MOV         #-1,R1
    00001226 410C                   SHAD        R0,R1
    00001228 1F13                   MOV.L       R1,@(12,R15)
    0000122A 55F4                   MOV.L       @(16,R15),R5
    0000122C 1F59                   MOV.L       R5,@(36,R15)
    0000122E 1F54                   MOV.L       R5,@(16,R15)
    00001230 A075                   BRA         L795
    00001232 1F52                   MOV.L       R5,@(8,R15)
    00001234              L936:                             
    00001234 0080                   .DATA.W     H'0080
    00001236 0000                   .DATA.W     0
    00001238 <00000000>             .DATA.L     _ML_vram_adress
    0000123C              L796:                             
      Monochrome   955            {
      Monochrome   956                    if(begin_x < end_x)
    0000123C 3CD3                   CMP/GE      R13,R12
    0000123E 893C                   BT          L797
      Monochrome   957    
      Monochrome   958                    {
      Monochrome   959                            line = ~((unsigned char)~bmp[i*(real_width>>3)+begin_x]<<shift);
    00001240 53F8                   MOV.L       @(32,R15),R3
    00001242 64C3                   MOV         R12,R4
    00001244 6230                   MOV.B       @R3,R2
    00001246 E01C                   MOV         #28,R0
    00001248 6227                   NOT         R2,R2
    0000124A 622C                   EXTU.B      R2,R2
    0000124C 42ED                   SHLD        R14,R2
    0000124E 6227                   NOT         R2,R2
    00001250 2F21                   MOV.W       R2,@R15
    00001252 03FC                   MOV.B       @(R0,R15),R3
    00001254 2338                   TST         R3,R3
    00001256 8D04                   BT/S        L798
    00001258 34AC                   ADD         R10,R4
      Monochrome   960                            if(bool1) screen[begin_x] &= *p;
    0000125A 63B0                   MOV.B       @R11,R3
    0000125C 6140                   MOV.B       @R4,R1
    0000125E 2139                   AND         R3,R1
    00001260 2410                   MOV.B       R1,@R4
    00001262              L798:                             
      Monochrome   961                            if(shift!=8) screen[begin_x+1] &= *(p+1);
    00001262 60E3                   MOV         R14,R0
    00001264 8808                   CMP/EQ      #8,R0
    00001266 8904                   BT          L799
    00001268 52F1                   MOV.L       @(4,R15),R2
    0000126A 6320                   MOV.B       @R2,R3
    0000126C 8441                   MOV.B       @(1,R4),R0
    0000126E 2039                   AND         R3,R0
    00001270 8041                   MOV.B       R0,@(1,R4)
    00001272              L799:                             
      Monochrome   962                            for(j=begin_x+1 ; j<end_x ; j++)
    00001272 54FA                   MOV.L       @(40,R15),R4
    00001274 53F5                   MOV.L       @(20,R15),R3
    00001276 34D3                   CMP/GE      R13,R4
    00001278 6643                   MOV         R4,R6
    0000127A 36AC                   ADD         R10,R6
    0000127C 6563                   MOV         R6,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   63


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000127E 7501                   ADD         #1,R5
    00001280 6763                   MOV         R6,R7
    00001282 6693                   MOV         R9,R6
    00001284 364C                   ADD         R4,R6
    00001286 8D18                   BT/S        L797
    00001288 363C                   ADD         R3,R6
    0000128A              L801:                             
      Monochrome   963                            {
      Monochrome   964                                    line = ~((unsigned char)~bmp[i*(real_width>>3)+j]<<shift);
      Monochrome   965                                    screen[j] &= *p;
      Monochrome   966                                    if(shift!=8) screen[j+1] &= *(p+1);
    0000128A 60E3                   MOV         R14,R0
    0000128C 6360                   MOV.B       @R6,R3
    0000128E 8808                   CMP/EQ      #8,R0
    00001290 6337                   NOT         R3,R3
    00001292 633C                   EXTU.B      R3,R3
    00001294 43ED                   SHLD        R14,R3
    00001296 6337                   NOT         R3,R3
    00001298 2F31                   MOV.W       R3,@R15
    0000129A 62B0                   MOV.B       @R11,R2
    0000129C 6170                   MOV.B       @R7,R1
    0000129E 2129                   AND         R2,R1
    000012A0 8D05                   BT/S        L802
    000012A2 2710                   MOV.B       R1,@R7
    000012A4 52F1                   MOV.L       @(4,R15),R2
    000012A6 6320                   MOV.B       @R2,R3
    000012A8 6150                   MOV.B       @R5,R1
    000012AA 2139                   AND         R3,R1
    000012AC 2510                   MOV.B       R1,@R5
    000012AE              L802:                             
    000012AE 7401                   ADD         #1,R4
    000012B0 7501                   ADD         #1,R5
    000012B2 7701                   ADD         #1,R7
    000012B4 34D3                   CMP/GE      R13,R4
    000012B6 8FE8                   BF/S        L801
    000012B8 7601                   ADD         #1,R6
    000012BA              L797:                             
      Monochrome   967                            }
      Monochrome   968                    }
      Monochrome   969                    line = (unsigned char)~bmp[i*(real_width>>3)+end_x];
      Monochrome   970                    if(bool3) line &= -1<<real_width-width;
    000012BA E02C                   MOV         #44,R0
    000012BC 6280                   MOV.B       @R8,R2
    000012BE 6227                   NOT         R2,R2
    000012C0 622C                   EXTU.B      R2,R2
    000012C2 2F21                   MOV.W       R2,@R15
    000012C4 03FC                   MOV.B       @(R0,R15),R3
    000012C6 2338                   TST         R3,R3
    000012C8 8903                   BT          L803
    000012CA 53F3                   MOV.L       @(12,R15),R3
    000012CC 61F1                   MOV.W       @R15,R1
    000012CE 2139                   AND         R3,R1
    000012D0 2F11                   MOV.W       R1,@R15
    000012D2              L803:                             
    000012D2 64D3                   MOV         R13,R4
      Monochrome   971                    line = ~(line << shift);
    000012D4 62F1                   MOV.W       @R15,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   64


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000012D6 3CD3                   CMP/GE      R13,R12
    000012D8 622D                   EXTU.W      R2,R2
    000012DA 42ED                   SHLD        R14,R2
    000012DC 6227                   NOT         R2,R2
    000012DE 2F21                   MOV.W       R2,@R15
    000012E0 8F04                   BF/S        L805
    000012E2 34AC                   ADD         R10,R4
    000012E4 E01C                   MOV         #28,R0
    000012E6 01FC                   MOV.B       @(R0,R15),R1
    000012E8 2118                   TST         R1,R1
    000012EA 8903                   BT          L804
    000012EC              L805:                             
      Monochrome   972                    if(begin_x < end_x || bool1) screen[end_x] &= *p;
    000012EC 63B0                   MOV.B       @R11,R3
    000012EE 6240                   MOV.B       @R4,R2
    000012F0 2239                   AND         R3,R2
    000012F2 2420                   MOV.B       R2,@R4
    000012F4              L804:                             
      Monochrome   973                    if(bool2) screen[end_x+1] &= *(p+1);
    000012F4 E034                   MOV         #52,R0
    000012F6 01FC                   MOV.B       @(R0,R15),R1
    000012F8 2118                   TST         R1,R1
    000012FA 8D05                   BT/S        L806
      Monochrome   974                    screen += 16;
    000012FC 7A10                   ADD         #16,R10
    000012FE 51F1                   MOV.L       @(4,R15),R1
    00001300 8441                   MOV.B       @(1,R4),R0
    00001302 6310                   MOV.B       @R1,R3
    00001304 2039                   AND         R3,R0
    00001306 8041                   MOV.B       R0,@(1,R4)
    00001308              L806:                             
    00001308 53F6                   MOV.L       @(24,R15),R3
    0000130A 7301                   ADD         #1,R3
    0000130C 1F36                   MOV.L       R3,@(24,R15)
    0000130E 52F9                   MOV.L       @(36,R15),R2
    00001310 51F4                   MOV.L       @(16,R15),R1
    00001312 382C                   ADD         R2,R8
    00001314 53F8                   MOV.L       @(32,R15),R3
    00001316 391C                   ADD         R1,R9
    00001318 50F2                   MOV.L       @(8,R15),R0
    0000131A 303C                   ADD         R3,R0
    0000131C 1F08                   MOV.L       R0,@(32,R15)
    0000131E              L795:                             
    0000131E 53FC                   MOV.L       @(48,R15),R3
    00001320 51F6                   MOV.L       @(24,R15),R1
    00001322 3133                   CMP/GE      R3,R1
    00001324 8B8A                   BF          L796
    00001326              L785:                             
      Monochrome   975            }
      Monochrome   976    }
    00001326 7F38                   ADD         #56,R15
    00001328 4F16                   LDS.L       @R15+,MACL
    0000132A 4F26                   LDS.L       @R15+,PR
    0000132C 68F6                   MOV.L       @R15+,R8
    0000132E 69F6                   MOV.L       @R15+,R9
    00001330 6AF6                   MOV.L       @R15+,R10
    00001332 6BF6                   MOV.L       @R15+,R11




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   65


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001334 6CF6                   MOV.L       @R15+,R12
    00001336 6DF6                   MOV.L       @R15+,R13
    00001338 000B                   RTS
    0000133A 6EF6                   MOV.L       @R15+,R14
      Monochrome   977    #endif
      Monochrome   978    
      Monochrome   979    #ifdef ML_BMP_XOR_CL
      Monochrome   980    void ML_bmp_xor_cl(const unsigned char *bmp, int x, int y, int width, int height)
      Monochrome   981    {
      Monochrome   982            unsigned short line;
      Monochrome   983            char shift, *screen, *p;
      Monochrome   984            int i, j, real_width, begin_x, end_x, begin_y, end_y;
      Monochrome   985            char bool1=1, bool2=1, bool3;
      Monochrome   986            if(!bmp || x<1-width || x>127 || y<1-height || y>63 || height<1 || width<1) return;
      Monochrome   987            p = (char*)&line;
      Monochrome   988            real_width = (width-1>>3<<3)+8;
      Monochrome   989            if(y < 0) begin_y = -y;
      Monochrome   990            else begin_y = 0;
      Monochrome   991            if(y+height > 64) end_y = 64-y;
      Monochrome   992            else end_y = height;
      Monochrome   993            shift = 8-(x&7);
      Monochrome   994            if(x<0)
      Monochrome   995            {
      Monochrome   996                    begin_x = -x>>3;
      Monochrome   997                    if(shift != 8) bool1 = 0;
      Monochrome   998            } else begin_x = 0;
      Monochrome   999            if(x+real_width > 128) end_x = 15-(x>>3), bool2 = 0;
      Monochrome  1000            else end_x = real_width-1>>3;
      Monochrome  1001            bool3 = (end_x == real_width-1>>3);
      Monochrome  1002            screen = ML_vram_adress()+(y+begin_y<<4)+(x>>3);
      Monochrome  1003    
      Monochrome  1004            for(i=begin_y ; i<end_y ; i++)
      Monochrome  1005            {
      Monochrome  1006                    if(begin_x < end_x)
      Monochrome  1007                    {
      Monochrome  1008                            line = bmp[i*(real_width>>3)+begin_x] << shift;
      Monochrome  1009                            if(bool1) screen[begin_x] ^= *p;
      Monochrome  1010                            if(shift!=8) screen[begin_x+1] ^= *(p+1);
      Monochrome  1011                            for(j=begin_x+1 ; j<end_x ; j++)
      Monochrome  1012                            {
      Monochrome  1013                                    line = bmp[i*(real_width>>3)+j] << shift;
      Monochrome  1014                                    screen[j] ^= *p;
      Monochrome  1015                                    if(shift!=8) screen[j+1] ^= *(p+1);
      Monochrome  1016                            }
      Monochrome  1017                    }
      Monochrome  1018                    line = bmp[i*(real_width>>3)+end_x];
      Monochrome  1019                    if(bool3) line &= -1<<real_width-width;
      Monochrome  1020                    line <<= shift;
      Monochrome  1021                    if(begin_x < end_x || bool1) screen[end_x] ^= *p;
      Monochrome  1022                    if(bool2) screen[end_x+1] ^= *(p+1);
      Monochrome  1023                    screen += 16;
      Monochrome  1024            }
      Monochrome  1025    }
      Monochrome  1026    
      Monochrome  1027    #endif
      Monochrome  1028    
      Monochrome  1029    #ifdef ML_BMP_8_OR




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   66


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome  1030    void ML_bmp_8_or(const unsigned char *bmp, int x, int y)
    0000133C              _ML_bmp_8_or:                    ; function: ML_bmp_8_or
                                                           ; frame size=36
    0000133C 2FE6                   MOV.L       R14,@-R15
    0000133E 6E63                   MOV         R6,R14
    00001340 2FD6                   MOV.L       R13,@-R15
    00001342 6D53                   MOV         R5,R13
    00001344 2FC6                   MOV.L       R12,@-R15
    00001346 2FB6                   MOV.L       R11,@-R15
    00001348 2FA6                   MOV.L       R10,@-R15
      Monochrome  1031    {
      Monochrome  1032            unsigned short line;
      Monochrome  1033            char i, shift, begin=0, end=8, *screen, *p=(char*)&line;
    0000134A EB00                   MOV         #0,R11
    0000134C 2F96                   MOV.L       R9,@-R15
    0000134E 4F22                   STS.L       PR,@-R15
    00001350 7FF8                   ADD         #-8,R15
    00001352 1F41                   MOV.L       R4,@(4,R15)
      Monochrome  1034            if(!bmp || x<0 || x>120 || y<-7 || y>63) return;
    00001354 53F1                   MOV.L       @(4,R15),R3
    00001356 E408                   MOV         #8,R4
    00001358 6943                   MOV         R4,R9
    0000135A 2338                   TST         R3,R3
    0000135C 8D43                   BT/S        L809
    0000135E 6CF3                   MOV         R15,R12
    00001360 4D11                   CMP/PZ      R13
    00001362 8B40                   BF          L809
    00001364 E278                   MOV         #120,R2
    00001366 3D27                   CMP/GT      R2,R13
    00001368 893D                   BT          L809
    0000136A E1F9                   MOV         #-7,R1
    0000136C 3E13                   CMP/GE      R1,R14
    0000136E 8B3A                   BF          L809
    00001370 E03F                   MOV         #63,R0
    00001372 3E07                   CMP/GT      R0,R14
    00001374 8937                   BT          L809
      Monochrome  1035            if(y < 0) begin = -y;
    00001376 4E11                   CMP/PZ      R14
    00001378 8D01                   BT/S        L810
      Monochrome  1036            if(y > 56) end = 64-y;
    0000137A E338                   MOV         #56,R3
    0000137C 6BEB                   NEG         R14,R11
    0000137E              L810:                             
    0000137E 3E37                   CMP/GT      R3,R14
    00001380 8F02                   BF/S        L811
      Monochrome  1037            shift = 8-(x&7);
    00001382 E307                   MOV         #7,R3
    00001384 E940                   MOV         #64,R9
    00001386 39E8                   SUB         R14,R9
    00001388              L811:                             
      Monochrome  1038            screen = ML_vram_adress()+(y+begin<<4)+(x>>3);
    00001388 D24B                   MOV.L       L937,R2    ; _ML_vram_adress
    0000138A 23D9                   AND         R13,R3
    0000138C 6A43                   MOV         R4,R10
    0000138E 420B                   JSR         @R2
    00001390 3A38                   SUB         R3,R10
    00001392 63BE                   EXTS.B      R11,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   67


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001394 33EC                   ADD         R14,R3
    00001396 4308                   SHLL2       R3
    00001398 4308                   SHLL2       R3
    0000139A 303C                   ADD         R3,R0
    0000139C 53F1                   MOV.L       @(4,R15),R3
    0000139E 6EC3                   MOV         R12,R14
    000013A0 4D21                   SHAR        R13
    000013A2 4D21                   SHAR        R13
    000013A4 4D21                   SHAR        R13
    000013A6 6603                   MOV         R0,R6
    000013A8 36DC                   ADD         R13,R6
      Monochrome  1039            for(i=begin ; i<end ; i++)
    000013AA 65B3                   MOV         R11,R5
    000013AC 645E                   EXTS.B      R5,R4
    000013AE 343C                   ADD         R3,R4
    000013B0 679E                   EXTS.B      R9,R7
    000013B2 625E                   EXTS.B      R5,R2
    000013B4 3273                   CMP/GE      R7,R2
    000013B6 8D16                   BT/S        L809
    000013B8 7E01                   ADD         #1,R14
    000013BA              L813:                             
      Monochrome  1040            {
      Monochrome  1041                    line = bmp[i]<<shift;
    000013BA 6DAE                   EXTS.B      R10,R13
    000013BC 6340                   MOV.B       @R4,R3
      Monochrome  1042                    screen[0] |= *p;
      Monochrome  1043                    if(shift!=8) screen[1] |= *(p+1);
    000013BE 60D3                   MOV         R13,R0
    000013C0 633C                   EXTU.B      R3,R3
    000013C2 43DD                   SHLD        R13,R3
    000013C4 2F31                   MOV.W       R3,@R15
    000013C6 8808                   CMP/EQ      #8,R0
    000013C8 62C0                   MOV.B       @R12,R2
    000013CA 6160                   MOV.B       @R6,R1
    000013CC 212B                   OR          R2,R1
    000013CE 8D04                   BT/S        L814
    000013D0 2610                   MOV.B       R1,@R6
    000013D2 63E0                   MOV.B       @R14,R3
    000013D4 8461                   MOV.B       @(1,R6),R0
    000013D6 203B                   OR          R3,R0
    000013D8 8061                   MOV.B       R0,@(1,R6)
    000013DA              L814:                             
      Monochrome  1044                    screen += 16;
    000013DA 7610                   ADD         #16,R6
    000013DC 7501                   ADD         #1,R5
    000013DE 635E                   EXTS.B      R5,R3
    000013E0 3373                   CMP/GE      R7,R3
    000013E2 8FEA                   BF/S        L813
    000013E4 7401                   ADD         #1,R4
    000013E6              L809:                             
      Monochrome  1045            }
      Monochrome  1046    }
    000013E6 7F08                   ADD         #8,R15
    000013E8 4F26                   LDS.L       @R15+,PR
    000013EA 69F6                   MOV.L       @R15+,R9
    000013EC 6AF6                   MOV.L       @R15+,R10
    000013EE 6BF6                   MOV.L       @R15+,R11




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   68


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000013F0 6CF6                   MOV.L       @R15+,R12
    000013F2 6DF6                   MOV.L       @R15+,R13
    000013F4 000B                   RTS
    000013F6 6EF6                   MOV.L       @R15+,R14
      Monochrome  1047    #endif
      Monochrome  1048    
      Monochrome  1049    #ifdef ML_BMP_8_AND
      Monochrome  1050    void ML_bmp_8_and(const unsigned char *bmp, int x, int y)
    000013F8              _ML_bmp_8_and:                   ; function: ML_bmp_8_and
                                                           ; frame size=36
    000013F8 2FE6                   MOV.L       R14,@-R15
    000013FA 6E63                   MOV         R6,R14
    000013FC 2FD6                   MOV.L       R13,@-R15
    000013FE 6D53                   MOV         R5,R13
    00001400 2FC6                   MOV.L       R12,@-R15
    00001402 2FB6                   MOV.L       R11,@-R15
    00001404 2FA6                   MOV.L       R10,@-R15
      Monochrome  1051    {
      Monochrome  1052            unsigned short line;
      Monochrome  1053            char i, shift, begin=0, end=8, *screen, *p=(char*)&line;
    00001406 EB00                   MOV         #0,R11
    00001408 2F96                   MOV.L       R9,@-R15
    0000140A 4F22                   STS.L       PR,@-R15
    0000140C 7FF8                   ADD         #-8,R15
    0000140E 1F41                   MOV.L       R4,@(4,R15)
      Monochrome  1054            if(!bmp || x<0 || x>120 || y<-7 || y>63) return;
    00001410 53F1                   MOV.L       @(4,R15),R3
    00001412 E408                   MOV         #8,R4
    00001414 6943                   MOV         R4,R9
    00001416 2338                   TST         R3,R3
    00001418 8D45                   BT/S        L817
    0000141A 6CF3                   MOV         R15,R12
    0000141C 4D11                   CMP/PZ      R13
    0000141E 8B42                   BF          L817
    00001420 E278                   MOV         #120,R2
    00001422 3D27                   CMP/GT      R2,R13
    00001424 893F                   BT          L817
    00001426 E1F9                   MOV         #-7,R1
    00001428 3E13                   CMP/GE      R1,R14
    0000142A 8B3C                   BF          L817
    0000142C E03F                   MOV         #63,R0
    0000142E 3E07                   CMP/GT      R0,R14
    00001430 8939                   BT          L817
      Monochrome  1055            if(y < 0) begin = -y;
    00001432 4E11                   CMP/PZ      R14
    00001434 8D01                   BT/S        L818
      Monochrome  1056            if(y > 56) end = 64-y;
    00001436 E338                   MOV         #56,R3
    00001438 6BEB                   NEG         R14,R11
    0000143A              L818:                             
    0000143A 3E37                   CMP/GT      R3,R14
    0000143C 8F02                   BF/S        L819
      Monochrome  1057            shift = 8-(x&7);
    0000143E E307                   MOV         #7,R3
    00001440 E940                   MOV         #64,R9
    00001442 39E8                   SUB         R14,R9
    00001444              L819:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   69


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome  1058            screen = ML_vram_adress()+(y+begin<<4)+(x>>3);
    00001444 D21C                   MOV.L       L937,R2    ; _ML_vram_adress
    00001446 23D9                   AND         R13,R3
    00001448 6A43                   MOV         R4,R10
    0000144A 420B                   JSR         @R2
    0000144C 3A38                   SUB         R3,R10
    0000144E 63BE                   EXTS.B      R11,R3
    00001450 33EC                   ADD         R14,R3
    00001452 4308                   SHLL2       R3
    00001454 4308                   SHLL2       R3
    00001456 303C                   ADD         R3,R0
    00001458 53F1                   MOV.L       @(4,R15),R3
    0000145A 6EC3                   MOV         R12,R14
    0000145C 4D21                   SHAR        R13
    0000145E 4D21                   SHAR        R13
    00001460 4D21                   SHAR        R13
    00001462 6603                   MOV         R0,R6
    00001464 36DC                   ADD         R13,R6
      Monochrome  1059            for(i=begin ; i<end ; i++)
    00001466 65B3                   MOV         R11,R5
    00001468 645E                   EXTS.B      R5,R4
    0000146A 343C                   ADD         R3,R4
    0000146C 679E                   EXTS.B      R9,R7
    0000146E 625E                   EXTS.B      R5,R2
    00001470 3273                   CMP/GE      R7,R2
    00001472 8D18                   BT/S        L817
    00001474 7E01                   ADD         #1,R14
    00001476              L821:                             
      Monochrome  1060            {
      Monochrome  1061                    line = ~((unsigned char)~bmp[i]<<shift);
    00001476 6DAE                   EXTS.B      R10,R13
    00001478 6340                   MOV.B       @R4,R3
      Monochrome  1062                    screen[0] &= *p;
      Monochrome  1063                    if(shift!=8) screen[1] &= *(p+1);
    0000147A 60D3                   MOV         R13,R0
    0000147C 6337                   NOT         R3,R3
    0000147E 633C                   EXTU.B      R3,R3
    00001480 43DD                   SHLD        R13,R3
    00001482 6337                   NOT         R3,R3
    00001484 2F31                   MOV.W       R3,@R15
    00001486 8808                   CMP/EQ      #8,R0
    00001488 62C0                   MOV.B       @R12,R2
    0000148A 6160                   MOV.B       @R6,R1
    0000148C 2129                   AND         R2,R1
    0000148E 8D04                   BT/S        L822
    00001490 2610                   MOV.B       R1,@R6
    00001492 63E0                   MOV.B       @R14,R3
    00001494 8461                   MOV.B       @(1,R6),R0
    00001496 2039                   AND         R3,R0
    00001498 8061                   MOV.B       R0,@(1,R6)
    0000149A              L822:                             
      Monochrome  1064                    screen += 16;
    0000149A 7610                   ADD         #16,R6
    0000149C 7501                   ADD         #1,R5
    0000149E 635E                   EXTS.B      R5,R3
    000014A0 3373                   CMP/GE      R7,R3
    000014A2 8FE8                   BF/S        L821




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   70


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000014A4 7401                   ADD         #1,R4
    000014A6              L817:                             
      Monochrome  1065            }
      Monochrome  1066    }
    000014A6 7F08                   ADD         #8,R15
    000014A8 4F26                   LDS.L       @R15+,PR
    000014AA 69F6                   MOV.L       @R15+,R9
    000014AC 6AF6                   MOV.L       @R15+,R10
    000014AE 6BF6                   MOV.L       @R15+,R11
    000014B0 6CF6                   MOV.L       @R15+,R12
    000014B2 6DF6                   MOV.L       @R15+,R13
    000014B4 000B                   RTS
    000014B6 6EF6                   MOV.L       @R15+,R14
    000014B8              L937:                             
    000014B8 <00000000>             .DATA.L     _ML_vram_adress
      Monochrome  1067    #endif
      Monochrome  1068    
      Monochrome  1069    #ifdef ML_BMP_8_XOR
      Monochrome  1070    void ML_bmp_8_xor(const unsigned char *bmp, int x, int y)
      Monochrome  1071    {
      Monochrome  1072            unsigned short line;
      Monochrome  1073            char i, shift, begin=0, end=8, *screen, *p=(char*)&line;
      Monochrome  1074            if(!bmp || x<0 || x>120 || y<-7 || y>63) return;
      Monochrome  1075            if(y < 0) begin = -y;
      Monochrome  1076            if(y > 56) end = 64-y;
      Monochrome  1077            shift = 8-(x&7);
      Monochrome  1078            screen = ML_vram_adress()+(y+begin<<4)+(x>>3);
      Monochrome  1079            for(i=begin ; i<end ; i++)
      Monochrome  1080            {
      Monochrome  1081                    line = bmp[i]<<shift;
      Monochrome  1082                    screen[0] ^= *p;
      Monochrome  1083                    if(shift<8) screen[1] ^= *(p+1);
      Monochrome  1084                    screen += 16;
      Monochrome  1085            }
      Monochrome  1086    }
      Monochrome  1087    #endif
      Monochrome  1088    
      Monochrome  1089    #ifdef ML_BMP_8_OR_CL
      Monochrome  1090    void ML_bmp_8_or_cl(const unsigned char *bmp, int x, int y)
    000014BC              _ML_bmp_8_or_cl:                 ; function: ML_bmp_8_or_cl
                                                           ; frame size=44
    000014BC 2FE6                   MOV.L       R14,@-R15
    000014BE 6E63                   MOV         R6,R14
    000014C0 2FD6                   MOV.L       R13,@-R15
      Monochrome  1091    {
      Monochrome  1092            unsigned short line;
      Monochrome  1093            char i, shift, begin=0, end=8, bool1=1, bool2=1, *screen, *p=(char*)&line;
    000014C2 E601                   MOV         #1,R6
    000014C4 2FC6                   MOV.L       R12,@-R15
    000014C6 6D53                   MOV         R5,R13
    000014C8 2FB6                   MOV.L       R11,@-R15
    000014CA 6C63                   MOV         R6,R12
    000014CC 2FA6                   MOV.L       R10,@-R15
    000014CE E508                   MOV         #8,R5
    000014D0 2F96                   MOV.L       R9,@-R15
    000014D2 6053                   MOV         R5,R0
    000014D4 2F86                   MOV.L       R8,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   71


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000014D6 6963                   MOV         R6,R9
    000014D8 4F22                   STS.L       PR,@-R15
    000014DA 7FF4                   ADD         #-12,R15
    000014DC 1F41                   MOV.L       R4,@(4,R15)
    000014DE E400                   MOV         #0,R4
    000014E0 80F8                   MOV.B       R0,@(8,R15)
    000014E2 6A43                   MOV         R4,R10
      Monochrome  1094            if(!bmp || x<-7 || x>127 || y<-7 || y>63) return;
    000014E4 53F1                   MOV.L       @(4,R15),R3
    000014E6 2338                   TST         R3,R3
    000014E8 8D53                   BT/S        L825
    000014EA 6BF3                   MOV         R15,R11
    000014EC E3F9                   MOV         #-7,R3
    000014EE 3D33                   CMP/GE      R3,R13
    000014F0 8B4F                   BF          L825
    000014F2 E17F                   MOV         #127,R1
    000014F4 3D17                   CMP/GT      R1,R13
    000014F6 894C                   BT          L825
    000014F8 3E33                   CMP/GE      R3,R14
    000014FA 8B4A                   BF          L825
    000014FC E23F                   MOV         #63,R2
    000014FE 3E27                   CMP/GT      R2,R14
    00001500 8947                   BT          L825
      Monochrome  1095            if(y < 0) begin = -y;
    00001502 4E11                   CMP/PZ      R14
    00001504 8D01                   BT/S        L826
      Monochrome  1096            if(y > 56) end = 64-y;
    00001506 E238                   MOV         #56,R2
    00001508 6AEB                   NEG         R14,R10
    0000150A              L826:                             
    0000150A 3E27                   CMP/GT      R2,R14
    0000150C 8B02                   BF          L827
    0000150E E040                   MOV         #64,R0
    00001510 30E8                   SUB         R14,R0
    00001512 80F8                   MOV.B       R0,@(8,R15)
    00001514              L827:                             
      Monochrome  1097            shift = 8-(x&7);
    00001514 E307                   MOV         #7,R3
    00001516 23D9                   AND         R13,R3
    00001518 6853                   MOV         R5,R8
      Monochrome  1098            if(x < 0) bool1 = 0;
    0000151A 4D11                   CMP/PZ      R13
    0000151C 8D01                   BT/S        L828
    0000151E 3838                   SUB         R3,R8
    00001520 6943                   MOV         R4,R9
    00001522              L828:                             
      Monochrome  1099            if(x>120 || shift==8) bool2 = 0;
    00001522 E378                   MOV         #120,R3
    00001524 3D37                   CMP/GT      R3,R13
    00001526 8902                   BT          L830
    00001528 608E                   EXTS.B      R8,R0
    0000152A 8808                   CMP/EQ      #8,R0
    0000152C 8B00                   BF          L829
    0000152E              L830:                             
    0000152E 6C43                   MOV         R4,R12
    00001530              L829:                             
      Monochrome  1100            screen = ML_vram_adress()+(y+begin<<4)+(x>>3);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   72


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001530 D358                   MOV.L       L938,R3    ; _ML_vram_adress
    00001532 430B                   JSR         @R3
    00001534 0009                   NOP
    00001536 62AE                   EXTS.B      R10,R2
    00001538 53F1                   MOV.L       @(4,R15),R3
    0000153A 4D21                   SHAR        R13
    0000153C 32EC                   ADD         R14,R2
    0000153E 4208                   SHLL2       R2
    00001540 4208                   SHLL2       R2
    00001542 302C                   ADD         R2,R0
    00001544 4D21                   SHAR        R13
    00001546 4D21                   SHAR        R13
    00001548 6503                   MOV         R0,R5
    0000154A 35DC                   ADD         R13,R5
    0000154C 84F8                   MOV.B       @(8,R15),R0
      Monochrome  1101            for(i=begin ; i<end ; i++)
    0000154E 64A3                   MOV         R10,R4
    00001550 664E                   EXTS.B      R4,R6
    00001552 363C                   ADD         R3,R6
    00001554 6EB3                   MOV         R11,R14
    00001556 6703                   MOV         R0,R7
    00001558 624E                   EXTS.B      R4,R2
    0000155A 3273                   CMP/GE      R7,R2
    0000155C 8D19                   BT/S        L825
    0000155E 7E01                   ADD         #1,R14
    00001560              L832:                             
      Monochrome  1102            {
      Monochrome  1103                    line = bmp[i]<<shift;
    00001560 6360                   MOV.B       @R6,R3
    00001562 628E                   EXTS.B      R8,R2
    00001564 633C                   EXTU.B      R3,R3
    00001566 432D                   SHLD        R2,R3
      Monochrome  1104                    if(bool1) screen[0] |= *p;
    00001568 629E                   EXTS.B      R9,R2
    0000156A 2228                   TST         R2,R2
    0000156C 8D04                   BT/S        L833
    0000156E 2F31                   MOV.W       R3,@R15
    00001570 62B0                   MOV.B       @R11,R2
    00001572 6150                   MOV.B       @R5,R1
    00001574 212B                   OR          R2,R1
    00001576 2510                   MOV.B       R1,@R5
    00001578              L833:                             
      Monochrome  1105                    if(bool2) screen[1] |= *(p+1);
    00001578 63CE                   EXTS.B      R12,R3
    0000157A 2338                   TST         R3,R3
    0000157C 8903                   BT          L834
    0000157E 63E0                   MOV.B       @R14,R3
    00001580 8451                   MOV.B       @(1,R5),R0
    00001582 203B                   OR          R3,R0
    00001584 8051                   MOV.B       R0,@(1,R5)
    00001586              L834:                             
      Monochrome  1106                    screen += 16;
    00001586 7510                   ADD         #16,R5
    00001588 7401                   ADD         #1,R4
    0000158A 634E                   EXTS.B      R4,R3
    0000158C 3373                   CMP/GE      R7,R3
    0000158E 8FE7                   BF/S        L832




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   73


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001590 7601                   ADD         #1,R6
    00001592              L825:                             
      Monochrome  1107            }
      Monochrome  1108    }
    00001592 7F0C                   ADD         #12,R15
    00001594 4F26                   LDS.L       @R15+,PR
    00001596 68F6                   MOV.L       @R15+,R8
    00001598 69F6                   MOV.L       @R15+,R9
    0000159A 6AF6                   MOV.L       @R15+,R10
    0000159C 6BF6                   MOV.L       @R15+,R11
    0000159E 6CF6                   MOV.L       @R15+,R12
    000015A0 6DF6                   MOV.L       @R15+,R13
    000015A2 000B                   RTS
    000015A4 6EF6                   MOV.L       @R15+,R14
      Monochrome  1109    #endif
      Monochrome  1110    
      Monochrome  1111    #ifdef ML_BMP_8_AND_CL
      Monochrome  1112    void ML_bmp_8_and_cl(const unsigned char *bmp, int x, int y)
    000015A6              _ML_bmp_8_and_cl:                ; function: ML_bmp_8_and_cl
                                                           ; frame size=44
    000015A6 2FE6                   MOV.L       R14,@-R15
    000015A8 2FD6                   MOV.L       R13,@-R15
    000015AA 6E63                   MOV         R6,R14
    000015AC 2FC6                   MOV.L       R12,@-R15
    000015AE 6D53                   MOV         R5,R13
    000015B0 2FB6                   MOV.L       R11,@-R15
      Monochrome  1113    {
      Monochrome  1114            unsigned short line;
      Monochrome  1115            char i, shift, begin=0, end=8, bool1=1, bool2=1, *screen, *p=(char*)&line;
    000015B2 E601                   MOV         #1,R6
    000015B4 2FA6                   MOV.L       R10,@-R15
    000015B6 E508                   MOV         #8,R5
    000015B8 2F96                   MOV.L       R9,@-R15
    000015BA 6C63                   MOV         R6,R12
    000015BC 2F86                   MOV.L       R8,@-R15
    000015BE 6053                   MOV         R5,R0
    000015C0 4F22                   STS.L       PR,@-R15
    000015C2 6963                   MOV         R6,R9
    000015C4 7FF4                   ADD         #-12,R15
    000015C6 1F41                   MOV.L       R4,@(4,R15)
    000015C8 80F8                   MOV.B       R0,@(8,R15)
    000015CA E400                   MOV         #0,R4
      Monochrome  1116            if(!bmp || x<-7 || x>127 || y<-7 || y>63) return;
    000015CC 53F1                   MOV.L       @(4,R15),R3
    000015CE 6A43                   MOV         R4,R10
    000015D0 2338                   TST         R3,R3
    000015D2 8D55                   BT/S        L837
    000015D4 6BF3                   MOV         R15,R11
    000015D6 E3F9                   MOV         #-7,R3
    000015D8 3D33                   CMP/GE      R3,R13
    000015DA 8B51                   BF          L837
    000015DC E17F                   MOV         #127,R1
    000015DE 3D17                   CMP/GT      R1,R13
    000015E0 894E                   BT          L837
    000015E2 3E33                   CMP/GE      R3,R14
    000015E4 8B4C                   BF          L837
    000015E6 E23F                   MOV         #63,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   74


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000015E8 3E27                   CMP/GT      R2,R14
    000015EA 8949                   BT          L837
      Monochrome  1117            if(y < 0) begin = -y;
    000015EC 4E11                   CMP/PZ      R14
    000015EE 8D01                   BT/S        L838
      Monochrome  1118            if(y > 56) end = 64-y;
    000015F0 E238                   MOV         #56,R2
    000015F2 6AEB                   NEG         R14,R10
    000015F4              L838:                             
    000015F4 3E27                   CMP/GT      R2,R14
    000015F6 8B02                   BF          L839
    000015F8 E040                   MOV         #64,R0
    000015FA 30E8                   SUB         R14,R0
    000015FC 80F8                   MOV.B       R0,@(8,R15)
    000015FE              L839:                             
      Monochrome  1119            shift = 8-(x&7);
    000015FE E307                   MOV         #7,R3
    00001600 23D9                   AND         R13,R3
    00001602 6853                   MOV         R5,R8
      Monochrome  1120            if(x < 0) bool1 = 0;
    00001604 4D11                   CMP/PZ      R13
    00001606 8D01                   BT/S        L840
    00001608 3838                   SUB         R3,R8
    0000160A 6943                   MOV         R4,R9
    0000160C              L840:                             
      Monochrome  1121            if(x>120 || shift==8) bool2 = 0;
    0000160C E378                   MOV         #120,R3
    0000160E 3D37                   CMP/GT      R3,R13
    00001610 8902                   BT          L842
    00001612 608E                   EXTS.B      R8,R0
    00001614 8808                   CMP/EQ      #8,R0
    00001616 8B00                   BF          L841
    00001618              L842:                             
    00001618 6C43                   MOV         R4,R12
    0000161A              L841:                             
      Monochrome  1122            screen = ML_vram_adress()+(y+begin<<4)+(x>>3);
    0000161A D31E                   MOV.L       L938,R3    ; _ML_vram_adress
    0000161C 430B                   JSR         @R3
    0000161E 0009                   NOP
    00001620 53F1                   MOV.L       @(4,R15),R3
    00001622 62AE                   EXTS.B      R10,R2
    00001624 32EC                   ADD         R14,R2
    00001626 4208                   SHLL2       R2
    00001628 4208                   SHLL2       R2
    0000162A 302C                   ADD         R2,R0
    0000162C 4D21                   SHAR        R13
    0000162E 4D21                   SHAR        R13
    00001630 4D21                   SHAR        R13
    00001632 6503                   MOV         R0,R5
    00001634 84F8                   MOV.B       @(8,R15),R0
    00001636 35DC                   ADD         R13,R5
      Monochrome  1123            for(i=begin ; i<end ; i++)
    00001638 64A3                   MOV         R10,R4
    0000163A 664E                   EXTS.B      R4,R6
    0000163C 363C                   ADD         R3,R6
    0000163E 6EB3                   MOV         R11,R14
    00001640 6703                   MOV         R0,R7




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   75


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001642 624E                   EXTS.B      R4,R2
    00001644 3273                   CMP/GE      R7,R2
    00001646 8D1B                   BT/S        L837
    00001648 7E01                   ADD         #1,R14
    0000164A              L844:                             
      Monochrome  1124            {
      Monochrome  1125                    line = ~((unsigned char)~bmp[i]<<shift);
    0000164A 628E                   EXTS.B      R8,R2
    0000164C 6360                   MOV.B       @R6,R3
    0000164E 6337                   NOT         R3,R3
    00001650 633C                   EXTU.B      R3,R3
    00001652 432D                   SHLD        R2,R3
    00001654 6337                   NOT         R3,R3
      Monochrome  1126                    if(bool1) screen[0] &= *p;
    00001656 629E                   EXTS.B      R9,R2
    00001658 2228                   TST         R2,R2
    0000165A 8D04                   BT/S        L845
    0000165C 2F31                   MOV.W       R3,@R15
    0000165E 62B0                   MOV.B       @R11,R2
    00001660 6150                   MOV.B       @R5,R1
    00001662 2129                   AND         R2,R1
    00001664 2510                   MOV.B       R1,@R5
    00001666              L845:                             
      Monochrome  1127                    if(bool2) screen[1] &= *(p+1);
    00001666 63CE                   EXTS.B      R12,R3
    00001668 2338                   TST         R3,R3
    0000166A 8903                   BT          L846
    0000166C 63E0                   MOV.B       @R14,R3
    0000166E 8451                   MOV.B       @(1,R5),R0
    00001670 2039                   AND         R3,R0
    00001672 8051                   MOV.B       R0,@(1,R5)
    00001674              L846:                             
      Monochrome  1128                    screen += 16;
    00001674 7510                   ADD         #16,R5
    00001676 7401                   ADD         #1,R4
    00001678 634E                   EXTS.B      R4,R3
    0000167A 3373                   CMP/GE      R7,R3
    0000167C 8FE5                   BF/S        L844
    0000167E 7601                   ADD         #1,R6
    00001680              L837:                             
      Monochrome  1129            }
      Monochrome  1130    }
    00001680 7F0C                   ADD         #12,R15
    00001682 4F26                   LDS.L       @R15+,PR
    00001684 68F6                   MOV.L       @R15+,R8
    00001686 69F6                   MOV.L       @R15+,R9
    00001688 6AF6                   MOV.L       @R15+,R10
    0000168A 6BF6                   MOV.L       @R15+,R11
    0000168C 6CF6                   MOV.L       @R15+,R12
    0000168E 6DF6                   MOV.L       @R15+,R13
    00001690 000B                   RTS
    00001692 6EF6                   MOV.L       @R15+,R14
    00001694              L938:                             
    00001694 <00000000>             .DATA.L     _ML_vram_adress
      Monochrome  1131    #endif
      Monochrome  1132    
      Monochrome  1133    #ifdef ML_BMP_8_XOR_CL




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   76


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome  1134    void ML_bmp_8_xor_cl(const unsigned char *bmp, int x, int y)
      Monochrome  1135    {
      Monochrome  1136            unsigned short line;
      Monochrome  1137            char i, shift, begin=0, end=8, bool1=1, bool2=1, *screen, *p=(char*)&line;
      Monochrome  1138            if(!bmp || x<-7 || x>127 || y<-7 || y>63) return;
      Monochrome  1139            if(y < 0) begin = -y;
      Monochrome  1140            if(y > 56) end = 64-y;
      Monochrome  1141            shift = 8-(x&7);
      Monochrome  1142            if(x < 0) bool1 = 0;
      Monochrome  1143            if(x>120 || shift==8) bool2 = 0;
      Monochrome  1144            screen = ML_vram_adress()+(y+begin<<4)+(x>>3);
      Monochrome  1145            for(i=begin ; i<end ; i++)
      Monochrome  1146            {
      Monochrome  1147                    line = bmp[i]<<shift;
      Monochrome  1148                    if(bool1) screen[0] ^= *p;
      Monochrome  1149                    if(bool2) screen[1] ^= *(p+1);
      Monochrome  1150                    screen += 16;
      Monochrome  1151            }
      Monochrome  1152    }
      Monochrome  1153    #endif
      Monochrome  1154    
      Monochrome  1155    #ifdef ML_BMP_16_OR
      Monochrome  1156    void ML_bmp_16_or(const unsigned short *bmp, int x, int y)
    00001698              _ML_bmp_16_or:                   ; function: ML_bmp_16_or
                                                           ; frame size=36
    00001698 2FE6                   MOV.L       R14,@-R15
      Monochrome  1157    {
      Monochrome  1158            unsigned long line;
      Monochrome  1159            char i, shift, begin=0, end=16, *screen, *p=(char*)&line+1;
      Monochrome  1160            if(!bmp || x<0 || x>112 || y<-15 || y>63) return;
    0000169A 6343                   MOV         R4,R3
    0000169C 2FD6                   MOV.L       R13,@-R15
    0000169E 6E63                   MOV         R6,R14
    000016A0 2FC6                   MOV.L       R12,@-R15
    000016A2 2338                   TST         R3,R3
    000016A4 2FB6                   MOV.L       R11,@-R15
    000016A6 EC00                   MOV         #0,R12
    000016A8 2FA6                   MOV.L       R10,@-R15
    000016AA 6B53                   MOV         R5,R11
    000016AC 2F96                   MOV.L       R9,@-R15
    000016AE E910                   MOV         #16,R9
    000016B0 4F22                   STS.L       PR,@-R15
    000016B2 7FF8                   ADD         #-8,R15
    000016B4 1F41                   MOV.L       R4,@(4,R15)
    000016B6 6DF3                   MOV         R15,R13
    000016B8 8D4A                   BT/S        L849
    000016BA 7D01                   ADD         #1,R13
    000016BC 4B11                   CMP/PZ      R11
    000016BE 8B47                   BF          L849
    000016C0 E270                   MOV         #112,R2
    000016C2 3B27                   CMP/GT      R2,R11
    000016C4 8944                   BT          L849
    000016C6 E1F1                   MOV         #-15,R1
    000016C8 3E13                   CMP/GE      R1,R14
    000016CA 8B41                   BF          L849
    000016CC E03F                   MOV         #63,R0
    000016CE 3E07                   CMP/GT      R0,R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   77


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000016D0 893E                   BT          L849
      Monochrome  1161            if(y < 0) begin = -y;
    000016D2 4E11                   CMP/PZ      R14
    000016D4 8D01                   BT/S        L850
      Monochrome  1162            if(y > 48) end = 64-y;
    000016D6 E330                   MOV         #48,R3
    000016D8 6CEB                   NEG         R14,R12
    000016DA              L850:                             
    000016DA 3E37                   CMP/GT      R3,R14
    000016DC 8F02                   BF/S        L851
      Monochrome  1163            shift = 8-(x&7);
    000016DE E307                   MOV         #7,R3
    000016E0 E940                   MOV         #64,R9
    000016E2 39E8                   SUB         R14,R9
    000016E4              L851:                             
      Monochrome  1164            screen = ML_vram_adress()+(y+begin<<4)+(x>>3);
    000016E4 D252                   MOV.L       L939,R2    ; _ML_vram_adress
    000016E6 23B9                   AND         R11,R3
    000016E8 EA08                   MOV         #8,R10
    000016EA 420B                   JSR         @R2
    000016EC 3A38                   SUB         R3,R10
    000016EE 63CE                   EXTS.B      R12,R3
    000016F0 33EC                   ADD         R14,R3
    000016F2 4308                   SHLL2       R3
    000016F4 4308                   SHLL2       R3
    000016F6 303C                   ADD         R3,R0
    000016F8 53F1                   MOV.L       @(4,R15),R3
    000016FA 679E                   EXTS.B      R9,R7
    000016FC 4B21                   SHAR        R11
    000016FE 4B21                   SHAR        R11
    00001700 4B21                   SHAR        R11
    00001702 6403                   MOV         R0,R4
    00001704 34BC                   ADD         R11,R4
      Monochrome  1165            for(i=begin ; i<end ; i++)
    00001706 66C3                   MOV         R12,R6
    00001708 656E                   EXTS.B      R6,R5
    0000170A 4500                   SHLL        R5
    0000170C 353C                   ADD         R3,R5
    0000170E 6BD3                   MOV         R13,R11
    00001710 7B01                   ADD         #1,R11
    00001712 6CD3                   MOV         R13,R12
    00001714 626E                   EXTS.B      R6,R2
    00001716 3273                   CMP/GE      R7,R2
    00001718 8D1A                   BT/S        L849
    0000171A 7C02                   ADD         #2,R12
    0000171C              L853:                             
      Monochrome  1166            {
      Monochrome  1167                    line = bmp[i]<<shift;
    0000171C 6351                   MOV.W       @R5,R3
    0000171E 6EAE                   EXTS.B      R10,R14
    00001720 633D                   EXTU.W      R3,R3
    00001722 43ED                   SHLD        R14,R3
    00001724 2F32                   MOV.L       R3,@R15
      Monochrome  1168                    screen[0] |= *p;
    00001726 62D0                   MOV.B       @R13,R2
    00001728 6140                   MOV.B       @R4,R1
    0000172A 212B                   OR          R2,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   78


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000172C 2410                   MOV.B       R1,@R4
      Monochrome  1169                    screen[1] |= *(p+1);
    0000172E 63B0                   MOV.B       @R11,R3
    00001730 8441                   MOV.B       @(1,R4),R0
    00001732 203B                   OR          R3,R0
    00001734 8041                   MOV.B       R0,@(1,R4)
      Monochrome  1170                    if(shift!=8) screen[2] |= *(p+2);
    00001736 60E3                   MOV         R14,R0
    00001738 8808                   CMP/EQ      #8,R0
    0000173A 8903                   BT          L854
    0000173C 63C0                   MOV.B       @R12,R3
    0000173E 8442                   MOV.B       @(2,R4),R0
    00001740 203B                   OR          R3,R0
    00001742 8042                   MOV.B       R0,@(2,R4)
    00001744              L854:                             
      Monochrome  1171                    screen += 16;
    00001744 7410                   ADD         #16,R4
    00001746 7601                   ADD         #1,R6
    00001748 636E                   EXTS.B      R6,R3
    0000174A 3373                   CMP/GE      R7,R3
    0000174C 8FE6                   BF/S        L853
    0000174E 7502                   ADD         #2,R5
    00001750              L849:                             
      Monochrome  1172            }
      Monochrome  1173    }
    00001750 7F08                   ADD         #8,R15
    00001752 4F26                   LDS.L       @R15+,PR
    00001754 69F6                   MOV.L       @R15+,R9
    00001756 6AF6                   MOV.L       @R15+,R10
    00001758 6BF6                   MOV.L       @R15+,R11
    0000175A 6CF6                   MOV.L       @R15+,R12
    0000175C 6DF6                   MOV.L       @R15+,R13
    0000175E 000B                   RTS
    00001760 6EF6                   MOV.L       @R15+,R14
      Monochrome  1174    #endif
      Monochrome  1175    
      Monochrome  1176    #ifdef ML_BMP_16_AND
      Monochrome  1177    void ML_bmp_16_and(const unsigned short *bmp, int x, int y)
    00001762              _ML_bmp_16_and:                  ; function: ML_bmp_16_and
                                                           ; frame size=36
      Monochrome  1178    {
      Monochrome  1179            unsigned long line;
      Monochrome  1180            char i, shift, begin=0, end=16, *screen, *p=(char*)&line+1;
      Monochrome  1181            if(!bmp || x<0 || x>112 || y<-15 || y>63) return;
    00001762 6343                   MOV         R4,R3
    00001764 2FE6                   MOV.L       R14,@-R15
    00001766 2338                   TST         R3,R3
    00001768 2FD6                   MOV.L       R13,@-R15
    0000176A 6E63                   MOV         R6,R14
    0000176C 2FC6                   MOV.L       R12,@-R15
    0000176E EC00                   MOV         #0,R12
    00001770 2FB6                   MOV.L       R11,@-R15
    00001772 6B53                   MOV         R5,R11
    00001774 2FA6                   MOV.L       R10,@-R15
    00001776 2F96                   MOV.L       R9,@-R15
    00001778 4F22                   STS.L       PR,@-R15
    0000177A E910                   MOV         #16,R9




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   79


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000177C 7FF8                   ADD         #-8,R15
    0000177E 6DF3                   MOV         R15,R13
    00001780 1F41                   MOV.L       R4,@(4,R15)
    00001782 8D4C                   BT/S        L857
    00001784 7D01                   ADD         #1,R13
    00001786 4B11                   CMP/PZ      R11
    00001788 8B49                   BF          L857
    0000178A E270                   MOV         #112,R2
    0000178C 3B27                   CMP/GT      R2,R11
    0000178E 8946                   BT          L857
    00001790 E1F1                   MOV         #-15,R1
    00001792 3E13                   CMP/GE      R1,R14
    00001794 8B43                   BF          L857
    00001796 E03F                   MOV         #63,R0
    00001798 3E07                   CMP/GT      R0,R14
    0000179A 8940                   BT          L857
      Monochrome  1182            if(y < 0) begin = -y;
    0000179C 4E11                   CMP/PZ      R14
    0000179E 8D01                   BT/S        L858
      Monochrome  1183            if(y > 48) end = 64-y;
    000017A0 E330                   MOV         #48,R3
    000017A2 6CEB                   NEG         R14,R12
    000017A4              L858:                             
    000017A4 3E37                   CMP/GT      R3,R14
    000017A6 8F02                   BF/S        L859
      Monochrome  1184            shift = 8-(x&7);
    000017A8 E307                   MOV         #7,R3
    000017AA E940                   MOV         #64,R9
    000017AC 39E8                   SUB         R14,R9
    000017AE              L859:                             
    000017AE 23B9                   AND         R11,R3
      Monochrome  1185            screen = ML_vram_adress()+(y+begin<<4)+(x>>3);
    000017B0 D21F                   MOV.L       L939,R2    ; _ML_vram_adress
    000017B2 EA08                   MOV         #8,R10
    000017B4 420B                   JSR         @R2
    000017B6 3A38                   SUB         R3,R10
    000017B8 63CE                   EXTS.B      R12,R3
    000017BA 33EC                   ADD         R14,R3
    000017BC 4308                   SHLL2       R3
    000017BE 4308                   SHLL2       R3
    000017C0 303C                   ADD         R3,R0
    000017C2 4B21                   SHAR        R11
    000017C4 53F1                   MOV.L       @(4,R15),R3
    000017C6 679E                   EXTS.B      R9,R7
    000017C8 4B21                   SHAR        R11
    000017CA 4B21                   SHAR        R11
    000017CC 6403                   MOV         R0,R4
    000017CE 34BC                   ADD         R11,R4
      Monochrome  1186            for(i=begin ; i<end ; i++)
    000017D0 66C3                   MOV         R12,R6
    000017D2 656E                   EXTS.B      R6,R5
    000017D4 4500                   SHLL        R5
    000017D6 353C                   ADD         R3,R5
    000017D8 6BD3                   MOV         R13,R11
    000017DA 7B01                   ADD         #1,R11
    000017DC 6CD3                   MOV         R13,R12
    000017DE 626E                   EXTS.B      R6,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   80


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000017E0 3273                   CMP/GE      R7,R2
    000017E2 8D1C                   BT/S        L857
    000017E4 7C02                   ADD         #2,R12
    000017E6              L861:                             
      Monochrome  1187            {
      Monochrome  1188                    line = ~((unsigned short)~bmp[i]<<shift);
    000017E6 6EAE                   EXTS.B      R10,R14
    000017E8 6351                   MOV.W       @R5,R3
    000017EA 6337                   NOT         R3,R3
    000017EC 633D                   EXTU.W      R3,R3
    000017EE 43ED                   SHLD        R14,R3
    000017F0 6337                   NOT         R3,R3
    000017F2 2F32                   MOV.L       R3,@R15
      Monochrome  1189                    screen[0] &= *p;
    000017F4 62D0                   MOV.B       @R13,R2
    000017F6 6140                   MOV.B       @R4,R1
    000017F8 2129                   AND         R2,R1
    000017FA 2410                   MOV.B       R1,@R4
      Monochrome  1190                    screen[1] &= *(p+1);
    000017FC 63B0                   MOV.B       @R11,R3
    000017FE 8441                   MOV.B       @(1,R4),R0
    00001800 2039                   AND         R3,R0
    00001802 8041                   MOV.B       R0,@(1,R4)
      Monochrome  1191                    if(shift!=8) screen[2] &= *(p+2);
    00001804 60E3                   MOV         R14,R0
    00001806 8808                   CMP/EQ      #8,R0
    00001808 8903                   BT          L862
    0000180A 63C0                   MOV.B       @R12,R3
    0000180C 8442                   MOV.B       @(2,R4),R0
    0000180E 2039                   AND         R3,R0
    00001810 8042                   MOV.B       R0,@(2,R4)
    00001812              L862:                             
      Monochrome  1192                    screen += 16;
    00001812 7410                   ADD         #16,R4
    00001814 7601                   ADD         #1,R6
    00001816 636E                   EXTS.B      R6,R3
    00001818 3373                   CMP/GE      R7,R3
    0000181A 8FE4                   BF/S        L861
    0000181C 7502                   ADD         #2,R5
    0000181E              L857:                             
      Monochrome  1193            }
      Monochrome  1194    }
    0000181E 7F08                   ADD         #8,R15
    00001820 4F26                   LDS.L       @R15+,PR
    00001822 69F6                   MOV.L       @R15+,R9
    00001824 6AF6                   MOV.L       @R15+,R10
    00001826 6BF6                   MOV.L       @R15+,R11
    00001828 6CF6                   MOV.L       @R15+,R12
    0000182A 6DF6                   MOV.L       @R15+,R13
    0000182C 000B                   RTS
    0000182E 6EF6                   MOV.L       @R15+,R14
    00001830              L939:                             
    00001830 <00000000>             .DATA.L     _ML_vram_adress
      Monochrome  1195    #endif
      Monochrome  1196    
      Monochrome  1197    #ifdef ML_BMP_16_XOR
      Monochrome  1198    void ML_bmp_16_xor(const unsigned short *bmp, int x, int y)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   81


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome  1199    {
      Monochrome  1200            unsigned long line;
      Monochrome  1201            char i, shift, begin=0, end=16, *screen, *p=(char*)&line+1;
      Monochrome  1202            if(!bmp || x<0 || x>112 || y<-15 || y>63) return;
      Monochrome  1203            if(y < 0) begin = -y;
      Monochrome  1204            if(y > 48) end = 64-y;
      Monochrome  1205            shift = 8-(x&7);
      Monochrome  1206            screen = ML_vram_adress()+(y+begin<<4)+(x>>3);
      Monochrome  1207            for(i=begin ; i<end ; i++)
      Monochrome  1208            {
      Monochrome  1209                    line = bmp[i]<<shift;
      Monochrome  1210                    screen[0] ^= *p;
      Monochrome  1211                    screen[1] ^= *(p+1);
      Monochrome  1212                    if(shift!=8) screen[2] ^= *(p+2);
      Monochrome  1213                    screen += 16;
      Monochrome  1214            }
      Monochrome  1215    }
      Monochrome  1216    #endif
      Monochrome  1217    
      Monochrome  1218    #ifdef ML_BMP_16_OR_CL
      Monochrome  1219    void ML_bmp_16_or_cl(const unsigned short *bmp, int x, int y)
    00001834              _ML_bmp_16_or_cl:                ; function: ML_bmp_16_or_cl
                                                           ; frame size=48
    00001834 2FE6                   MOV.L       R14,@-R15
      Monochrome  1220    {
      Monochrome  1221            unsigned long line;
      Monochrome  1222            char i, shift, begin=0, end=16, bool1=1, bool2=1, bool3=1, *screen, *p=(char*)&line+1;
    00001836 E010                   MOV         #16,R0
    00001838 2FD6                   MOV.L       R13,@-R15
    0000183A 6E53                   MOV         R5,R14
    0000183C 2FC6                   MOV.L       R12,@-R15
    0000183E 6D63                   MOV         R6,R13
    00001840 2FB6                   MOV.L       R11,@-R15
    00001842 E501                   MOV         #1,R5
    00001844 2FA6                   MOV.L       R10,@-R15
    00001846 2F96                   MOV.L       R9,@-R15
    00001848 2F86                   MOV.L       R8,@-R15
    0000184A 6953                   MOV         R5,R9
    0000184C 4F22                   STS.L       PR,@-R15
    0000184E 6B93                   MOV         R9,R11
    00001850 7FF0                   ADD         #-16,R15
    00001852 6CF3                   MOV         R15,R12
    00001854 1F41                   MOV.L       R4,@(4,R15)
    00001856 E400                   MOV         #0,R4
    00001858 80FC                   MOV.B       R0,@(12,R15)
    0000185A 6A43                   MOV         R4,R10
    0000185C 6053                   MOV         R5,R0
    0000185E 80F8                   MOV.B       R0,@(8,R15)
      Monochrome  1223            if(!bmp || x<-15 || x>127 || y<-15 || y>63) return;
    00001860 53F1                   MOV.L       @(4,R15),R3
    00001862 2338                   TST         R3,R3
    00001864 8D65                   BT/S        L865
    00001866 7C01                   ADD         #1,R12
    00001868 E3F1                   MOV         #-15,R3
    0000186A 3E33                   CMP/GE      R3,R14
    0000186C 8B61                   BF          L865
    0000186E E17F                   MOV         #127,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   82


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001870 3E17                   CMP/GT      R1,R14
    00001872 895E                   BT          L865
    00001874 3D33                   CMP/GE      R3,R13
    00001876 8B5C                   BF          L865
    00001878 E23F                   MOV         #63,R2
    0000187A 3D27                   CMP/GT      R2,R13
    0000187C 8959                   BT          L865
      Monochrome  1224            if(y < 0) begin = -y;
    0000187E 4D11                   CMP/PZ      R13
    00001880 8D01                   BT/S        L866
      Monochrome  1225            if(y > 48) end = 64-y;
    00001882 E230                   MOV         #48,R2
    00001884 6ADB                   NEG         R13,R10
    00001886              L866:                             
    00001886 3D27                   CMP/GT      R2,R13
    00001888 8B02                   BF          L867
    0000188A E040                   MOV         #64,R0
    0000188C 30D8                   SUB         R13,R0
    0000188E 80FC                   MOV.B       R0,@(12,R15)
    00001890              L867:                             
      Monochrome  1226            shift = 8-(x&7);
    00001890 E307                   MOV         #7,R3
    00001892 23E9                   AND         R14,R3
    00001894 E808                   MOV         #8,R8
      Monochrome  1227            if(x < 0) bool1 = 0;
    00001896 4E11                   CMP/PZ      R14
    00001898 8D01                   BT/S        L868
    0000189A 3838                   SUB         R3,R8
    0000189C 6943                   MOV         R4,R9
    0000189E              L868:                             
      Monochrome  1228            if(x<-8 || x>119) bool2 = 0;
    0000189E E3F8                   MOV         #-8,R3
    000018A0 3E33                   CMP/GE      R3,R14
    000018A2 8B02                   BF          L870
    000018A4 E177                   MOV         #119,R1
    000018A6 3E17                   CMP/GT      R1,R14
    000018A8 8B01                   BF          L869
    000018AA              L870:                             
    000018AA 6043                   MOV         R4,R0
    000018AC 80F8                   MOV.B       R0,@(8,R15)
    000018AE              L869:                             
      Monochrome  1229            if(x>111 || shift==8) bool3 = 0;
    000018AE E36F                   MOV         #111,R3
    000018B0 3E37                   CMP/GT      R3,R14
    000018B2 8902                   BT          L872
    000018B4 608E                   EXTS.B      R8,R0
    000018B6 8808                   CMP/EQ      #8,R0
    000018B8 8B00                   BF          L871
    000018BA              L872:                             
    000018BA 6B43                   MOV         R4,R11
    000018BC              L871:                             
      Monochrome  1230            screen = ML_vram_adress()+(y+begin<<4)+(x>>3);
    000018BC D367                   MOV.L       L940,R3    ; _ML_vram_adress
    000018BE 430B                   JSR         @R3
    000018C0 0009                   NOP
    000018C2 62AE                   EXTS.B      R10,R2
    000018C4 53F1                   MOV.L       @(4,R15),R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   83


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000018C6 4E21                   SHAR        R14
    000018C8 32DC                   ADD         R13,R2
    000018CA 4208                   SHLL2       R2
    000018CC 4208                   SHLL2       R2
    000018CE 302C                   ADD         R2,R0
    000018D0 4E21                   SHAR        R14
    000018D2 4E21                   SHAR        R14
    000018D4 6403                   MOV         R0,R4
    000018D6 34EC                   ADD         R14,R4
    000018D8 84FC                   MOV.B       @(12,R15),R0
      Monochrome  1231            for(i=begin ; i<end ; i++)
    000018DA 65A3                   MOV         R10,R5
    000018DC 665E                   EXTS.B      R5,R6
    000018DE 4600                   SHLL        R6
    000018E0 363C                   ADD         R3,R6
    000018E2 6EC3                   MOV         R12,R14
    000018E4 7E01                   ADD         #1,R14
    000018E6 6DC3                   MOV         R12,R13
    000018E8 6703                   MOV         R0,R7
    000018EA 625E                   EXTS.B      R5,R2
    000018EC 3273                   CMP/GE      R7,R2
    000018EE 8D20                   BT/S        L865
    000018F0 7D02                   ADD         #2,R13
    000018F2              L874:                             
      Monochrome  1232            {
      Monochrome  1233                    line = bmp[i]<<shift;
    000018F2 628E                   EXTS.B      R8,R2
    000018F4 6361                   MOV.W       @R6,R3
    000018F6 633D                   EXTU.W      R3,R3
    000018F8 432D                   SHLD        R2,R3
      Monochrome  1234                    if(bool1) screen[0] |= *p;
    000018FA 629E                   EXTS.B      R9,R2
    000018FC 2228                   TST         R2,R2
    000018FE 8D04                   BT/S        L875
    00001900 2F32                   MOV.L       R3,@R15
    00001902 62C0                   MOV.B       @R12,R2
    00001904 6140                   MOV.B       @R4,R1
    00001906 212B                   OR          R2,R1
    00001908 2410                   MOV.B       R1,@R4
    0000190A              L875:                             
      Monochrome  1235                    if(bool2) screen[1] |= *(p+1);
    0000190A 84F8                   MOV.B       @(8,R15),R0
    0000190C 2008                   TST         R0,R0
    0000190E 8D04                   BT/S        L876
      Monochrome  1236                    if(bool3) screen[2] |= *(p+2);
    00001910 62BE                   EXTS.B      R11,R2
    00001912 63E0                   MOV.B       @R14,R3
    00001914 8441                   MOV.B       @(1,R4),R0
    00001916 203B                   OR          R3,R0
    00001918 8041                   MOV.B       R0,@(1,R4)
    0000191A              L876:                             
    0000191A 2228                   TST         R2,R2
    0000191C 8903                   BT          L877
    0000191E 63D0                   MOV.B       @R13,R3
    00001920 8442                   MOV.B       @(2,R4),R0
    00001922 203B                   OR          R3,R0
    00001924 8042                   MOV.B       R0,@(2,R4)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   84


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001926              L877:                             
      Monochrome  1237                    screen += 16;
    00001926 7410                   ADD         #16,R4
    00001928 7501                   ADD         #1,R5
    0000192A 635E                   EXTS.B      R5,R3
    0000192C 3373                   CMP/GE      R7,R3
    0000192E 8FE0                   BF/S        L874
    00001930 7602                   ADD         #2,R6
    00001932              L865:                             
      Monochrome  1238            }
      Monochrome  1239    }
    00001932 7F10                   ADD         #16,R15
    00001934 4F26                   LDS.L       @R15+,PR
    00001936 68F6                   MOV.L       @R15+,R8
    00001938 69F6                   MOV.L       @R15+,R9
    0000193A 6AF6                   MOV.L       @R15+,R10
    0000193C 6BF6                   MOV.L       @R15+,R11
    0000193E 6CF6                   MOV.L       @R15+,R12
    00001940 6DF6                   MOV.L       @R15+,R13
    00001942 000B                   RTS
    00001944 6EF6                   MOV.L       @R15+,R14
      Monochrome  1240    #endif
      Monochrome  1241    
      Monochrome  1242    #ifdef ML_BMP_16_AND_CL
      Monochrome  1243    void ML_bmp_16_and_cl(const unsigned short *bmp, int x, int y)
    00001946              _ML_bmp_16_and_cl:               ; function: ML_bmp_16_and_cl
                                                           ; frame size=48
      Monochrome  1244    {
      Monochrome  1245            unsigned long line;
      Monochrome  1246            char i, shift, begin=0, end=16, bool1=1, bool2=1, bool3=1, *screen, *p=(char*)&line+1;
    00001946 E010                   MOV         #16,R0
    00001948 2FE6                   MOV.L       R14,@-R15
    0000194A 6E53                   MOV         R5,R14
    0000194C 2FD6                   MOV.L       R13,@-R15
    0000194E E501                   MOV         #1,R5
    00001950 2FC6                   MOV.L       R12,@-R15
    00001952 6D63                   MOV         R6,R13
    00001954 2FB6                   MOV.L       R11,@-R15
    00001956 2FA6                   MOV.L       R10,@-R15
    00001958 2F96                   MOV.L       R9,@-R15
    0000195A 6953                   MOV         R5,R9
    0000195C 2F86                   MOV.L       R8,@-R15
    0000195E 6B93                   MOV         R9,R11
    00001960 4F22                   STS.L       PR,@-R15
    00001962 7FF0                   ADD         #-16,R15
    00001964 1F41                   MOV.L       R4,@(4,R15)
    00001966 6CF3                   MOV         R15,R12
    00001968 80FC                   MOV.B       R0,@(12,R15)
    0000196A E400                   MOV         #0,R4
    0000196C 6A43                   MOV         R4,R10
    0000196E 6053                   MOV         R5,R0
    00001970 80F8                   MOV.B       R0,@(8,R15)
      Monochrome  1247            if(!bmp || x<-15 || x>127 || y<-15 || y>63) return;
    00001972 53F1                   MOV.L       @(4,R15),R3
    00001974 2338                   TST         R3,R3
    00001976 8D67                   BT/S        L880
    00001978 7C01                   ADD         #1,R12




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   85


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000197A E3F1                   MOV         #-15,R3
    0000197C 3E33                   CMP/GE      R3,R14
    0000197E 8B63                   BF          L880
    00001980 E17F                   MOV         #127,R1
    00001982 3E17                   CMP/GT      R1,R14
    00001984 8960                   BT          L880
    00001986 3D33                   CMP/GE      R3,R13
    00001988 8B5E                   BF          L880
    0000198A E23F                   MOV         #63,R2
    0000198C 3D27                   CMP/GT      R2,R13
    0000198E 895B                   BT          L880
      Monochrome  1248            if(y < 0) begin = -y;
    00001990 4D11                   CMP/PZ      R13
    00001992 8D01                   BT/S        L881
      Monochrome  1249            if(y > 48) end = 64-y;
    00001994 E230                   MOV         #48,R2
    00001996 6ADB                   NEG         R13,R10
    00001998              L881:                             
    00001998 3D27                   CMP/GT      R2,R13
    0000199A 8B02                   BF          L882
    0000199C E040                   MOV         #64,R0
    0000199E 30D8                   SUB         R13,R0
    000019A0 80FC                   MOV.B       R0,@(12,R15)
    000019A2              L882:                             
      Monochrome  1250            shift = 8-(x&7);
    000019A2 E307                   MOV         #7,R3
    000019A4 23E9                   AND         R14,R3
    000019A6 E808                   MOV         #8,R8
      Monochrome  1251            if(x < 0) bool1 = 0;
    000019A8 4E11                   CMP/PZ      R14
    000019AA 8D01                   BT/S        L883
    000019AC 3838                   SUB         R3,R8
    000019AE 6943                   MOV         R4,R9
    000019B0              L883:                             
      Monochrome  1252            if(x<-8 || x>119) bool2 = 0;
    000019B0 E3F8                   MOV         #-8,R3
    000019B2 3E33                   CMP/GE      R3,R14
    000019B4 8B02                   BF          L885
    000019B6 E177                   MOV         #119,R1
    000019B8 3E17                   CMP/GT      R1,R14
    000019BA 8B01                   BF          L884
    000019BC              L885:                             
    000019BC 6043                   MOV         R4,R0
    000019BE 80F8                   MOV.B       R0,@(8,R15)
    000019C0              L884:                             
      Monochrome  1253            if(x>111 || shift==8) bool3 = 0;
    000019C0 E36F                   MOV         #111,R3
    000019C2 3E37                   CMP/GT      R3,R14
    000019C4 8902                   BT          L887
    000019C6 608E                   EXTS.B      R8,R0
    000019C8 8808                   CMP/EQ      #8,R0
    000019CA 8B00                   BF          L886
    000019CC              L887:                             
    000019CC 6B43                   MOV         R4,R11
    000019CE              L886:                             
      Monochrome  1254            screen = ML_vram_adress()+(y+begin<<4)+(x>>3);
    000019CE D323                   MOV.L       L940,R3    ; _ML_vram_adress




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   86


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000019D0 430B                   JSR         @R3
    000019D2 0009                   NOP
    000019D4 53F1                   MOV.L       @(4,R15),R3
    000019D6 62AE                   EXTS.B      R10,R2
    000019D8 32DC                   ADD         R13,R2
    000019DA 4208                   SHLL2       R2
    000019DC 4208                   SHLL2       R2
    000019DE 302C                   ADD         R2,R0
    000019E0 4E21                   SHAR        R14
    000019E2 4E21                   SHAR        R14
    000019E4 4E21                   SHAR        R14
    000019E6 6403                   MOV         R0,R4
    000019E8 84FC                   MOV.B       @(12,R15),R0
    000019EA 34EC                   ADD         R14,R4
      Monochrome  1255            for(i=begin ; i<end ; i++)
    000019EC 65A3                   MOV         R10,R5
    000019EE 665E                   EXTS.B      R5,R6
    000019F0 4600                   SHLL        R6
    000019F2 363C                   ADD         R3,R6
    000019F4 6EC3                   MOV         R12,R14
    000019F6 7E01                   ADD         #1,R14
    000019F8 6DC3                   MOV         R12,R13
    000019FA 6703                   MOV         R0,R7
    000019FC 625E                   EXTS.B      R5,R2
    000019FE 3273                   CMP/GE      R7,R2
    00001A00 8D22                   BT/S        L880
    00001A02 7D02                   ADD         #2,R13
    00001A04              L889:                             
      Monochrome  1256            {
      Monochrome  1257                    line = ~((unsigned short)~bmp[i]<<shift);
    00001A04 6361                   MOV.W       @R6,R3
    00001A06 628E                   EXTS.B      R8,R2
    00001A08 6337                   NOT         R3,R3
    00001A0A 633D                   EXTU.W      R3,R3
    00001A0C 432D                   SHLD        R2,R3
    00001A0E 6337                   NOT         R3,R3
      Monochrome  1258                    if(bool1) screen[0] &= *p;
    00001A10 629E                   EXTS.B      R9,R2
    00001A12 2228                   TST         R2,R2
    00001A14 8D04                   BT/S        L890
    00001A16 2F32                   MOV.L       R3,@R15
    00001A18 62C0                   MOV.B       @R12,R2
    00001A1A 6140                   MOV.B       @R4,R1
    00001A1C 2129                   AND         R2,R1
    00001A1E 2410                   MOV.B       R1,@R4
    00001A20              L890:                             
      Monochrome  1259                    if(bool2) screen[1] &= *(p+1);
    00001A20 84F8                   MOV.B       @(8,R15),R0
    00001A22 2008                   TST         R0,R0
    00001A24 8D04                   BT/S        L891
      Monochrome  1260                    if(bool3) screen[2] &= *(p+2);
    00001A26 62BE                   EXTS.B      R11,R2
    00001A28 63E0                   MOV.B       @R14,R3
    00001A2A 8441                   MOV.B       @(1,R4),R0
    00001A2C 2039                   AND         R3,R0
    00001A2E 8041                   MOV.B       R0,@(1,R4)
    00001A30              L891:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   87


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001A30 2228                   TST         R2,R2
    00001A32 8903                   BT          L892
    00001A34 63D0                   MOV.B       @R13,R3
    00001A36 8442                   MOV.B       @(2,R4),R0
    00001A38 2039                   AND         R3,R0
    00001A3A 8042                   MOV.B       R0,@(2,R4)
    00001A3C              L892:                             
      Monochrome  1261                    screen += 16;
    00001A3C 7410                   ADD         #16,R4
    00001A3E 7501                   ADD         #1,R5
    00001A40 635E                   EXTS.B      R5,R3
    00001A42 3373                   CMP/GE      R7,R3
    00001A44 8FDE                   BF/S        L889
    00001A46 7602                   ADD         #2,R6
    00001A48              L880:                             
      Monochrome  1262            }
      Monochrome  1263    }
    00001A48 7F10                   ADD         #16,R15
    00001A4A 4F26                   LDS.L       @R15+,PR
    00001A4C 68F6                   MOV.L       @R15+,R8
    00001A4E 69F6                   MOV.L       @R15+,R9
    00001A50 6AF6                   MOV.L       @R15+,R10
    00001A52 6BF6                   MOV.L       @R15+,R11
    00001A54 6CF6                   MOV.L       @R15+,R12
    00001A56 6DF6                   MOV.L       @R15+,R13
    00001A58 000B                   RTS
    00001A5A 6EF6                   MOV.L       @R15+,R14
    00001A5C              L940:                             
    00001A5C <00000000>             .DATA.L     _ML_vram_adress
      Monochrome  1264    #endif
      Monochrome  1265    
      Monochrome  1266    #ifdef ML_BMP_16_XOR_CL
      Monochrome  1267    void ML_bmp_16_xor_cl(const unsigned short *bmp, int x, int y)
      Monochrome  1268    {
      Monochrome  1269            unsigned long line;
      Monochrome  1270            char i, shift, begin=0, end=16, bool1=1, bool2=1, bool3=1, *screen, *p=(char*)&line+1;
      Monochrome  1271            if(!bmp || x<-15 || x>127 || y<-15 || y>63) return;
      Monochrome  1272            if(y < 0) begin = -y;
      Monochrome  1273            if(y > 48) end = 64-y;
      Monochrome  1274            shift = 8-(x&7);
      Monochrome  1275            if(x < 0) bool1 = 0;
      Monochrome  1276            if(x<-8 || x>119) bool2 = 0;
      Monochrome  1277            if(x>111 || shift==8) bool3 = 0;
      Monochrome  1278            screen = ML_vram_adress()+(y+begin<<4)+(x>>3);
      Monochrome  1279            for(i=begin ; i<end ; i++)
      Monochrome  1280            {
      Monochrome  1281                    line = bmp[i]<<shift;
      Monochrome  1282                    if(bool1) screen[0] ^= *p;
      Monochrome  1283                    if(bool2) screen[1] ^= *(p+1);
      Monochrome  1284                    if(bool3) screen[2] ^= *(p+2);
      Monochrome  1285                    screen += 16;
      Monochrome  1286            }
      Monochrome  1287    }
      Monochrome  1288    #endif
      Monochrome  1289    
D   00000000              __$SysCallCode:                  ; static: SysCallCode
    00000000 D201422B60             .DATA.L     H'D201422B,H'60F20000,H'80010070




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE   88


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             F200008001   
             0070         
    0000000C              __$SysCall:                      ; static: SysCall
    0000000C <00000000>             .DATA.L     __$SysCallCode

























































SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Jan-2015 12:41:58  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:     1289



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               00001A60 Byte(s)
CONSTANT SECTION (C):                               00000000 Byte(s)
DATA     SECTION (D):                               00000010 Byte(s)
BSS      SECTION (B):                               00000000 Byte(s)

 TOTAL PROGRAM SIZE: 00001A70 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           10
NUMBER OF EXTERNAL DEFINITION SYMBOLS:          26
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:           288






























*** COMMAND PARAMETER ***


  -subcommand=C:\Users\ALEX\AppData\Local\Temp\hmk8E6F.tmp 

